// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: B.proto
/* eslint-disable */

import type { ByteSource } from "protoscript";
import { BinaryReader, BinaryWriter } from "protoscript";

import { Foo, FooJSON } from "./A.pb";

//========================================//
//                 Types                  //
//========================================//

export interface Bar {
  foo: Foo;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const Bar = {
  /**
   * Serializes Bar to protobuf.
   */
  encode: function (msg: Partial<Bar>): Uint8Array {
    return Bar._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes Bar from protobuf.
   */
  decode: function (bytes: ByteSource): Bar {
    return Bar._readMessage(Bar.initialize(), new BinaryReader(bytes));
  },

  /**
   * Initializes Bar with all fields set to their default value.
   */
  initialize: function (): Bar {
    return {
      foo: Foo.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Bar>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.foo) {
      writer.writeMessage(1, msg.foo, Foo._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Bar, reader: BinaryReader): Bar {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.foo, Foo._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const BarJSON = {
  /**
   * Serializes Bar to JSON.
   */
  encode: function (msg: Partial<Bar>): string {
    return JSON.stringify(BarJSON._writeMessage(msg));
  },

  /**
   * Deserializes Bar from JSON.
   */
  decode: function (json: string): Bar {
    return BarJSON._readMessage(BarJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Bar with all fields set to their default value.
   */
  initialize: function (): Bar {
    return {
      foo: Foo.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<Bar>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.foo) {
      const foo = FooJSON._writeMessage(msg.foo);
      if (Object.keys(foo).length > 0) {
        json["foo"] = foo;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Bar, json: any): Bar {
    const _foo = json["foo"];
    if (_foo) {
      const m = Foo.initialize();
      FooJSON._readMessage(m, _foo);
      msg.foo = m;
    }
    return msg;
  },
};
