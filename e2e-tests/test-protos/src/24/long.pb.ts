// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: 24/long.proto
import type {
  ByteSource,
  ClientConfiguration,
  ServiceHandler,
} from "twirpscript";
import {
  BinaryReader,
  BinaryWriter,
  JSONrequest,
  PBrequest,
  createMethodHandler,
} from "twirpscript";

//======================================================//
// VeryLongNameThatCausesAnErrorService Protobuf Client //
//======================================================//

export async function GetAll(
  getAllRequest: GetAllRequest,
  config?: ClientConfiguration
): Promise<GetAllResponse> {
  const response = await PBrequest(
    "/pkg.VeryLongNameThatCausesAnErrorService/GetAll",
    GetAllRequest.encode(getAllRequest),
    config
  );
  return GetAllResponse.decode(response);
}

//==================================================//
// VeryLongNameThatCausesAnErrorService JSON Client //
//==================================================//

export async function GetAllJSON(
  getAllRequest: GetAllRequest,
  config?: ClientConfiguration
): Promise<GetAllResponse> {
  const response = await JSONrequest<GetAllResponse>(
    "/pkg.VeryLongNameThatCausesAnErrorService/GetAll",
    getAllRequest,
    config
  );
  return response;
}

//==============================================//
// VeryLongNameThatCausesAnErrorService Service //
//==============================================//

export interface VeryLongNameThatCausesAnErrorServiceService<
  Context = unknown
> {
  GetAll: (
    getAllRequest: GetAllRequest,
    context: Context
  ) => Promise<GetAllResponse> | GetAllResponse;
}

export function createVeryLongNameThatCausesAnErrorServiceHandler<Context>(
  service: VeryLongNameThatCausesAnErrorServiceService<Context>
): ServiceHandler<Context> {
  return {
    name: "pkg.VeryLongNameThatCausesAnErrorService",
    methods: {
      GetAll: createMethodHandler({
        handler: service.GetAll,
        encode: GetAllResponse.encode,
        decode: GetAllRequest.decode,
      }),
    },
  };
}

//========================================//
//                 Types                  //
//========================================//

export interface VeryLongNameThatCausesAnError {
  id: number;
}

export interface GetAllRequest {}

export interface GetAllResponse {}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const VeryLongNameThatCausesAnError = {
  writeMessage: function (
    msg: VeryLongNameThatCausesAnError,
    writer: BinaryWriter
  ): void {
    if (msg.id) {
      writer.writeInt32(1, msg.id);
    }
  },

  encode: function (
    veryLongNameThatCausesAnError: VeryLongNameThatCausesAnError
  ): Uint8Array {
    const writer = new BinaryWriter();
    VeryLongNameThatCausesAnError.writeMessage(
      veryLongNameThatCausesAnError,
      writer
    );
    return writer.getResultBuffer();
  },

  readMessage: function (
    msg: Partial<VeryLongNameThatCausesAnError>,
    reader: BinaryReader
  ): void {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    if (!msg.id) {
      msg.id = 0;
    }
  },

  decode: function (bytes: ByteSource): VeryLongNameThatCausesAnError {
    const reader = new BinaryReader(bytes);
    const message = {};
    VeryLongNameThatCausesAnError.readMessage(message, reader);
    return message as VeryLongNameThatCausesAnError;
  },

  defaultValue: function (): VeryLongNameThatCausesAnError {
    return {
      id: 0,
    };
  },
};

export const GetAllRequest = {
  writeMessage: function (msg: GetAllRequest, writer: BinaryWriter): void {},

  encode: function (getAllRequest: GetAllRequest): Uint8Array {
    const writer = new BinaryWriter();
    GetAllRequest.writeMessage(getAllRequest, writer);
    return writer.getResultBuffer();
  },

  readMessage: function (
    msg: Partial<GetAllRequest>,
    reader: BinaryReader
  ): void {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      const field = reader.getFieldNumber();
      switch (field) {
        default: {
          reader.skipField();
          break;
        }
      }
    }
  },

  decode: function (bytes: ByteSource): GetAllRequest {
    const reader = new BinaryReader(bytes);
    const message = {};
    GetAllRequest.readMessage(message, reader);
    return message as GetAllRequest;
  },

  defaultValue: function (): GetAllRequest {
    return {};
  },
};

export const GetAllResponse = {
  writeMessage: function (msg: GetAllResponse, writer: BinaryWriter): void {},

  encode: function (getAllResponse: GetAllResponse): Uint8Array {
    const writer = new BinaryWriter();
    GetAllResponse.writeMessage(getAllResponse, writer);
    return writer.getResultBuffer();
  },

  readMessage: function (
    msg: Partial<GetAllResponse>,
    reader: BinaryReader
  ): void {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      const field = reader.getFieldNumber();
      switch (field) {
        default: {
          reader.skipField();
          break;
        }
      }
    }
  },

  decode: function (bytes: ByteSource): GetAllResponse {
    const reader = new BinaryReader(bytes);
    const message = {};
    GetAllResponse.readMessage(message, reader);
    return message as GetAllResponse;
  },

  defaultValue: function (): GetAllResponse {
    return {};
  },
};
