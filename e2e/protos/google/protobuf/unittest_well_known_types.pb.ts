// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: google/protobuf/unittest_well_known_types.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";

//========================================//
//                 Types                  //
//========================================//

/**
 * Test that we can include all well-known types.
 * Each wrapper type is included separately, as languages
 * map handle different wrappers in different ways.
 */
export interface TestWellKnownTypes {
  anyField: protoscript.Any;
  apiField: protoscript.Api;
  durationField: protoscript.Duration;
  emptyField: protoscript.Empty;
  fieldMaskField: protoscript.FieldMask;
  sourceContextField: protoscript.SourceContext;
  structField: protoscript.Struct;
  timestampField: protoscript.Timestamp;
  typeField: protoscript.Type;
  doubleField: protoscript.DoubleValue;
  floatField: protoscript.FloatValue;
  int64Field: protoscript.Int64Value;
  uint64Field: protoscript.UInt64Value;
  int32Field: protoscript.Int32Value;
  uint32Field: protoscript.UInt32Value;
  boolField: protoscript.BoolValue;
  stringField: protoscript.StringValue;
  bytesField: protoscript.BytesValue;
  /**
   * Part of struct, but useful to be able to test separately
   */
  valueField: protoscript.Value;
}

/**
 * A repeated field for each well-known type.
 */
export interface RepeatedWellKnownTypes {
  anyField: protoscript.Any[];
  apiField: protoscript.Api[];
  durationField: protoscript.Duration[];
  emptyField: protoscript.Empty[];
  fieldMaskField: protoscript.FieldMask[];
  sourceContextField: protoscript.SourceContext[];
  structField: protoscript.Struct[];
  timestampField: protoscript.Timestamp[];
  typeField: protoscript.Type[];
  /**
   * These don't actually make a lot of sense, but they're not prohibited...
   */
  doubleField: protoscript.DoubleValue[];
  floatField: protoscript.FloatValue[];
  int64Field: protoscript.Int64Value[];
  uint64Field: protoscript.UInt64Value[];
  int32Field: protoscript.Int32Value[];
  uint32Field: protoscript.UInt32Value[];
  boolField: protoscript.BoolValue[];
  stringField: protoscript.StringValue[];
  bytesField: protoscript.BytesValue[];
}

export interface OneofWellKnownTypes {
  anyField?: protoscript.Any | null | undefined;
  apiField?: protoscript.Api | null | undefined;
  durationField?: protoscript.Duration | null | undefined;
  emptyField?: protoscript.Empty | null | undefined;
  fieldMaskField?: protoscript.FieldMask | null | undefined;
  sourceContextField?: protoscript.SourceContext | null | undefined;
  structField?: protoscript.Struct | null | undefined;
  timestampField?: protoscript.Timestamp | null | undefined;
  typeField?: protoscript.Type | null | undefined;
  doubleField?: protoscript.DoubleValue | null | undefined;
  floatField?: protoscript.FloatValue | null | undefined;
  int64Field?: protoscript.Int64Value | null | undefined;
  uint64Field?: protoscript.UInt64Value | null | undefined;
  int32Field?: protoscript.Int32Value | null | undefined;
  uint32Field?: protoscript.UInt32Value | null | undefined;
  boolField?: protoscript.BoolValue | null | undefined;
  stringField?: protoscript.StringValue | null | undefined;
  bytesField?: protoscript.BytesValue | null | undefined;
}

/**
 * A map field for each well-known type. We only
 * need to worry about the value part of the map being the
 * well-known types, as messages can't be map keys.
 */
export interface MapWellKnownTypes {
  anyField: Record<string, MapWellKnownTypes.AnyField["value"] | undefined>;
  apiField: Record<string, MapWellKnownTypes.ApiField["value"] | undefined>;
  durationField: Record<
    string,
    MapWellKnownTypes.DurationField["value"] | undefined
  >;
  emptyField: Record<string, MapWellKnownTypes.EmptyField["value"] | undefined>;
  fieldMaskField: Record<
    string,
    MapWellKnownTypes.FieldMaskField["value"] | undefined
  >;
  sourceContextField: Record<
    string,
    MapWellKnownTypes.SourceContextField["value"] | undefined
  >;
  structField: Record<
    string,
    MapWellKnownTypes.StructField["value"] | undefined
  >;
  timestampField: Record<
    string,
    MapWellKnownTypes.TimestampField["value"] | undefined
  >;
  typeField: Record<string, MapWellKnownTypes.TypeField["value"] | undefined>;
  doubleField: Record<
    string,
    MapWellKnownTypes.DoubleField["value"] | undefined
  >;
  floatField: Record<string, MapWellKnownTypes.FloatField["value"] | undefined>;
  int64Field: Record<string, MapWellKnownTypes.Int64Field["value"] | undefined>;
  uint64Field: Record<
    string,
    MapWellKnownTypes.Uint64Field["value"] | undefined
  >;
  int32Field: Record<string, MapWellKnownTypes.Int32Field["value"] | undefined>;
  uint32Field: Record<
    string,
    MapWellKnownTypes.Uint32Field["value"] | undefined
  >;
  boolField: Record<string, MapWellKnownTypes.BoolField["value"] | undefined>;
  stringField: Record<
    string,
    MapWellKnownTypes.StringField["value"] | undefined
  >;
  bytesField: Record<string, MapWellKnownTypes.BytesField["value"] | undefined>;
}

export declare namespace MapWellKnownTypes {
  interface AnyField {
    key: number;
    value: protoscript.Any;
  }

  interface ApiField {
    key: number;
    value: protoscript.Api;
  }

  interface DurationField {
    key: number;
    value: protoscript.Duration;
  }

  interface EmptyField {
    key: number;
    value: protoscript.Empty;
  }

  interface FieldMaskField {
    key: number;
    value: protoscript.FieldMask;
  }

  interface SourceContextField {
    key: number;
    value: protoscript.SourceContext;
  }

  interface StructField {
    key: number;
    value: protoscript.Struct;
  }

  interface TimestampField {
    key: number;
    value: protoscript.Timestamp;
  }

  interface TypeField {
    key: number;
    value: protoscript.Type;
  }

  interface DoubleField {
    key: number;
    value: protoscript.DoubleValue;
  }

  interface FloatField {
    key: number;
    value: protoscript.FloatValue;
  }

  interface Int64Field {
    key: number;
    value: protoscript.Int64Value;
  }

  interface Uint64Field {
    key: number;
    value: protoscript.UInt64Value;
  }

  interface Int32Field {
    key: number;
    value: protoscript.Int32Value;
  }

  interface Uint32Field {
    key: number;
    value: protoscript.UInt32Value;
  }

  interface BoolField {
    key: number;
    value: protoscript.BoolValue;
  }

  interface StringField {
    key: number;
    value: protoscript.StringValue;
  }

  interface BytesField {
    key: number;
    value: protoscript.BytesValue;
  }
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const TestWellKnownTypes = {
  /**
   * Serializes TestWellKnownTypes to protobuf.
   */
  encode: function (msg: PartialDeep<TestWellKnownTypes>): Uint8Array {
    return TestWellKnownTypes._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes TestWellKnownTypes from protobuf.
   */
  decode: function (bytes: ByteSource): TestWellKnownTypes {
    return TestWellKnownTypes._readMessage(
      TestWellKnownTypes.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes TestWellKnownTypes with all fields set to their default value.
   */
  initialize: function (msg?: Partial<TestWellKnownTypes>): TestWellKnownTypes {
    return {
      anyField: protoscript.Any.initialize(),
      apiField: protoscript.Api.initialize(),
      durationField: protoscript.Duration.initialize(),
      emptyField: protoscript.Empty.initialize(),
      fieldMaskField: protoscript.FieldMask.initialize(),
      sourceContextField: protoscript.SourceContext.initialize(),
      structField: protoscript.Struct.initialize(),
      timestampField: protoscript.Timestamp.initialize(),
      typeField: protoscript.Type.initialize(),
      doubleField: protoscript.DoubleValue.initialize(),
      floatField: protoscript.FloatValue.initialize(),
      int64Field: protoscript.Int64Value.initialize(),
      uint64Field: protoscript.UInt64Value.initialize(),
      int32Field: protoscript.Int32Value.initialize(),
      uint32Field: protoscript.UInt32Value.initialize(),
      boolField: protoscript.BoolValue.initialize(),
      stringField: protoscript.StringValue.initialize(),
      bytesField: protoscript.BytesValue.initialize(),
      valueField: protoscript.Value.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<TestWellKnownTypes>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.anyField) {
      writer.writeMessage(1, msg.anyField, protoscript.Any._writeMessage);
    }
    if (msg.apiField) {
      writer.writeMessage(2, msg.apiField, protoscript.Api._writeMessage);
    }
    if (msg.durationField) {
      writer.writeMessage(
        3,
        msg.durationField,
        protoscript.Duration._writeMessage,
      );
    }
    if (msg.emptyField) {
      writer.writeMessage(4, msg.emptyField, protoscript.Empty._writeMessage);
    }
    if (msg.fieldMaskField) {
      writer.writeMessage(
        5,
        msg.fieldMaskField,
        protoscript.FieldMask._writeMessage,
      );
    }
    if (msg.sourceContextField) {
      writer.writeMessage(
        6,
        msg.sourceContextField,
        protoscript.SourceContext._writeMessage,
      );
    }
    if (msg.structField) {
      writer.writeMessage(7, msg.structField, protoscript.Struct._writeMessage);
    }
    if (msg.timestampField) {
      writer.writeMessage(
        8,
        msg.timestampField,
        protoscript.Timestamp._writeMessage,
      );
    }
    if (msg.typeField) {
      writer.writeMessage(9, msg.typeField, protoscript.Type._writeMessage);
    }
    if (msg.doubleField) {
      writer.writeMessage(
        10,
        msg.doubleField,
        protoscript.DoubleValue._writeMessage,
      );
    }
    if (msg.floatField) {
      writer.writeMessage(
        11,
        msg.floatField,
        protoscript.FloatValue._writeMessage,
      );
    }
    if (msg.int64Field) {
      writer.writeMessage(
        12,
        msg.int64Field,
        protoscript.Int64Value._writeMessage,
      );
    }
    if (msg.uint64Field) {
      writer.writeMessage(
        13,
        msg.uint64Field,
        protoscript.UInt64Value._writeMessage,
      );
    }
    if (msg.int32Field) {
      writer.writeMessage(
        14,
        msg.int32Field,
        protoscript.Int32Value._writeMessage,
      );
    }
    if (msg.uint32Field) {
      writer.writeMessage(
        15,
        msg.uint32Field,
        protoscript.UInt32Value._writeMessage,
      );
    }
    if (msg.boolField) {
      writer.writeMessage(
        16,
        msg.boolField,
        protoscript.BoolValue._writeMessage,
      );
    }
    if (msg.stringField) {
      writer.writeMessage(
        17,
        msg.stringField,
        protoscript.StringValue._writeMessage,
      );
    }
    if (msg.bytesField) {
      writer.writeMessage(
        18,
        msg.bytesField,
        protoscript.BytesValue._writeMessage,
      );
    }
    if (msg.valueField) {
      writer.writeMessage(19, msg.valueField, protoscript.Value._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: TestWellKnownTypes,
    reader: protoscript.BinaryReader,
  ): TestWellKnownTypes {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.anyField, protoscript.Any._readMessage);
          break;
        }
        case 2: {
          reader.readMessage(msg.apiField, protoscript.Api._readMessage);
          break;
        }
        case 3: {
          reader.readMessage(
            msg.durationField,
            protoscript.Duration._readMessage,
          );
          break;
        }
        case 4: {
          reader.readMessage(msg.emptyField, protoscript.Empty._readMessage);
          break;
        }
        case 5: {
          reader.readMessage(
            msg.fieldMaskField,
            protoscript.FieldMask._readMessage,
          );
          break;
        }
        case 6: {
          reader.readMessage(
            msg.sourceContextField,
            protoscript.SourceContext._readMessage,
          );
          break;
        }
        case 7: {
          reader.readMessage(msg.structField, protoscript.Struct._readMessage);
          break;
        }
        case 8: {
          reader.readMessage(
            msg.timestampField,
            protoscript.Timestamp._readMessage,
          );
          break;
        }
        case 9: {
          reader.readMessage(msg.typeField, protoscript.Type._readMessage);
          break;
        }
        case 10: {
          reader.readMessage(
            msg.doubleField,
            protoscript.DoubleValue._readMessage,
          );
          break;
        }
        case 11: {
          reader.readMessage(
            msg.floatField,
            protoscript.FloatValue._readMessage,
          );
          break;
        }
        case 12: {
          reader.readMessage(
            msg.int64Field,
            protoscript.Int64Value._readMessage,
          );
          break;
        }
        case 13: {
          reader.readMessage(
            msg.uint64Field,
            protoscript.UInt64Value._readMessage,
          );
          break;
        }
        case 14: {
          reader.readMessage(
            msg.int32Field,
            protoscript.Int32Value._readMessage,
          );
          break;
        }
        case 15: {
          reader.readMessage(
            msg.uint32Field,
            protoscript.UInt32Value._readMessage,
          );
          break;
        }
        case 16: {
          reader.readMessage(msg.boolField, protoscript.BoolValue._readMessage);
          break;
        }
        case 17: {
          reader.readMessage(
            msg.stringField,
            protoscript.StringValue._readMessage,
          );
          break;
        }
        case 18: {
          reader.readMessage(
            msg.bytesField,
            protoscript.BytesValue._readMessage,
          );
          break;
        }
        case 19: {
          reader.readMessage(msg.valueField, protoscript.Value._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const RepeatedWellKnownTypes = {
  /**
   * Serializes RepeatedWellKnownTypes to protobuf.
   */
  encode: function (msg: PartialDeep<RepeatedWellKnownTypes>): Uint8Array {
    return RepeatedWellKnownTypes._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes RepeatedWellKnownTypes from protobuf.
   */
  decode: function (bytes: ByteSource): RepeatedWellKnownTypes {
    return RepeatedWellKnownTypes._readMessage(
      RepeatedWellKnownTypes.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes RepeatedWellKnownTypes with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<RepeatedWellKnownTypes>,
  ): RepeatedWellKnownTypes {
    return {
      anyField: [],
      apiField: [],
      durationField: [],
      emptyField: [],
      fieldMaskField: [],
      sourceContextField: [],
      structField: [],
      timestampField: [],
      typeField: [],
      doubleField: [],
      floatField: [],
      int64Field: [],
      uint64Field: [],
      int32Field: [],
      uint32Field: [],
      boolField: [],
      stringField: [],
      bytesField: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<RepeatedWellKnownTypes>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.anyField?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.anyField as any,
        protoscript.Any._writeMessage,
      );
    }
    if (msg.apiField?.length) {
      writer.writeRepeatedMessage(
        2,
        msg.apiField as any,
        protoscript.Api._writeMessage,
      );
    }
    if (msg.durationField?.length) {
      writer.writeRepeatedMessage(
        3,
        msg.durationField as any,
        protoscript.Duration._writeMessage,
      );
    }
    if (msg.emptyField?.length) {
      writer.writeRepeatedMessage(
        4,
        msg.emptyField as any,
        protoscript.Empty._writeMessage,
      );
    }
    if (msg.fieldMaskField?.length) {
      writer.writeRepeatedMessage(
        5,
        msg.fieldMaskField as any,
        protoscript.FieldMask._writeMessage,
      );
    }
    if (msg.sourceContextField?.length) {
      writer.writeRepeatedMessage(
        6,
        msg.sourceContextField as any,
        protoscript.SourceContext._writeMessage,
      );
    }
    if (msg.structField?.length) {
      writer.writeRepeatedMessage(
        7,
        msg.structField as any,
        protoscript.Struct._writeMessage,
      );
    }
    if (msg.timestampField?.length) {
      writer.writeRepeatedMessage(
        8,
        msg.timestampField as any,
        protoscript.Timestamp._writeMessage,
      );
    }
    if (msg.typeField?.length) {
      writer.writeRepeatedMessage(
        9,
        msg.typeField as any,
        protoscript.Type._writeMessage,
      );
    }
    if (msg.doubleField?.length) {
      writer.writeRepeatedMessage(
        10,
        msg.doubleField as any,
        protoscript.DoubleValue._writeMessage,
      );
    }
    if (msg.floatField?.length) {
      writer.writeRepeatedMessage(
        11,
        msg.floatField as any,
        protoscript.FloatValue._writeMessage,
      );
    }
    if (msg.int64Field?.length) {
      writer.writeRepeatedMessage(
        12,
        msg.int64Field as any,
        protoscript.Int64Value._writeMessage,
      );
    }
    if (msg.uint64Field?.length) {
      writer.writeRepeatedMessage(
        13,
        msg.uint64Field as any,
        protoscript.UInt64Value._writeMessage,
      );
    }
    if (msg.int32Field?.length) {
      writer.writeRepeatedMessage(
        14,
        msg.int32Field as any,
        protoscript.Int32Value._writeMessage,
      );
    }
    if (msg.uint32Field?.length) {
      writer.writeRepeatedMessage(
        15,
        msg.uint32Field as any,
        protoscript.UInt32Value._writeMessage,
      );
    }
    if (msg.boolField?.length) {
      writer.writeRepeatedMessage(
        16,
        msg.boolField as any,
        protoscript.BoolValue._writeMessage,
      );
    }
    if (msg.stringField?.length) {
      writer.writeRepeatedMessage(
        17,
        msg.stringField as any,
        protoscript.StringValue._writeMessage,
      );
    }
    if (msg.bytesField?.length) {
      writer.writeRepeatedMessage(
        18,
        msg.bytesField as any,
        protoscript.BytesValue._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: RepeatedWellKnownTypes,
    reader: protoscript.BinaryReader,
  ): RepeatedWellKnownTypes {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = protoscript.Any.initialize();
          reader.readMessage(m, protoscript.Any._readMessage);
          msg.anyField.push(m);
          break;
        }
        case 2: {
          const m = protoscript.Api.initialize();
          reader.readMessage(m, protoscript.Api._readMessage);
          msg.apiField.push(m);
          break;
        }
        case 3: {
          const m = protoscript.Duration.initialize();
          reader.readMessage(m, protoscript.Duration._readMessage);
          msg.durationField.push(m);
          break;
        }
        case 4: {
          const m = protoscript.Empty.initialize();
          reader.readMessage(m, protoscript.Empty._readMessage);
          msg.emptyField.push(m);
          break;
        }
        case 5: {
          const m = protoscript.FieldMask.initialize();
          reader.readMessage(m, protoscript.FieldMask._readMessage);
          msg.fieldMaskField.push(m);
          break;
        }
        case 6: {
          const m = protoscript.SourceContext.initialize();
          reader.readMessage(m, protoscript.SourceContext._readMessage);
          msg.sourceContextField.push(m);
          break;
        }
        case 7: {
          const m = protoscript.Struct.initialize();
          reader.readMessage(m, protoscript.Struct._readMessage);
          msg.structField.push(m);
          break;
        }
        case 8: {
          const m = protoscript.Timestamp.initialize();
          reader.readMessage(m, protoscript.Timestamp._readMessage);
          msg.timestampField.push(m);
          break;
        }
        case 9: {
          const m = protoscript.Type.initialize();
          reader.readMessage(m, protoscript.Type._readMessage);
          msg.typeField.push(m);
          break;
        }
        case 10: {
          const m = protoscript.DoubleValue.initialize();
          reader.readMessage(m, protoscript.DoubleValue._readMessage);
          msg.doubleField.push(m);
          break;
        }
        case 11: {
          const m = protoscript.FloatValue.initialize();
          reader.readMessage(m, protoscript.FloatValue._readMessage);
          msg.floatField.push(m);
          break;
        }
        case 12: {
          const m = protoscript.Int64Value.initialize();
          reader.readMessage(m, protoscript.Int64Value._readMessage);
          msg.int64Field.push(m);
          break;
        }
        case 13: {
          const m = protoscript.UInt64Value.initialize();
          reader.readMessage(m, protoscript.UInt64Value._readMessage);
          msg.uint64Field.push(m);
          break;
        }
        case 14: {
          const m = protoscript.Int32Value.initialize();
          reader.readMessage(m, protoscript.Int32Value._readMessage);
          msg.int32Field.push(m);
          break;
        }
        case 15: {
          const m = protoscript.UInt32Value.initialize();
          reader.readMessage(m, protoscript.UInt32Value._readMessage);
          msg.uint32Field.push(m);
          break;
        }
        case 16: {
          const m = protoscript.BoolValue.initialize();
          reader.readMessage(m, protoscript.BoolValue._readMessage);
          msg.boolField.push(m);
          break;
        }
        case 17: {
          const m = protoscript.StringValue.initialize();
          reader.readMessage(m, protoscript.StringValue._readMessage);
          msg.stringField.push(m);
          break;
        }
        case 18: {
          const m = protoscript.BytesValue.initialize();
          reader.readMessage(m, protoscript.BytesValue._readMessage);
          msg.bytesField.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const OneofWellKnownTypes = {
  /**
   * Serializes OneofWellKnownTypes to protobuf.
   */
  encode: function (msg: PartialDeep<OneofWellKnownTypes>): Uint8Array {
    return OneofWellKnownTypes._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes OneofWellKnownTypes from protobuf.
   */
  decode: function (bytes: ByteSource): OneofWellKnownTypes {
    return OneofWellKnownTypes._readMessage(
      OneofWellKnownTypes.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes OneofWellKnownTypes with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<OneofWellKnownTypes>,
  ): OneofWellKnownTypes {
    return {
      anyField: undefined,
      apiField: undefined,
      durationField: undefined,
      emptyField: undefined,
      fieldMaskField: undefined,
      sourceContextField: undefined,
      structField: undefined,
      timestampField: undefined,
      typeField: undefined,
      doubleField: undefined,
      floatField: undefined,
      int64Field: undefined,
      uint64Field: undefined,
      int32Field: undefined,
      uint32Field: undefined,
      boolField: undefined,
      stringField: undefined,
      bytesField: undefined,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<OneofWellKnownTypes>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.anyField != undefined) {
      writer.writeMessage(1, msg.anyField, protoscript.Any._writeMessage);
    }
    if (msg.apiField != undefined) {
      writer.writeMessage(2, msg.apiField, protoscript.Api._writeMessage);
    }
    if (msg.durationField != undefined) {
      writer.writeMessage(
        3,
        msg.durationField,
        protoscript.Duration._writeMessage,
      );
    }
    if (msg.emptyField != undefined) {
      writer.writeMessage(4, msg.emptyField, protoscript.Empty._writeMessage);
    }
    if (msg.fieldMaskField != undefined) {
      writer.writeMessage(
        5,
        msg.fieldMaskField,
        protoscript.FieldMask._writeMessage,
      );
    }
    if (msg.sourceContextField != undefined) {
      writer.writeMessage(
        6,
        msg.sourceContextField,
        protoscript.SourceContext._writeMessage,
      );
    }
    if (msg.structField != undefined) {
      writer.writeMessage(7, msg.structField, protoscript.Struct._writeMessage);
    }
    if (msg.timestampField != undefined) {
      writer.writeMessage(
        8,
        msg.timestampField,
        protoscript.Timestamp._writeMessage,
      );
    }
    if (msg.typeField != undefined) {
      writer.writeMessage(9, msg.typeField, protoscript.Type._writeMessage);
    }
    if (msg.doubleField != undefined) {
      writer.writeMessage(
        10,
        msg.doubleField,
        protoscript.DoubleValue._writeMessage,
      );
    }
    if (msg.floatField != undefined) {
      writer.writeMessage(
        11,
        msg.floatField,
        protoscript.FloatValue._writeMessage,
      );
    }
    if (msg.int64Field != undefined) {
      writer.writeMessage(
        12,
        msg.int64Field,
        protoscript.Int64Value._writeMessage,
      );
    }
    if (msg.uint64Field != undefined) {
      writer.writeMessage(
        13,
        msg.uint64Field,
        protoscript.UInt64Value._writeMessage,
      );
    }
    if (msg.int32Field != undefined) {
      writer.writeMessage(
        14,
        msg.int32Field,
        protoscript.Int32Value._writeMessage,
      );
    }
    if (msg.uint32Field != undefined) {
      writer.writeMessage(
        15,
        msg.uint32Field,
        protoscript.UInt32Value._writeMessage,
      );
    }
    if (msg.boolField != undefined) {
      writer.writeMessage(
        16,
        msg.boolField,
        protoscript.BoolValue._writeMessage,
      );
    }
    if (msg.stringField != undefined) {
      writer.writeMessage(
        17,
        msg.stringField,
        protoscript.StringValue._writeMessage,
      );
    }
    if (msg.bytesField != undefined) {
      writer.writeMessage(
        18,
        msg.bytesField,
        protoscript.BytesValue._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: OneofWellKnownTypes,
    reader: protoscript.BinaryReader,
  ): OneofWellKnownTypes {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.anyField = protoscript.Any.initialize();
          reader.readMessage(msg.anyField, protoscript.Any._readMessage);
          break;
        }
        case 2: {
          msg.apiField = protoscript.Api.initialize();
          reader.readMessage(msg.apiField, protoscript.Api._readMessage);
          break;
        }
        case 3: {
          msg.durationField = protoscript.Duration.initialize();
          reader.readMessage(
            msg.durationField,
            protoscript.Duration._readMessage,
          );
          break;
        }
        case 4: {
          msg.emptyField = protoscript.Empty.initialize();
          reader.readMessage(msg.emptyField, protoscript.Empty._readMessage);
          break;
        }
        case 5: {
          msg.fieldMaskField = protoscript.FieldMask.initialize();
          reader.readMessage(
            msg.fieldMaskField,
            protoscript.FieldMask._readMessage,
          );
          break;
        }
        case 6: {
          msg.sourceContextField = protoscript.SourceContext.initialize();
          reader.readMessage(
            msg.sourceContextField,
            protoscript.SourceContext._readMessage,
          );
          break;
        }
        case 7: {
          msg.structField = protoscript.Struct.initialize();
          reader.readMessage(msg.structField, protoscript.Struct._readMessage);
          break;
        }
        case 8: {
          msg.timestampField = protoscript.Timestamp.initialize();
          reader.readMessage(
            msg.timestampField,
            protoscript.Timestamp._readMessage,
          );
          break;
        }
        case 9: {
          msg.typeField = protoscript.Type.initialize();
          reader.readMessage(msg.typeField, protoscript.Type._readMessage);
          break;
        }
        case 10: {
          msg.doubleField = protoscript.DoubleValue.initialize();
          reader.readMessage(
            msg.doubleField,
            protoscript.DoubleValue._readMessage,
          );
          break;
        }
        case 11: {
          msg.floatField = protoscript.FloatValue.initialize();
          reader.readMessage(
            msg.floatField,
            protoscript.FloatValue._readMessage,
          );
          break;
        }
        case 12: {
          msg.int64Field = protoscript.Int64Value.initialize();
          reader.readMessage(
            msg.int64Field,
            protoscript.Int64Value._readMessage,
          );
          break;
        }
        case 13: {
          msg.uint64Field = protoscript.UInt64Value.initialize();
          reader.readMessage(
            msg.uint64Field,
            protoscript.UInt64Value._readMessage,
          );
          break;
        }
        case 14: {
          msg.int32Field = protoscript.Int32Value.initialize();
          reader.readMessage(
            msg.int32Field,
            protoscript.Int32Value._readMessage,
          );
          break;
        }
        case 15: {
          msg.uint32Field = protoscript.UInt32Value.initialize();
          reader.readMessage(
            msg.uint32Field,
            protoscript.UInt32Value._readMessage,
          );
          break;
        }
        case 16: {
          msg.boolField = protoscript.BoolValue.initialize();
          reader.readMessage(msg.boolField, protoscript.BoolValue._readMessage);
          break;
        }
        case 17: {
          msg.stringField = protoscript.StringValue.initialize();
          reader.readMessage(
            msg.stringField,
            protoscript.StringValue._readMessage,
          );
          break;
        }
        case 18: {
          msg.bytesField = protoscript.BytesValue.initialize();
          reader.readMessage(
            msg.bytesField,
            protoscript.BytesValue._readMessage,
          );
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const MapWellKnownTypes = {
  /**
   * Serializes MapWellKnownTypes to protobuf.
   */
  encode: function (msg: PartialDeep<MapWellKnownTypes>): Uint8Array {
    return MapWellKnownTypes._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes MapWellKnownTypes from protobuf.
   */
  decode: function (bytes: ByteSource): MapWellKnownTypes {
    return MapWellKnownTypes._readMessage(
      MapWellKnownTypes.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes MapWellKnownTypes with all fields set to their default value.
   */
  initialize: function (msg?: Partial<MapWellKnownTypes>): MapWellKnownTypes {
    return {
      anyField: {},
      apiField: {},
      durationField: {},
      emptyField: {},
      fieldMaskField: {},
      sourceContextField: {},
      structField: {},
      timestampField: {},
      typeField: {},
      doubleField: {},
      floatField: {},
      int64Field: {},
      uint64Field: {},
      int32Field: {},
      uint32Field: {},
      boolField: {},
      stringField: {},
      bytesField: {},
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<MapWellKnownTypes>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.anyField) {
      writer.writeRepeatedMessage(
        1,
        Object.entries(msg.anyField).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        MapWellKnownTypes.AnyField._writeMessage,
      );
    }
    if (msg.apiField) {
      writer.writeRepeatedMessage(
        2,
        Object.entries(msg.apiField).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        MapWellKnownTypes.ApiField._writeMessage,
      );
    }
    if (msg.durationField) {
      writer.writeRepeatedMessage(
        3,
        Object.entries(msg.durationField).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        MapWellKnownTypes.DurationField._writeMessage,
      );
    }
    if (msg.emptyField) {
      writer.writeRepeatedMessage(
        4,
        Object.entries(msg.emptyField).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        MapWellKnownTypes.EmptyField._writeMessage,
      );
    }
    if (msg.fieldMaskField) {
      writer.writeRepeatedMessage(
        5,
        Object.entries(msg.fieldMaskField).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        MapWellKnownTypes.FieldMaskField._writeMessage,
      );
    }
    if (msg.sourceContextField) {
      writer.writeRepeatedMessage(
        6,
        Object.entries(msg.sourceContextField).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        MapWellKnownTypes.SourceContextField._writeMessage,
      );
    }
    if (msg.structField) {
      writer.writeRepeatedMessage(
        7,
        Object.entries(msg.structField).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        MapWellKnownTypes.StructField._writeMessage,
      );
    }
    if (msg.timestampField) {
      writer.writeRepeatedMessage(
        8,
        Object.entries(msg.timestampField).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        MapWellKnownTypes.TimestampField._writeMessage,
      );
    }
    if (msg.typeField) {
      writer.writeRepeatedMessage(
        9,
        Object.entries(msg.typeField).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        MapWellKnownTypes.TypeField._writeMessage,
      );
    }
    if (msg.doubleField) {
      writer.writeRepeatedMessage(
        10,
        Object.entries(msg.doubleField).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        MapWellKnownTypes.DoubleField._writeMessage,
      );
    }
    if (msg.floatField) {
      writer.writeRepeatedMessage(
        11,
        Object.entries(msg.floatField).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        MapWellKnownTypes.FloatField._writeMessage,
      );
    }
    if (msg.int64Field) {
      writer.writeRepeatedMessage(
        12,
        Object.entries(msg.int64Field).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        MapWellKnownTypes.Int64Field._writeMessage,
      );
    }
    if (msg.uint64Field) {
      writer.writeRepeatedMessage(
        13,
        Object.entries(msg.uint64Field).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        MapWellKnownTypes.Uint64Field._writeMessage,
      );
    }
    if (msg.int32Field) {
      writer.writeRepeatedMessage(
        14,
        Object.entries(msg.int32Field).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        MapWellKnownTypes.Int32Field._writeMessage,
      );
    }
    if (msg.uint32Field) {
      writer.writeRepeatedMessage(
        15,
        Object.entries(msg.uint32Field).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        MapWellKnownTypes.Uint32Field._writeMessage,
      );
    }
    if (msg.boolField) {
      writer.writeRepeatedMessage(
        16,
        Object.entries(msg.boolField).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        MapWellKnownTypes.BoolField._writeMessage,
      );
    }
    if (msg.stringField) {
      writer.writeRepeatedMessage(
        17,
        Object.entries(msg.stringField).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        MapWellKnownTypes.StringField._writeMessage,
      );
    }
    if (msg.bytesField) {
      writer.writeRepeatedMessage(
        18,
        Object.entries(msg.bytesField).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        MapWellKnownTypes.BytesField._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: MapWellKnownTypes,
    reader: protoscript.BinaryReader,
  ): MapWellKnownTypes {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const map = {} as MapWellKnownTypes.AnyField;
          reader.readMessage(map, MapWellKnownTypes.AnyField._readMessage);
          msg.anyField[map.key.toString()] = map.value;
          break;
        }
        case 2: {
          const map = {} as MapWellKnownTypes.ApiField;
          reader.readMessage(map, MapWellKnownTypes.ApiField._readMessage);
          msg.apiField[map.key.toString()] = map.value;
          break;
        }
        case 3: {
          const map = {} as MapWellKnownTypes.DurationField;
          reader.readMessage(map, MapWellKnownTypes.DurationField._readMessage);
          msg.durationField[map.key.toString()] = map.value;
          break;
        }
        case 4: {
          const map = {} as MapWellKnownTypes.EmptyField;
          reader.readMessage(map, MapWellKnownTypes.EmptyField._readMessage);
          msg.emptyField[map.key.toString()] = map.value;
          break;
        }
        case 5: {
          const map = {} as MapWellKnownTypes.FieldMaskField;
          reader.readMessage(
            map,
            MapWellKnownTypes.FieldMaskField._readMessage,
          );
          msg.fieldMaskField[map.key.toString()] = map.value;
          break;
        }
        case 6: {
          const map = {} as MapWellKnownTypes.SourceContextField;
          reader.readMessage(
            map,
            MapWellKnownTypes.SourceContextField._readMessage,
          );
          msg.sourceContextField[map.key.toString()] = map.value;
          break;
        }
        case 7: {
          const map = {} as MapWellKnownTypes.StructField;
          reader.readMessage(map, MapWellKnownTypes.StructField._readMessage);
          msg.structField[map.key.toString()] = map.value;
          break;
        }
        case 8: {
          const map = {} as MapWellKnownTypes.TimestampField;
          reader.readMessage(
            map,
            MapWellKnownTypes.TimestampField._readMessage,
          );
          msg.timestampField[map.key.toString()] = map.value;
          break;
        }
        case 9: {
          const map = {} as MapWellKnownTypes.TypeField;
          reader.readMessage(map, MapWellKnownTypes.TypeField._readMessage);
          msg.typeField[map.key.toString()] = map.value;
          break;
        }
        case 10: {
          const map = {} as MapWellKnownTypes.DoubleField;
          reader.readMessage(map, MapWellKnownTypes.DoubleField._readMessage);
          msg.doubleField[map.key.toString()] = map.value;
          break;
        }
        case 11: {
          const map = {} as MapWellKnownTypes.FloatField;
          reader.readMessage(map, MapWellKnownTypes.FloatField._readMessage);
          msg.floatField[map.key.toString()] = map.value;
          break;
        }
        case 12: {
          const map = {} as MapWellKnownTypes.Int64Field;
          reader.readMessage(map, MapWellKnownTypes.Int64Field._readMessage);
          msg.int64Field[map.key.toString()] = map.value;
          break;
        }
        case 13: {
          const map = {} as MapWellKnownTypes.Uint64Field;
          reader.readMessage(map, MapWellKnownTypes.Uint64Field._readMessage);
          msg.uint64Field[map.key.toString()] = map.value;
          break;
        }
        case 14: {
          const map = {} as MapWellKnownTypes.Int32Field;
          reader.readMessage(map, MapWellKnownTypes.Int32Field._readMessage);
          msg.int32Field[map.key.toString()] = map.value;
          break;
        }
        case 15: {
          const map = {} as MapWellKnownTypes.Uint32Field;
          reader.readMessage(map, MapWellKnownTypes.Uint32Field._readMessage);
          msg.uint32Field[map.key.toString()] = map.value;
          break;
        }
        case 16: {
          const map = {} as MapWellKnownTypes.BoolField;
          reader.readMessage(map, MapWellKnownTypes.BoolField._readMessage);
          msg.boolField[map.key.toString()] = map.value;
          break;
        }
        case 17: {
          const map = {} as MapWellKnownTypes.StringField;
          reader.readMessage(map, MapWellKnownTypes.StringField._readMessage);
          msg.stringField[map.key.toString()] = map.value;
          break;
        }
        case 18: {
          const map = {} as MapWellKnownTypes.BytesField;
          reader.readMessage(map, MapWellKnownTypes.BytesField._readMessage);
          msg.bytesField[map.key.toString()] = map.value;
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  AnyField: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<MapWellKnownTypes.AnyField>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.key) {
        writer.writeInt32(1, msg.key);
      }
      if (msg.value) {
        writer.writeMessage(2, msg.value, protoscript.Any._writeMessage);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: MapWellKnownTypes.AnyField,
      reader: protoscript.BinaryReader,
    ): MapWellKnownTypes.AnyField {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readInt32();
            break;
          }
          case 2: {
            msg.value = protoscript.Any.initialize();
            reader.readMessage(msg.value, protoscript.Any._readMessage);
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  ApiField: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<MapWellKnownTypes.ApiField>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.key) {
        writer.writeInt32(1, msg.key);
      }
      if (msg.value) {
        writer.writeMessage(2, msg.value, protoscript.Api._writeMessage);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: MapWellKnownTypes.ApiField,
      reader: protoscript.BinaryReader,
    ): MapWellKnownTypes.ApiField {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readInt32();
            break;
          }
          case 2: {
            msg.value = protoscript.Api.initialize();
            reader.readMessage(msg.value, protoscript.Api._readMessage);
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  DurationField: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<MapWellKnownTypes.DurationField>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.key) {
        writer.writeInt32(1, msg.key);
      }
      if (msg.value) {
        writer.writeMessage(2, msg.value, protoscript.Duration._writeMessage);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: MapWellKnownTypes.DurationField,
      reader: protoscript.BinaryReader,
    ): MapWellKnownTypes.DurationField {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readInt32();
            break;
          }
          case 2: {
            msg.value = protoscript.Duration.initialize();
            reader.readMessage(msg.value, protoscript.Duration._readMessage);
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  EmptyField: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<MapWellKnownTypes.EmptyField>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.key) {
        writer.writeInt32(1, msg.key);
      }
      if (msg.value) {
        writer.writeMessage(2, msg.value, protoscript.Empty._writeMessage);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: MapWellKnownTypes.EmptyField,
      reader: protoscript.BinaryReader,
    ): MapWellKnownTypes.EmptyField {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readInt32();
            break;
          }
          case 2: {
            msg.value = protoscript.Empty.initialize();
            reader.readMessage(msg.value, protoscript.Empty._readMessage);
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  FieldMaskField: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<MapWellKnownTypes.FieldMaskField>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.key) {
        writer.writeInt32(1, msg.key);
      }
      if (msg.value) {
        writer.writeMessage(2, msg.value, protoscript.FieldMask._writeMessage);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: MapWellKnownTypes.FieldMaskField,
      reader: protoscript.BinaryReader,
    ): MapWellKnownTypes.FieldMaskField {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readInt32();
            break;
          }
          case 2: {
            msg.value = protoscript.FieldMask.initialize();
            reader.readMessage(msg.value, protoscript.FieldMask._readMessage);
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  SourceContextField: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<MapWellKnownTypes.SourceContextField>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.key) {
        writer.writeInt32(1, msg.key);
      }
      if (msg.value) {
        writer.writeMessage(
          2,
          msg.value,
          protoscript.SourceContext._writeMessage,
        );
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: MapWellKnownTypes.SourceContextField,
      reader: protoscript.BinaryReader,
    ): MapWellKnownTypes.SourceContextField {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readInt32();
            break;
          }
          case 2: {
            msg.value = protoscript.SourceContext.initialize();
            reader.readMessage(
              msg.value,
              protoscript.SourceContext._readMessage,
            );
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  StructField: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<MapWellKnownTypes.StructField>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.key) {
        writer.writeInt32(1, msg.key);
      }
      if (msg.value) {
        writer.writeMessage(2, msg.value, protoscript.Struct._writeMessage);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: MapWellKnownTypes.StructField,
      reader: protoscript.BinaryReader,
    ): MapWellKnownTypes.StructField {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readInt32();
            break;
          }
          case 2: {
            msg.value = protoscript.Struct.initialize();
            reader.readMessage(msg.value, protoscript.Struct._readMessage);
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  TimestampField: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<MapWellKnownTypes.TimestampField>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.key) {
        writer.writeInt32(1, msg.key);
      }
      if (msg.value) {
        writer.writeMessage(2, msg.value, protoscript.Timestamp._writeMessage);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: MapWellKnownTypes.TimestampField,
      reader: protoscript.BinaryReader,
    ): MapWellKnownTypes.TimestampField {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readInt32();
            break;
          }
          case 2: {
            msg.value = protoscript.Timestamp.initialize();
            reader.readMessage(msg.value, protoscript.Timestamp._readMessage);
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  TypeField: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<MapWellKnownTypes.TypeField>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.key) {
        writer.writeInt32(1, msg.key);
      }
      if (msg.value) {
        writer.writeMessage(2, msg.value, protoscript.Type._writeMessage);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: MapWellKnownTypes.TypeField,
      reader: protoscript.BinaryReader,
    ): MapWellKnownTypes.TypeField {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readInt32();
            break;
          }
          case 2: {
            msg.value = protoscript.Type.initialize();
            reader.readMessage(msg.value, protoscript.Type._readMessage);
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  DoubleField: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<MapWellKnownTypes.DoubleField>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.key) {
        writer.writeInt32(1, msg.key);
      }
      if (msg.value) {
        writer.writeMessage(
          2,
          msg.value,
          protoscript.DoubleValue._writeMessage,
        );
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: MapWellKnownTypes.DoubleField,
      reader: protoscript.BinaryReader,
    ): MapWellKnownTypes.DoubleField {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readInt32();
            break;
          }
          case 2: {
            msg.value = protoscript.DoubleValue.initialize();
            reader.readMessage(msg.value, protoscript.DoubleValue._readMessage);
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  FloatField: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<MapWellKnownTypes.FloatField>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.key) {
        writer.writeInt32(1, msg.key);
      }
      if (msg.value) {
        writer.writeMessage(2, msg.value, protoscript.FloatValue._writeMessage);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: MapWellKnownTypes.FloatField,
      reader: protoscript.BinaryReader,
    ): MapWellKnownTypes.FloatField {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readInt32();
            break;
          }
          case 2: {
            msg.value = protoscript.FloatValue.initialize();
            reader.readMessage(msg.value, protoscript.FloatValue._readMessage);
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  Int64Field: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<MapWellKnownTypes.Int64Field>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.key) {
        writer.writeInt32(1, msg.key);
      }
      if (msg.value) {
        writer.writeMessage(2, msg.value, protoscript.Int64Value._writeMessage);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: MapWellKnownTypes.Int64Field,
      reader: protoscript.BinaryReader,
    ): MapWellKnownTypes.Int64Field {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readInt32();
            break;
          }
          case 2: {
            msg.value = protoscript.Int64Value.initialize();
            reader.readMessage(msg.value, protoscript.Int64Value._readMessage);
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  Uint64Field: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<MapWellKnownTypes.Uint64Field>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.key) {
        writer.writeInt32(1, msg.key);
      }
      if (msg.value) {
        writer.writeMessage(
          2,
          msg.value,
          protoscript.UInt64Value._writeMessage,
        );
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: MapWellKnownTypes.Uint64Field,
      reader: protoscript.BinaryReader,
    ): MapWellKnownTypes.Uint64Field {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readInt32();
            break;
          }
          case 2: {
            msg.value = protoscript.UInt64Value.initialize();
            reader.readMessage(msg.value, protoscript.UInt64Value._readMessage);
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  Int32Field: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<MapWellKnownTypes.Int32Field>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.key) {
        writer.writeInt32(1, msg.key);
      }
      if (msg.value) {
        writer.writeMessage(2, msg.value, protoscript.Int32Value._writeMessage);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: MapWellKnownTypes.Int32Field,
      reader: protoscript.BinaryReader,
    ): MapWellKnownTypes.Int32Field {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readInt32();
            break;
          }
          case 2: {
            msg.value = protoscript.Int32Value.initialize();
            reader.readMessage(msg.value, protoscript.Int32Value._readMessage);
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  Uint32Field: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<MapWellKnownTypes.Uint32Field>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.key) {
        writer.writeInt32(1, msg.key);
      }
      if (msg.value) {
        writer.writeMessage(
          2,
          msg.value,
          protoscript.UInt32Value._writeMessage,
        );
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: MapWellKnownTypes.Uint32Field,
      reader: protoscript.BinaryReader,
    ): MapWellKnownTypes.Uint32Field {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readInt32();
            break;
          }
          case 2: {
            msg.value = protoscript.UInt32Value.initialize();
            reader.readMessage(msg.value, protoscript.UInt32Value._readMessage);
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  BoolField: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<MapWellKnownTypes.BoolField>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.key) {
        writer.writeInt32(1, msg.key);
      }
      if (msg.value) {
        writer.writeMessage(2, msg.value, protoscript.BoolValue._writeMessage);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: MapWellKnownTypes.BoolField,
      reader: protoscript.BinaryReader,
    ): MapWellKnownTypes.BoolField {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readInt32();
            break;
          }
          case 2: {
            msg.value = protoscript.BoolValue.initialize();
            reader.readMessage(msg.value, protoscript.BoolValue._readMessage);
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  StringField: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<MapWellKnownTypes.StringField>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.key) {
        writer.writeInt32(1, msg.key);
      }
      if (msg.value) {
        writer.writeMessage(
          2,
          msg.value,
          protoscript.StringValue._writeMessage,
        );
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: MapWellKnownTypes.StringField,
      reader: protoscript.BinaryReader,
    ): MapWellKnownTypes.StringField {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readInt32();
            break;
          }
          case 2: {
            msg.value = protoscript.StringValue.initialize();
            reader.readMessage(msg.value, protoscript.StringValue._readMessage);
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  BytesField: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<MapWellKnownTypes.BytesField>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.key) {
        writer.writeInt32(1, msg.key);
      }
      if (msg.value) {
        writer.writeMessage(2, msg.value, protoscript.BytesValue._writeMessage);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: MapWellKnownTypes.BytesField,
      reader: protoscript.BinaryReader,
    ): MapWellKnownTypes.BytesField {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readInt32();
            break;
          }
          case 2: {
            msg.value = protoscript.BytesValue.initialize();
            reader.readMessage(msg.value, protoscript.BytesValue._readMessage);
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const TestWellKnownTypesJSON = {
  /**
   * Serializes TestWellKnownTypes to JSON.
   */
  encode: function (msg: PartialDeep<TestWellKnownTypes>): string {
    return JSON.stringify(TestWellKnownTypesJSON._writeMessage(msg));
  },

  /**
   * Deserializes TestWellKnownTypes from JSON.
   */
  decode: function (json: string): TestWellKnownTypes {
    return TestWellKnownTypesJSON._readMessage(
      TestWellKnownTypesJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes TestWellKnownTypes with all fields set to their default value.
   */
  initialize: function (msg?: Partial<TestWellKnownTypes>): TestWellKnownTypes {
    return {
      anyField: protoscript.AnyJSON.initialize(),
      apiField: protoscript.ApiJSON.initialize(),
      durationField: protoscript.DurationJSON.initialize(),
      emptyField: protoscript.EmptyJSON.initialize(),
      fieldMaskField: protoscript.FieldMaskJSON.initialize(),
      sourceContextField: protoscript.SourceContextJSON.initialize(),
      structField: protoscript.StructJSON.initialize(),
      timestampField: protoscript.TimestampJSON.initialize(),
      typeField: protoscript.TypeJSON.initialize(),
      doubleField: protoscript.DoubleValueJSON.initialize(),
      floatField: protoscript.FloatValueJSON.initialize(),
      int64Field: protoscript.Int64ValueJSON.initialize(),
      uint64Field: protoscript.UInt64ValueJSON.initialize(),
      int32Field: protoscript.Int32ValueJSON.initialize(),
      uint32Field: protoscript.UInt32ValueJSON.initialize(),
      boolField: protoscript.BoolValueJSON.initialize(),
      stringField: protoscript.StringValueJSON.initialize(),
      bytesField: protoscript.BytesValueJSON.initialize(),
      valueField: protoscript.ValueJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<TestWellKnownTypes>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.anyField) {
      const _anyField_ = protoscript.AnyJSON._writeMessage(msg.anyField);
      if (Object.keys(_anyField_).length > 0) {
        json["anyField"] = _anyField_;
      }
    }
    if (msg.apiField) {
      const _apiField_ = protoscript.ApiJSON._writeMessage(msg.apiField);
      if (Object.keys(_apiField_).length > 0) {
        json["apiField"] = _apiField_;
      }
    }
    if (
      msg.durationField &&
      msg.durationField.seconds &&
      msg.durationField.nanos
    ) {
      json["durationField"] = protoscript.serializeDuration(msg.durationField);
    }
    if (msg.emptyField) {
      const _emptyField_ = protoscript.EmptyJSON._writeMessage(msg.emptyField);
      if (Object.keys(_emptyField_).length > 0) {
        json["emptyField"] = _emptyField_;
      }
    }
    if (msg.fieldMaskField) {
      const _fieldMaskField_ = protoscript.FieldMaskJSON._writeMessage(
        msg.fieldMaskField,
      );
      if (Object.keys(_fieldMaskField_).length > 0) {
        json["fieldMaskField"] = _fieldMaskField_;
      }
    }
    if (msg.sourceContextField) {
      const _sourceContextField_ = protoscript.SourceContextJSON._writeMessage(
        msg.sourceContextField,
      );
      if (Object.keys(_sourceContextField_).length > 0) {
        json["sourceContextField"] = _sourceContextField_;
      }
    }
    if (msg.structField) {
      const _structField_ = protoscript.StructJSON._writeMessage(
        msg.structField,
      );
      if (Object.keys(_structField_).length > 0) {
        json["structField"] = _structField_;
      }
    }
    if (
      msg.timestampField &&
      msg.timestampField.seconds &&
      msg.timestampField.nanos
    ) {
      json["timestampField"] = protoscript.serializeTimestamp(
        msg.timestampField,
      );
    }
    if (msg.typeField) {
      const _typeField_ = protoscript.TypeJSON._writeMessage(msg.typeField);
      if (Object.keys(_typeField_).length > 0) {
        json["typeField"] = _typeField_;
      }
    }
    if (msg.doubleField) {
      const _doubleField_ = protoscript.DoubleValueJSON._writeMessage(
        msg.doubleField,
      );
      if (Object.keys(_doubleField_).length > 0) {
        json["doubleField"] = _doubleField_;
      }
    }
    if (msg.floatField) {
      const _floatField_ = protoscript.FloatValueJSON._writeMessage(
        msg.floatField,
      );
      if (Object.keys(_floatField_).length > 0) {
        json["floatField"] = _floatField_;
      }
    }
    if (msg.int64Field) {
      const _int64Field_ = protoscript.Int64ValueJSON._writeMessage(
        msg.int64Field,
      );
      if (Object.keys(_int64Field_).length > 0) {
        json["int64Field"] = _int64Field_;
      }
    }
    if (msg.uint64Field) {
      const _uint64Field_ = protoscript.UInt64ValueJSON._writeMessage(
        msg.uint64Field,
      );
      if (Object.keys(_uint64Field_).length > 0) {
        json["uint64Field"] = _uint64Field_;
      }
    }
    if (msg.int32Field) {
      const _int32Field_ = protoscript.Int32ValueJSON._writeMessage(
        msg.int32Field,
      );
      if (Object.keys(_int32Field_).length > 0) {
        json["int32Field"] = _int32Field_;
      }
    }
    if (msg.uint32Field) {
      const _uint32Field_ = protoscript.UInt32ValueJSON._writeMessage(
        msg.uint32Field,
      );
      if (Object.keys(_uint32Field_).length > 0) {
        json["uint32Field"] = _uint32Field_;
      }
    }
    if (msg.boolField) {
      const _boolField_ = protoscript.BoolValueJSON._writeMessage(
        msg.boolField,
      );
      if (Object.keys(_boolField_).length > 0) {
        json["boolField"] = _boolField_;
      }
    }
    if (msg.stringField) {
      const _stringField_ = protoscript.StringValueJSON._writeMessage(
        msg.stringField,
      );
      if (Object.keys(_stringField_).length > 0) {
        json["stringField"] = _stringField_;
      }
    }
    if (msg.bytesField) {
      const _bytesField_ = protoscript.BytesValueJSON._writeMessage(
        msg.bytesField,
      );
      if (Object.keys(_bytesField_).length > 0) {
        json["bytesField"] = _bytesField_;
      }
    }
    if (msg.valueField) {
      const _valueField_ = protoscript.ValueJSON._writeMessage(msg.valueField);
      if (Object.keys(_valueField_).length > 0) {
        json["valueField"] = _valueField_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: TestWellKnownTypes,
    json: any,
  ): TestWellKnownTypes {
    const _anyField_ = json["anyField"] ?? json["any_field"];
    if (_anyField_) {
      protoscript.AnyJSON._readMessage(msg.anyField, _anyField_);
    }
    const _apiField_ = json["apiField"] ?? json["api_field"];
    if (_apiField_) {
      protoscript.ApiJSON._readMessage(msg.apiField, _apiField_);
    }
    const _durationField_ = json["durationField"] ?? json["duration_field"];
    if (_durationField_) {
      msg.durationField = protoscript.parseDuration(_durationField_);
    }
    const _emptyField_ = json["emptyField"] ?? json["empty_field"];
    if (_emptyField_) {
      protoscript.EmptyJSON._readMessage(msg.emptyField, _emptyField_);
    }
    const _fieldMaskField_ = json["fieldMaskField"] ?? json["field_mask_field"];
    if (_fieldMaskField_) {
      protoscript.FieldMaskJSON._readMessage(
        msg.fieldMaskField,
        _fieldMaskField_,
      );
    }
    const _sourceContextField_ =
      json["sourceContextField"] ?? json["source_context_field"];
    if (_sourceContextField_) {
      protoscript.SourceContextJSON._readMessage(
        msg.sourceContextField,
        _sourceContextField_,
      );
    }
    const _structField_ = json["structField"] ?? json["struct_field"];
    if (_structField_) {
      protoscript.StructJSON._readMessage(msg.structField, _structField_);
    }
    const _timestampField_ = json["timestampField"] ?? json["timestamp_field"];
    if (_timestampField_) {
      msg.timestampField = protoscript.parseTimestamp(_timestampField_);
    }
    const _typeField_ = json["typeField"] ?? json["type_field"];
    if (_typeField_) {
      protoscript.TypeJSON._readMessage(msg.typeField, _typeField_);
    }
    const _doubleField_ = json["doubleField"] ?? json["double_field"];
    if (_doubleField_) {
      protoscript.DoubleValueJSON._readMessage(msg.doubleField, _doubleField_);
    }
    const _floatField_ = json["floatField"] ?? json["float_field"];
    if (_floatField_) {
      protoscript.FloatValueJSON._readMessage(msg.floatField, _floatField_);
    }
    const _int64Field_ = json["int64Field"] ?? json["int64_field"];
    if (_int64Field_) {
      protoscript.Int64ValueJSON._readMessage(msg.int64Field, _int64Field_);
    }
    const _uint64Field_ = json["uint64Field"] ?? json["uint64_field"];
    if (_uint64Field_) {
      protoscript.UInt64ValueJSON._readMessage(msg.uint64Field, _uint64Field_);
    }
    const _int32Field_ = json["int32Field"] ?? json["int32_field"];
    if (_int32Field_) {
      protoscript.Int32ValueJSON._readMessage(msg.int32Field, _int32Field_);
    }
    const _uint32Field_ = json["uint32Field"] ?? json["uint32_field"];
    if (_uint32Field_) {
      protoscript.UInt32ValueJSON._readMessage(msg.uint32Field, _uint32Field_);
    }
    const _boolField_ = json["boolField"] ?? json["bool_field"];
    if (_boolField_) {
      protoscript.BoolValueJSON._readMessage(msg.boolField, _boolField_);
    }
    const _stringField_ = json["stringField"] ?? json["string_field"];
    if (_stringField_) {
      protoscript.StringValueJSON._readMessage(msg.stringField, _stringField_);
    }
    const _bytesField_ = json["bytesField"] ?? json["bytes_field"];
    if (_bytesField_) {
      protoscript.BytesValueJSON._readMessage(msg.bytesField, _bytesField_);
    }
    const _valueField_ = json["valueField"] ?? json["value_field"];
    if (_valueField_) {
      protoscript.ValueJSON._readMessage(msg.valueField, _valueField_);
    }
    return msg;
  },
};

export const RepeatedWellKnownTypesJSON = {
  /**
   * Serializes RepeatedWellKnownTypes to JSON.
   */
  encode: function (msg: PartialDeep<RepeatedWellKnownTypes>): string {
    return JSON.stringify(RepeatedWellKnownTypesJSON._writeMessage(msg));
  },

  /**
   * Deserializes RepeatedWellKnownTypes from JSON.
   */
  decode: function (json: string): RepeatedWellKnownTypes {
    return RepeatedWellKnownTypesJSON._readMessage(
      RepeatedWellKnownTypesJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes RepeatedWellKnownTypes with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<RepeatedWellKnownTypes>,
  ): RepeatedWellKnownTypes {
    return {
      anyField: [],
      apiField: [],
      durationField: [],
      emptyField: [],
      fieldMaskField: [],
      sourceContextField: [],
      structField: [],
      timestampField: [],
      typeField: [],
      doubleField: [],
      floatField: [],
      int64Field: [],
      uint64Field: [],
      int32Field: [],
      uint32Field: [],
      boolField: [],
      stringField: [],
      bytesField: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<RepeatedWellKnownTypes>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.anyField?.length) {
      json["anyField"] = msg.anyField.map(protoscript.AnyJSON._writeMessage);
    }
    if (msg.apiField?.length) {
      json["apiField"] = msg.apiField.map(protoscript.ApiJSON._writeMessage);
    }
    if (msg.durationField?.length) {
      json["durationField"] = msg.durationField.map(
        protoscript.serializeDuration,
      );
    }
    if (msg.emptyField?.length) {
      json["emptyField"] = msg.emptyField.map(
        protoscript.EmptyJSON._writeMessage,
      );
    }
    if (msg.fieldMaskField?.length) {
      json["fieldMaskField"] = msg.fieldMaskField.map(
        protoscript.FieldMaskJSON._writeMessage,
      );
    }
    if (msg.sourceContextField?.length) {
      json["sourceContextField"] = msg.sourceContextField.map(
        protoscript.SourceContextJSON._writeMessage,
      );
    }
    if (msg.structField?.length) {
      json["structField"] = msg.structField.map(
        protoscript.StructJSON._writeMessage,
      );
    }
    if (msg.timestampField?.length) {
      json["timestampField"] = msg.timestampField.map(
        protoscript.serializeTimestamp,
      );
    }
    if (msg.typeField?.length) {
      json["typeField"] = msg.typeField.map(protoscript.TypeJSON._writeMessage);
    }
    if (msg.doubleField?.length) {
      json["doubleField"] = msg.doubleField.map(
        protoscript.DoubleValueJSON._writeMessage,
      );
    }
    if (msg.floatField?.length) {
      json["floatField"] = msg.floatField.map(
        protoscript.FloatValueJSON._writeMessage,
      );
    }
    if (msg.int64Field?.length) {
      json["int64Field"] = msg.int64Field.map(
        protoscript.Int64ValueJSON._writeMessage,
      );
    }
    if (msg.uint64Field?.length) {
      json["uint64Field"] = msg.uint64Field.map(
        protoscript.UInt64ValueJSON._writeMessage,
      );
    }
    if (msg.int32Field?.length) {
      json["int32Field"] = msg.int32Field.map(
        protoscript.Int32ValueJSON._writeMessage,
      );
    }
    if (msg.uint32Field?.length) {
      json["uint32Field"] = msg.uint32Field.map(
        protoscript.UInt32ValueJSON._writeMessage,
      );
    }
    if (msg.boolField?.length) {
      json["boolField"] = msg.boolField.map(
        protoscript.BoolValueJSON._writeMessage,
      );
    }
    if (msg.stringField?.length) {
      json["stringField"] = msg.stringField.map(
        protoscript.StringValueJSON._writeMessage,
      );
    }
    if (msg.bytesField?.length) {
      json["bytesField"] = msg.bytesField.map(
        protoscript.BytesValueJSON._writeMessage,
      );
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: RepeatedWellKnownTypes,
    json: any,
  ): RepeatedWellKnownTypes {
    const _anyField_ = json["anyField"] ?? json["any_field"];
    if (_anyField_) {
      for (const item of _anyField_) {
        const m = protoscript.AnyJSON.initialize();
        protoscript.AnyJSON._readMessage(m, item);
        msg.anyField.push(m);
      }
    }
    const _apiField_ = json["apiField"] ?? json["api_field"];
    if (_apiField_) {
      for (const item of _apiField_) {
        const m = protoscript.ApiJSON.initialize();
        protoscript.ApiJSON._readMessage(m, item);
        msg.apiField.push(m);
      }
    }
    const _durationField_ = json["durationField"] ?? json["duration_field"];
    if (_durationField_) {
      msg.durationField = _durationField_.map(protoscript.parseDuration);
    }
    const _emptyField_ = json["emptyField"] ?? json["empty_field"];
    if (_emptyField_) {
      for (const item of _emptyField_) {
        const m = protoscript.EmptyJSON.initialize();
        protoscript.EmptyJSON._readMessage(m, item);
        msg.emptyField.push(m);
      }
    }
    const _fieldMaskField_ = json["fieldMaskField"] ?? json["field_mask_field"];
    if (_fieldMaskField_) {
      for (const item of _fieldMaskField_) {
        const m = protoscript.FieldMaskJSON.initialize();
        protoscript.FieldMaskJSON._readMessage(m, item);
        msg.fieldMaskField.push(m);
      }
    }
    const _sourceContextField_ =
      json["sourceContextField"] ?? json["source_context_field"];
    if (_sourceContextField_) {
      for (const item of _sourceContextField_) {
        const m = protoscript.SourceContextJSON.initialize();
        protoscript.SourceContextJSON._readMessage(m, item);
        msg.sourceContextField.push(m);
      }
    }
    const _structField_ = json["structField"] ?? json["struct_field"];
    if (_structField_) {
      for (const item of _structField_) {
        const m = protoscript.StructJSON.initialize();
        protoscript.StructJSON._readMessage(m, item);
        msg.structField.push(m);
      }
    }
    const _timestampField_ = json["timestampField"] ?? json["timestamp_field"];
    if (_timestampField_) {
      msg.timestampField = _timestampField_.map(protoscript.parseTimestamp);
    }
    const _typeField_ = json["typeField"] ?? json["type_field"];
    if (_typeField_) {
      for (const item of _typeField_) {
        const m = protoscript.TypeJSON.initialize();
        protoscript.TypeJSON._readMessage(m, item);
        msg.typeField.push(m);
      }
    }
    const _doubleField_ = json["doubleField"] ?? json["double_field"];
    if (_doubleField_) {
      for (const item of _doubleField_) {
        const m = protoscript.DoubleValueJSON.initialize();
        protoscript.DoubleValueJSON._readMessage(m, item);
        msg.doubleField.push(m);
      }
    }
    const _floatField_ = json["floatField"] ?? json["float_field"];
    if (_floatField_) {
      for (const item of _floatField_) {
        const m = protoscript.FloatValueJSON.initialize();
        protoscript.FloatValueJSON._readMessage(m, item);
        msg.floatField.push(m);
      }
    }
    const _int64Field_ = json["int64Field"] ?? json["int64_field"];
    if (_int64Field_) {
      for (const item of _int64Field_) {
        const m = protoscript.Int64ValueJSON.initialize();
        protoscript.Int64ValueJSON._readMessage(m, item);
        msg.int64Field.push(m);
      }
    }
    const _uint64Field_ = json["uint64Field"] ?? json["uint64_field"];
    if (_uint64Field_) {
      for (const item of _uint64Field_) {
        const m = protoscript.UInt64ValueJSON.initialize();
        protoscript.UInt64ValueJSON._readMessage(m, item);
        msg.uint64Field.push(m);
      }
    }
    const _int32Field_ = json["int32Field"] ?? json["int32_field"];
    if (_int32Field_) {
      for (const item of _int32Field_) {
        const m = protoscript.Int32ValueJSON.initialize();
        protoscript.Int32ValueJSON._readMessage(m, item);
        msg.int32Field.push(m);
      }
    }
    const _uint32Field_ = json["uint32Field"] ?? json["uint32_field"];
    if (_uint32Field_) {
      for (const item of _uint32Field_) {
        const m = protoscript.UInt32ValueJSON.initialize();
        protoscript.UInt32ValueJSON._readMessage(m, item);
        msg.uint32Field.push(m);
      }
    }
    const _boolField_ = json["boolField"] ?? json["bool_field"];
    if (_boolField_) {
      for (const item of _boolField_) {
        const m = protoscript.BoolValueJSON.initialize();
        protoscript.BoolValueJSON._readMessage(m, item);
        msg.boolField.push(m);
      }
    }
    const _stringField_ = json["stringField"] ?? json["string_field"];
    if (_stringField_) {
      for (const item of _stringField_) {
        const m = protoscript.StringValueJSON.initialize();
        protoscript.StringValueJSON._readMessage(m, item);
        msg.stringField.push(m);
      }
    }
    const _bytesField_ = json["bytesField"] ?? json["bytes_field"];
    if (_bytesField_) {
      for (const item of _bytesField_) {
        const m = protoscript.BytesValueJSON.initialize();
        protoscript.BytesValueJSON._readMessage(m, item);
        msg.bytesField.push(m);
      }
    }
    return msg;
  },
};

export const OneofWellKnownTypesJSON = {
  /**
   * Serializes OneofWellKnownTypes to JSON.
   */
  encode: function (msg: PartialDeep<OneofWellKnownTypes>): string {
    return JSON.stringify(OneofWellKnownTypesJSON._writeMessage(msg));
  },

  /**
   * Deserializes OneofWellKnownTypes from JSON.
   */
  decode: function (json: string): OneofWellKnownTypes {
    return OneofWellKnownTypesJSON._readMessage(
      OneofWellKnownTypesJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes OneofWellKnownTypes with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<OneofWellKnownTypes>,
  ): OneofWellKnownTypes {
    return {
      anyField: undefined,
      apiField: undefined,
      durationField: undefined,
      emptyField: undefined,
      fieldMaskField: undefined,
      sourceContextField: undefined,
      structField: undefined,
      timestampField: undefined,
      typeField: undefined,
      doubleField: undefined,
      floatField: undefined,
      int64Field: undefined,
      uint64Field: undefined,
      int32Field: undefined,
      uint32Field: undefined,
      boolField: undefined,
      stringField: undefined,
      bytesField: undefined,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<OneofWellKnownTypes>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.anyField != undefined) {
      const _anyField_ = protoscript.AnyJSON._writeMessage(msg.anyField);
      json["anyField"] = _anyField_;
    }
    if (msg.apiField != undefined) {
      const _apiField_ = protoscript.ApiJSON._writeMessage(msg.apiField);
      json["apiField"] = _apiField_;
    }
    if (msg.durationField != undefined) {
      json["durationField"] = protoscript.serializeDuration(msg.durationField);
    }
    if (msg.emptyField != undefined) {
      const _emptyField_ = protoscript.EmptyJSON._writeMessage(msg.emptyField);
      json["emptyField"] = _emptyField_;
    }
    if (msg.fieldMaskField != undefined) {
      const _fieldMaskField_ = protoscript.FieldMaskJSON._writeMessage(
        msg.fieldMaskField,
      );
      json["fieldMaskField"] = _fieldMaskField_;
    }
    if (msg.sourceContextField != undefined) {
      const _sourceContextField_ = protoscript.SourceContextJSON._writeMessage(
        msg.sourceContextField,
      );
      json["sourceContextField"] = _sourceContextField_;
    }
    if (msg.structField != undefined) {
      const _structField_ = protoscript.StructJSON._writeMessage(
        msg.structField,
      );
      json["structField"] = _structField_;
    }
    if (msg.timestampField != undefined) {
      json["timestampField"] = protoscript.serializeTimestamp(
        msg.timestampField,
      );
    }
    if (msg.typeField != undefined) {
      const _typeField_ = protoscript.TypeJSON._writeMessage(msg.typeField);
      json["typeField"] = _typeField_;
    }
    if (msg.doubleField != undefined) {
      const _doubleField_ = protoscript.DoubleValueJSON._writeMessage(
        msg.doubleField,
      );
      json["doubleField"] = _doubleField_;
    }
    if (msg.floatField != undefined) {
      const _floatField_ = protoscript.FloatValueJSON._writeMessage(
        msg.floatField,
      );
      json["floatField"] = _floatField_;
    }
    if (msg.int64Field != undefined) {
      const _int64Field_ = protoscript.Int64ValueJSON._writeMessage(
        msg.int64Field,
      );
      json["int64Field"] = _int64Field_;
    }
    if (msg.uint64Field != undefined) {
      const _uint64Field_ = protoscript.UInt64ValueJSON._writeMessage(
        msg.uint64Field,
      );
      json["uint64Field"] = _uint64Field_;
    }
    if (msg.int32Field != undefined) {
      const _int32Field_ = protoscript.Int32ValueJSON._writeMessage(
        msg.int32Field,
      );
      json["int32Field"] = _int32Field_;
    }
    if (msg.uint32Field != undefined) {
      const _uint32Field_ = protoscript.UInt32ValueJSON._writeMessage(
        msg.uint32Field,
      );
      json["uint32Field"] = _uint32Field_;
    }
    if (msg.boolField != undefined) {
      const _boolField_ = protoscript.BoolValueJSON._writeMessage(
        msg.boolField,
      );
      json["boolField"] = _boolField_;
    }
    if (msg.stringField != undefined) {
      const _stringField_ = protoscript.StringValueJSON._writeMessage(
        msg.stringField,
      );
      json["stringField"] = _stringField_;
    }
    if (msg.bytesField != undefined) {
      const _bytesField_ = protoscript.BytesValueJSON._writeMessage(
        msg.bytesField,
      );
      json["bytesField"] = _bytesField_;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: OneofWellKnownTypes,
    json: any,
  ): OneofWellKnownTypes {
    const _anyField_ = json["anyField"] ?? json["any_field"];
    if (_anyField_) {
      msg.anyField = protoscript.AnyJSON.initialize();
      protoscript.AnyJSON._readMessage(msg.anyField, _anyField_);
    }
    const _apiField_ = json["apiField"] ?? json["api_field"];
    if (_apiField_) {
      msg.apiField = protoscript.ApiJSON.initialize();
      protoscript.ApiJSON._readMessage(msg.apiField, _apiField_);
    }
    const _durationField_ = json["durationField"] ?? json["duration_field"];
    if (_durationField_) {
      msg.durationField = protoscript.parseDuration(_durationField_);
    }
    const _emptyField_ = json["emptyField"] ?? json["empty_field"];
    if (_emptyField_) {
      msg.emptyField = protoscript.EmptyJSON.initialize();
      protoscript.EmptyJSON._readMessage(msg.emptyField, _emptyField_);
    }
    const _fieldMaskField_ = json["fieldMaskField"] ?? json["field_mask_field"];
    if (_fieldMaskField_) {
      msg.fieldMaskField = protoscript.FieldMaskJSON.initialize();
      protoscript.FieldMaskJSON._readMessage(
        msg.fieldMaskField,
        _fieldMaskField_,
      );
    }
    const _sourceContextField_ =
      json["sourceContextField"] ?? json["source_context_field"];
    if (_sourceContextField_) {
      msg.sourceContextField = protoscript.SourceContextJSON.initialize();
      protoscript.SourceContextJSON._readMessage(
        msg.sourceContextField,
        _sourceContextField_,
      );
    }
    const _structField_ = json["structField"] ?? json["struct_field"];
    if (_structField_) {
      msg.structField = protoscript.StructJSON.initialize();
      protoscript.StructJSON._readMessage(msg.structField, _structField_);
    }
    const _timestampField_ = json["timestampField"] ?? json["timestamp_field"];
    if (_timestampField_) {
      msg.timestampField = protoscript.parseTimestamp(_timestampField_);
    }
    const _typeField_ = json["typeField"] ?? json["type_field"];
    if (_typeField_) {
      msg.typeField = protoscript.TypeJSON.initialize();
      protoscript.TypeJSON._readMessage(msg.typeField, _typeField_);
    }
    const _doubleField_ = json["doubleField"] ?? json["double_field"];
    if (_doubleField_) {
      msg.doubleField = protoscript.DoubleValueJSON.initialize();
      protoscript.DoubleValueJSON._readMessage(msg.doubleField, _doubleField_);
    }
    const _floatField_ = json["floatField"] ?? json["float_field"];
    if (_floatField_) {
      msg.floatField = protoscript.FloatValueJSON.initialize();
      protoscript.FloatValueJSON._readMessage(msg.floatField, _floatField_);
    }
    const _int64Field_ = json["int64Field"] ?? json["int64_field"];
    if (_int64Field_) {
      msg.int64Field = protoscript.Int64ValueJSON.initialize();
      protoscript.Int64ValueJSON._readMessage(msg.int64Field, _int64Field_);
    }
    const _uint64Field_ = json["uint64Field"] ?? json["uint64_field"];
    if (_uint64Field_) {
      msg.uint64Field = protoscript.UInt64ValueJSON.initialize();
      protoscript.UInt64ValueJSON._readMessage(msg.uint64Field, _uint64Field_);
    }
    const _int32Field_ = json["int32Field"] ?? json["int32_field"];
    if (_int32Field_) {
      msg.int32Field = protoscript.Int32ValueJSON.initialize();
      protoscript.Int32ValueJSON._readMessage(msg.int32Field, _int32Field_);
    }
    const _uint32Field_ = json["uint32Field"] ?? json["uint32_field"];
    if (_uint32Field_) {
      msg.uint32Field = protoscript.UInt32ValueJSON.initialize();
      protoscript.UInt32ValueJSON._readMessage(msg.uint32Field, _uint32Field_);
    }
    const _boolField_ = json["boolField"] ?? json["bool_field"];
    if (_boolField_) {
      msg.boolField = protoscript.BoolValueJSON.initialize();
      protoscript.BoolValueJSON._readMessage(msg.boolField, _boolField_);
    }
    const _stringField_ = json["stringField"] ?? json["string_field"];
    if (_stringField_) {
      msg.stringField = protoscript.StringValueJSON.initialize();
      protoscript.StringValueJSON._readMessage(msg.stringField, _stringField_);
    }
    const _bytesField_ = json["bytesField"] ?? json["bytes_field"];
    if (_bytesField_) {
      msg.bytesField = protoscript.BytesValueJSON.initialize();
      protoscript.BytesValueJSON._readMessage(msg.bytesField, _bytesField_);
    }
    return msg;
  },
};

export const MapWellKnownTypesJSON = {
  /**
   * Serializes MapWellKnownTypes to JSON.
   */
  encode: function (msg: PartialDeep<MapWellKnownTypes>): string {
    return JSON.stringify(MapWellKnownTypesJSON._writeMessage(msg));
  },

  /**
   * Deserializes MapWellKnownTypes from JSON.
   */
  decode: function (json: string): MapWellKnownTypes {
    return MapWellKnownTypesJSON._readMessage(
      MapWellKnownTypesJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes MapWellKnownTypes with all fields set to their default value.
   */
  initialize: function (msg?: Partial<MapWellKnownTypes>): MapWellKnownTypes {
    return {
      anyField: {},
      apiField: {},
      durationField: {},
      emptyField: {},
      fieldMaskField: {},
      sourceContextField: {},
      structField: {},
      timestampField: {},
      typeField: {},
      doubleField: {},
      floatField: {},
      int64Field: {},
      uint64Field: {},
      int32Field: {},
      uint32Field: {},
      boolField: {},
      stringField: {},
      bytesField: {},
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<MapWellKnownTypes>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.anyField) {
      const _anyField_ = Object.fromEntries(
        Object.entries(msg.anyField)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MapWellKnownTypesJSON.AnyField._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_anyField_).length > 0) {
        json["anyField"] = _anyField_;
      }
    }
    if (msg.apiField) {
      const _apiField_ = Object.fromEntries(
        Object.entries(msg.apiField)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MapWellKnownTypesJSON.ApiField._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_apiField_).length > 0) {
        json["apiField"] = _apiField_;
      }
    }
    if (msg.durationField) {
      const _durationField_ = Object.fromEntries(
        Object.entries(msg.durationField)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MapWellKnownTypesJSON.DurationField._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_durationField_).length > 0) {
        json["durationField"] = _durationField_;
      }
    }
    if (msg.emptyField) {
      const _emptyField_ = Object.fromEntries(
        Object.entries(msg.emptyField)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MapWellKnownTypesJSON.EmptyField._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_emptyField_).length > 0) {
        json["emptyField"] = _emptyField_;
      }
    }
    if (msg.fieldMaskField) {
      const _fieldMaskField_ = Object.fromEntries(
        Object.entries(msg.fieldMaskField)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MapWellKnownTypesJSON.FieldMaskField._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_fieldMaskField_).length > 0) {
        json["fieldMaskField"] = _fieldMaskField_;
      }
    }
    if (msg.sourceContextField) {
      const _sourceContextField_ = Object.fromEntries(
        Object.entries(msg.sourceContextField)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MapWellKnownTypesJSON.SourceContextField._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_sourceContextField_).length > 0) {
        json["sourceContextField"] = _sourceContextField_;
      }
    }
    if (msg.structField) {
      const _structField_ = Object.fromEntries(
        Object.entries(msg.structField)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MapWellKnownTypesJSON.StructField._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_structField_).length > 0) {
        json["structField"] = _structField_;
      }
    }
    if (msg.timestampField) {
      const _timestampField_ = Object.fromEntries(
        Object.entries(msg.timestampField)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MapWellKnownTypesJSON.TimestampField._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_timestampField_).length > 0) {
        json["timestampField"] = _timestampField_;
      }
    }
    if (msg.typeField) {
      const _typeField_ = Object.fromEntries(
        Object.entries(msg.typeField)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MapWellKnownTypesJSON.TypeField._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_typeField_).length > 0) {
        json["typeField"] = _typeField_;
      }
    }
    if (msg.doubleField) {
      const _doubleField_ = Object.fromEntries(
        Object.entries(msg.doubleField)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MapWellKnownTypesJSON.DoubleField._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_doubleField_).length > 0) {
        json["doubleField"] = _doubleField_;
      }
    }
    if (msg.floatField) {
      const _floatField_ = Object.fromEntries(
        Object.entries(msg.floatField)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MapWellKnownTypesJSON.FloatField._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_floatField_).length > 0) {
        json["floatField"] = _floatField_;
      }
    }
    if (msg.int64Field) {
      const _int64Field_ = Object.fromEntries(
        Object.entries(msg.int64Field)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MapWellKnownTypesJSON.Int64Field._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_int64Field_).length > 0) {
        json["int64Field"] = _int64Field_;
      }
    }
    if (msg.uint64Field) {
      const _uint64Field_ = Object.fromEntries(
        Object.entries(msg.uint64Field)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MapWellKnownTypesJSON.Uint64Field._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_uint64Field_).length > 0) {
        json["uint64Field"] = _uint64Field_;
      }
    }
    if (msg.int32Field) {
      const _int32Field_ = Object.fromEntries(
        Object.entries(msg.int32Field)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MapWellKnownTypesJSON.Int32Field._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_int32Field_).length > 0) {
        json["int32Field"] = _int32Field_;
      }
    }
    if (msg.uint32Field) {
      const _uint32Field_ = Object.fromEntries(
        Object.entries(msg.uint32Field)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MapWellKnownTypesJSON.Uint32Field._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_uint32Field_).length > 0) {
        json["uint32Field"] = _uint32Field_;
      }
    }
    if (msg.boolField) {
      const _boolField_ = Object.fromEntries(
        Object.entries(msg.boolField)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MapWellKnownTypesJSON.BoolField._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_boolField_).length > 0) {
        json["boolField"] = _boolField_;
      }
    }
    if (msg.stringField) {
      const _stringField_ = Object.fromEntries(
        Object.entries(msg.stringField)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MapWellKnownTypesJSON.StringField._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_stringField_).length > 0) {
        json["stringField"] = _stringField_;
      }
    }
    if (msg.bytesField) {
      const _bytesField_ = Object.fromEntries(
        Object.entries(msg.bytesField)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MapWellKnownTypesJSON.BytesField._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_bytesField_).length > 0) {
        json["bytesField"] = _bytesField_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: MapWellKnownTypes,
    json: any,
  ): MapWellKnownTypes {
    const _anyField_ = json["anyField"] ?? json["any_field"];
    if (_anyField_) {
      msg.anyField = Object.fromEntries(
        Object.entries(_anyField_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MapWellKnownTypesJSON.AnyField._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _apiField_ = json["apiField"] ?? json["api_field"];
    if (_apiField_) {
      msg.apiField = Object.fromEntries(
        Object.entries(_apiField_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MapWellKnownTypesJSON.ApiField._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _durationField_ = json["durationField"] ?? json["duration_field"];
    if (_durationField_) {
      msg.durationField = Object.fromEntries(
        Object.entries(_durationField_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MapWellKnownTypesJSON.DurationField._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _emptyField_ = json["emptyField"] ?? json["empty_field"];
    if (_emptyField_) {
      msg.emptyField = Object.fromEntries(
        Object.entries(_emptyField_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MapWellKnownTypesJSON.EmptyField._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _fieldMaskField_ = json["fieldMaskField"] ?? json["field_mask_field"];
    if (_fieldMaskField_) {
      msg.fieldMaskField = Object.fromEntries(
        Object.entries(_fieldMaskField_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MapWellKnownTypesJSON.FieldMaskField._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _sourceContextField_ =
      json["sourceContextField"] ?? json["source_context_field"];
    if (_sourceContextField_) {
      msg.sourceContextField = Object.fromEntries(
        Object.entries(_sourceContextField_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MapWellKnownTypesJSON.SourceContextField._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _structField_ = json["structField"] ?? json["struct_field"];
    if (_structField_) {
      msg.structField = Object.fromEntries(
        Object.entries(_structField_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MapWellKnownTypesJSON.StructField._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _timestampField_ = json["timestampField"] ?? json["timestamp_field"];
    if (_timestampField_) {
      msg.timestampField = Object.fromEntries(
        Object.entries(_timestampField_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MapWellKnownTypesJSON.TimestampField._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _typeField_ = json["typeField"] ?? json["type_field"];
    if (_typeField_) {
      msg.typeField = Object.fromEntries(
        Object.entries(_typeField_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MapWellKnownTypesJSON.TypeField._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _doubleField_ = json["doubleField"] ?? json["double_field"];
    if (_doubleField_) {
      msg.doubleField = Object.fromEntries(
        Object.entries(_doubleField_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MapWellKnownTypesJSON.DoubleField._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _floatField_ = json["floatField"] ?? json["float_field"];
    if (_floatField_) {
      msg.floatField = Object.fromEntries(
        Object.entries(_floatField_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MapWellKnownTypesJSON.FloatField._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _int64Field_ = json["int64Field"] ?? json["int64_field"];
    if (_int64Field_) {
      msg.int64Field = Object.fromEntries(
        Object.entries(_int64Field_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MapWellKnownTypesJSON.Int64Field._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _uint64Field_ = json["uint64Field"] ?? json["uint64_field"];
    if (_uint64Field_) {
      msg.uint64Field = Object.fromEntries(
        Object.entries(_uint64Field_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MapWellKnownTypesJSON.Uint64Field._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _int32Field_ = json["int32Field"] ?? json["int32_field"];
    if (_int32Field_) {
      msg.int32Field = Object.fromEntries(
        Object.entries(_int32Field_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MapWellKnownTypesJSON.Int32Field._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _uint32Field_ = json["uint32Field"] ?? json["uint32_field"];
    if (_uint32Field_) {
      msg.uint32Field = Object.fromEntries(
        Object.entries(_uint32Field_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MapWellKnownTypesJSON.Uint32Field._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _boolField_ = json["boolField"] ?? json["bool_field"];
    if (_boolField_) {
      msg.boolField = Object.fromEntries(
        Object.entries(_boolField_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MapWellKnownTypesJSON.BoolField._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _stringField_ = json["stringField"] ?? json["string_field"];
    if (_stringField_) {
      msg.stringField = Object.fromEntries(
        Object.entries(_stringField_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MapWellKnownTypesJSON.StringField._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _bytesField_ = json["bytesField"] ?? json["bytes_field"];
    if (_bytesField_) {
      msg.bytesField = Object.fromEntries(
        Object.entries(_bytesField_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MapWellKnownTypesJSON.BytesField._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    return msg;
  },

  AnyField: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<MapWellKnownTypes.AnyField>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        const _value_ = protoscript.AnyJSON._writeMessage(msg.value);
        if (Object.keys(_value_).length > 0) {
          json["value"] = _value_;
        }
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: MapWellKnownTypes.AnyField,
      json: any,
    ): MapWellKnownTypes.AnyField {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = protoscript.parseNumber(_key_);
      }
      const _value_ = json["value"];
      if (_value_) {
        protoscript.AnyJSON._readMessage(msg.value, _value_);
      }
      return msg;
    },
  },

  ApiField: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<MapWellKnownTypes.ApiField>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        const _value_ = protoscript.ApiJSON._writeMessage(msg.value);
        if (Object.keys(_value_).length > 0) {
          json["value"] = _value_;
        }
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: MapWellKnownTypes.ApiField,
      json: any,
    ): MapWellKnownTypes.ApiField {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = protoscript.parseNumber(_key_);
      }
      const _value_ = json["value"];
      if (_value_) {
        protoscript.ApiJSON._readMessage(msg.value, _value_);
      }
      return msg;
    },
  },

  DurationField: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<MapWellKnownTypes.DurationField>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value && msg.value.seconds && msg.value.nanos) {
        json["value"] = protoscript.serializeDuration(msg.value);
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: MapWellKnownTypes.DurationField,
      json: any,
    ): MapWellKnownTypes.DurationField {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = protoscript.parseNumber(_key_);
      }
      const _value_ = json["value"];
      if (_value_) {
        msg.value = protoscript.parseDuration(_value_);
      }
      return msg;
    },
  },

  EmptyField: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<MapWellKnownTypes.EmptyField>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        const _value_ = protoscript.EmptyJSON._writeMessage(msg.value);
        if (Object.keys(_value_).length > 0) {
          json["value"] = _value_;
        }
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: MapWellKnownTypes.EmptyField,
      json: any,
    ): MapWellKnownTypes.EmptyField {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = protoscript.parseNumber(_key_);
      }
      const _value_ = json["value"];
      if (_value_) {
        protoscript.EmptyJSON._readMessage(msg.value, _value_);
      }
      return msg;
    },
  },

  FieldMaskField: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<MapWellKnownTypes.FieldMaskField>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        const _value_ = protoscript.FieldMaskJSON._writeMessage(msg.value);
        if (Object.keys(_value_).length > 0) {
          json["value"] = _value_;
        }
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: MapWellKnownTypes.FieldMaskField,
      json: any,
    ): MapWellKnownTypes.FieldMaskField {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = protoscript.parseNumber(_key_);
      }
      const _value_ = json["value"];
      if (_value_) {
        protoscript.FieldMaskJSON._readMessage(msg.value, _value_);
      }
      return msg;
    },
  },

  SourceContextField: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<MapWellKnownTypes.SourceContextField>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        const _value_ = protoscript.SourceContextJSON._writeMessage(msg.value);
        if (Object.keys(_value_).length > 0) {
          json["value"] = _value_;
        }
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: MapWellKnownTypes.SourceContextField,
      json: any,
    ): MapWellKnownTypes.SourceContextField {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = protoscript.parseNumber(_key_);
      }
      const _value_ = json["value"];
      if (_value_) {
        protoscript.SourceContextJSON._readMessage(msg.value, _value_);
      }
      return msg;
    },
  },

  StructField: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<MapWellKnownTypes.StructField>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        const _value_ = protoscript.StructJSON._writeMessage(msg.value);
        if (Object.keys(_value_).length > 0) {
          json["value"] = _value_;
        }
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: MapWellKnownTypes.StructField,
      json: any,
    ): MapWellKnownTypes.StructField {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = protoscript.parseNumber(_key_);
      }
      const _value_ = json["value"];
      if (_value_) {
        protoscript.StructJSON._readMessage(msg.value, _value_);
      }
      return msg;
    },
  },

  TimestampField: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<MapWellKnownTypes.TimestampField>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value && msg.value.seconds && msg.value.nanos) {
        json["value"] = protoscript.serializeTimestamp(msg.value);
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: MapWellKnownTypes.TimestampField,
      json: any,
    ): MapWellKnownTypes.TimestampField {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = protoscript.parseNumber(_key_);
      }
      const _value_ = json["value"];
      if (_value_) {
        msg.value = protoscript.parseTimestamp(_value_);
      }
      return msg;
    },
  },

  TypeField: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<MapWellKnownTypes.TypeField>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        const _value_ = protoscript.TypeJSON._writeMessage(msg.value);
        if (Object.keys(_value_).length > 0) {
          json["value"] = _value_;
        }
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: MapWellKnownTypes.TypeField,
      json: any,
    ): MapWellKnownTypes.TypeField {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = protoscript.parseNumber(_key_);
      }
      const _value_ = json["value"];
      if (_value_) {
        protoscript.TypeJSON._readMessage(msg.value, _value_);
      }
      return msg;
    },
  },

  DoubleField: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<MapWellKnownTypes.DoubleField>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        const _value_ = protoscript.DoubleValueJSON._writeMessage(msg.value);
        if (Object.keys(_value_).length > 0) {
          json["value"] = _value_;
        }
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: MapWellKnownTypes.DoubleField,
      json: any,
    ): MapWellKnownTypes.DoubleField {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = protoscript.parseNumber(_key_);
      }
      const _value_ = json["value"];
      if (_value_) {
        protoscript.DoubleValueJSON._readMessage(msg.value, _value_);
      }
      return msg;
    },
  },

  FloatField: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<MapWellKnownTypes.FloatField>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        const _value_ = protoscript.FloatValueJSON._writeMessage(msg.value);
        if (Object.keys(_value_).length > 0) {
          json["value"] = _value_;
        }
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: MapWellKnownTypes.FloatField,
      json: any,
    ): MapWellKnownTypes.FloatField {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = protoscript.parseNumber(_key_);
      }
      const _value_ = json["value"];
      if (_value_) {
        protoscript.FloatValueJSON._readMessage(msg.value, _value_);
      }
      return msg;
    },
  },

  Int64Field: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<MapWellKnownTypes.Int64Field>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        const _value_ = protoscript.Int64ValueJSON._writeMessage(msg.value);
        if (Object.keys(_value_).length > 0) {
          json["value"] = _value_;
        }
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: MapWellKnownTypes.Int64Field,
      json: any,
    ): MapWellKnownTypes.Int64Field {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = protoscript.parseNumber(_key_);
      }
      const _value_ = json["value"];
      if (_value_) {
        protoscript.Int64ValueJSON._readMessage(msg.value, _value_);
      }
      return msg;
    },
  },

  Uint64Field: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<MapWellKnownTypes.Uint64Field>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        const _value_ = protoscript.UInt64ValueJSON._writeMessage(msg.value);
        if (Object.keys(_value_).length > 0) {
          json["value"] = _value_;
        }
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: MapWellKnownTypes.Uint64Field,
      json: any,
    ): MapWellKnownTypes.Uint64Field {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = protoscript.parseNumber(_key_);
      }
      const _value_ = json["value"];
      if (_value_) {
        protoscript.UInt64ValueJSON._readMessage(msg.value, _value_);
      }
      return msg;
    },
  },

  Int32Field: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<MapWellKnownTypes.Int32Field>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        const _value_ = protoscript.Int32ValueJSON._writeMessage(msg.value);
        if (Object.keys(_value_).length > 0) {
          json["value"] = _value_;
        }
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: MapWellKnownTypes.Int32Field,
      json: any,
    ): MapWellKnownTypes.Int32Field {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = protoscript.parseNumber(_key_);
      }
      const _value_ = json["value"];
      if (_value_) {
        protoscript.Int32ValueJSON._readMessage(msg.value, _value_);
      }
      return msg;
    },
  },

  Uint32Field: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<MapWellKnownTypes.Uint32Field>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        const _value_ = protoscript.UInt32ValueJSON._writeMessage(msg.value);
        if (Object.keys(_value_).length > 0) {
          json["value"] = _value_;
        }
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: MapWellKnownTypes.Uint32Field,
      json: any,
    ): MapWellKnownTypes.Uint32Field {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = protoscript.parseNumber(_key_);
      }
      const _value_ = json["value"];
      if (_value_) {
        protoscript.UInt32ValueJSON._readMessage(msg.value, _value_);
      }
      return msg;
    },
  },

  BoolField: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<MapWellKnownTypes.BoolField>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        const _value_ = protoscript.BoolValueJSON._writeMessage(msg.value);
        if (Object.keys(_value_).length > 0) {
          json["value"] = _value_;
        }
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: MapWellKnownTypes.BoolField,
      json: any,
    ): MapWellKnownTypes.BoolField {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = protoscript.parseNumber(_key_);
      }
      const _value_ = json["value"];
      if (_value_) {
        protoscript.BoolValueJSON._readMessage(msg.value, _value_);
      }
      return msg;
    },
  },

  StringField: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<MapWellKnownTypes.StringField>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        const _value_ = protoscript.StringValueJSON._writeMessage(msg.value);
        if (Object.keys(_value_).length > 0) {
          json["value"] = _value_;
        }
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: MapWellKnownTypes.StringField,
      json: any,
    ): MapWellKnownTypes.StringField {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = protoscript.parseNumber(_key_);
      }
      const _value_ = json["value"];
      if (_value_) {
        protoscript.StringValueJSON._readMessage(msg.value, _value_);
      }
      return msg;
    },
  },

  BytesField: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<MapWellKnownTypes.BytesField>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        const _value_ = protoscript.BytesValueJSON._writeMessage(msg.value);
        if (Object.keys(_value_).length > 0) {
          json["value"] = _value_;
        }
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: MapWellKnownTypes.BytesField,
      json: any,
    ): MapWellKnownTypes.BytesField {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = protoscript.parseNumber(_key_);
      }
      const _value_ = json["value"];
      if (_value_) {
        protoscript.BytesValueJSON._readMessage(msg.value, _value_);
      }
      return msg;
    },
  },
};
