// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: src/protos/authentication.proto

import type { ByteSource, ClientConfiguration } from "twirpscript";
import {
  BinaryReader,
  BinaryWriter,
  JSONrequest,
  PBrequest,
} from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `yarn twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_48 } from "twirpscript";

//========================================//
//     Authentication Protobuf Client     //
//========================================//

/**
 * Login in a user
 */
export async function Login(
  credentials: Credentials,
  config?: ClientConfiguration
): Promise<CurrentUser> {
  const response = await PBrequest(
    "/Authentication/Login",
    Credentials.encode(credentials),
    config
  );
  return CurrentUser.decode(response);
}

//========================================//
//       Authentication JSON Client       //
//========================================//

/**
 * Login in a user
 */
export async function LoginJSON(
  credentials: Credentials,
  config?: ClientConfiguration
): Promise<CurrentUser> {
  const response = await JSONrequest<CurrentUser>(
    "/Authentication/Login",
    credentials,
    config
  );
  return response;
}

//========================================//
//             Authentication             //
//========================================//

export interface Authentication<Context = unknown> {
  /**
   * Login in a user
   */
  Login: (
    credentials: Credentials,
    context: Context
  ) => Promise<CurrentUser> | CurrentUser;
}

export function createAuthentication<Context>(
  service: Authentication<Context>
) {
  return {
    name: "Authentication",
    methods: {
      Login: {
        name: "Login",
        handler: service.Login,
        input: Credentials,
        output: CurrentUser,
      },
    },
  } as const;
}

//========================================//
//                 Types                  //
//========================================//

export interface CurrentUser {
  username: string;
  token: string;
}

export interface Credentials {
  username: string;
  password: string;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const CurrentUser = {
  /**
   * Serializes a CurrentUser to protobuf.
   */
  encode: function (currentUser: Partial<CurrentUser>): Uint8Array {
    return CurrentUser._writeMessage(
      currentUser,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes a CurrentUser from protobuf.
   */
  decode: function (bytes: ByteSource): CurrentUser {
    return CurrentUser._readMessage(
      CurrentUser.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Serializes a CurrentUser to JSON.
   */
  encodeJSON: function (currentUser: Partial<CurrentUser>): string {
    return JSON.stringify(CurrentUser._writeMessageJSON(currentUser));
  },

  /**
   * Deserializes a CurrentUser from JSON.
   */
  decodeJSON: function (json: string): CurrentUser {
    return CurrentUser._readMessageJSON(
      CurrentUser.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes a CurrentUser with all fields set to their default value.
   */
  initialize: function (): CurrentUser {
    return {
      username: "",
      token: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<CurrentUser>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.username) {
      writer.writeString(1, msg.username);
    }
    if (msg.token) {
      writer.writeString(2, msg.token);
    }
    return writer;
  },

  /**
   * @private
   */
  _writeMessageJSON: function (
    msg: Partial<CurrentUser>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.username) {
      json.username = msg.username;
    }
    if (msg.token) {
      json.token = msg.token;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: CurrentUser, reader: BinaryReader): CurrentUser {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.username = reader.readString();
          break;
        }
        case 2: {
          msg.token = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  /**
   * @private
   */
  _readMessageJSON: function (msg: CurrentUser, json: any): CurrentUser {
    const username = json.username ?? json.username;
    if (username) {
      msg.username = username;
    }
    const token = json.token ?? json.token;
    if (token) {
      msg.token = token;
    }
    return msg;
  },
};

export const Credentials = {
  /**
   * Serializes a Credentials to protobuf.
   */
  encode: function (credentials: Partial<Credentials>): Uint8Array {
    return Credentials._writeMessage(
      credentials,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes a Credentials from protobuf.
   */
  decode: function (bytes: ByteSource): Credentials {
    return Credentials._readMessage(
      Credentials.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Serializes a Credentials to JSON.
   */
  encodeJSON: function (credentials: Partial<Credentials>): string {
    return JSON.stringify(Credentials._writeMessageJSON(credentials));
  },

  /**
   * Deserializes a Credentials from JSON.
   */
  decodeJSON: function (json: string): Credentials {
    return Credentials._readMessageJSON(
      Credentials.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes a Credentials with all fields set to their default value.
   */
  initialize: function (): Credentials {
    return {
      username: "",
      password: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Credentials>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.username) {
      writer.writeString(1, msg.username);
    }
    if (msg.password) {
      writer.writeString(2, msg.password);
    }
    return writer;
  },

  /**
   * @private
   */
  _writeMessageJSON: function (
    msg: Partial<Credentials>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.username) {
      json.username = msg.username;
    }
    if (msg.password) {
      json.password = msg.password;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Credentials, reader: BinaryReader): Credentials {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.username = reader.readString();
          break;
        }
        case 2: {
          msg.password = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  /**
   * @private
   */
  _readMessageJSON: function (msg: Credentials, json: any): Credentials {
    const username = json.username ?? json.username;
    if (username) {
      msg.username = username;
    }
    const password = json.password ?? json.password;
    if (password) {
      msg.password = password;
    }
    return msg;
  },
};
