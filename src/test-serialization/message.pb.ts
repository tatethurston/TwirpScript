// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: message.proto

import type { ByteSource } from "../../src";
import { BinaryReader, BinaryWriter } from "../../src";

//========================================//
//                 Types                  //
//========================================//

export interface Foo {
  field_one: number;
  field_two: Record<string, number | undefined>;
  bar: Bar;
  field_four: number[];
}

export interface Bar {
  field_one: string;
  field_two: Record<string, number | undefined>;
  field_four: number[];
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const Foo = {
  writeMessage: function (msg: Partial<Foo>, writer: BinaryWriter): void {
    if (msg.field_one) {
      writer.writeInt32(1, msg.field_one);
    }
    if (msg.field_two) {
      for (const key in msg.field_two) {
        writer.writeMessage(2, {}, (_, mapWriter) => {
          mapWriter.writeString(1, key as any);
          mapWriter.writeInt32(2, msg.field_two![key]);
        });
      }
    }
    if (msg.bar) {
      writer.writeMessage(3, msg.bar, Bar.writeMessage);
    }
    if (msg.field_four?.length) {
      writer.writeRepeatedInt32(4, msg.field_four);
    }
  },

  encode: function (foo: Partial<Foo>): Uint8Array {
    const writer = new BinaryWriter();
    Foo.writeMessage(foo, writer);
    return writer.getResultBuffer();
  },

  readMessage: function (msg: Partial<Foo>, reader: BinaryReader): void {
    msg.field_two = {};
    msg.field_four = [];
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.field_one = reader.readInt32();
          break;
        }
        case 2: {
          reader.readMessage(undefined, () => {
            let key: string;
            let value: number;
            while (reader.nextField()) {
              const field = reader.getFieldNumber();
              switch (field) {
                case 1: {
                  key = reader.readString();
                  break;
                }
                case 2: {
                  value = reader.readInt32();
                  break;
                }
              }
            }
            msg.field_two![key!] = value!;
          });
          break;
        }
        case 3: {
          const message = {};
          reader.readMessage(message, Bar.readMessage);
          msg.bar = message as Bar;
          break;
        }
        case 4: {
          msg.field_four.push(reader.readInt32());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    if (!msg.field_one) {
      msg.field_one = 0;
    }
    if (!msg.bar) {
      msg.bar = Bar.defaultValue();
    }
  },

  decode: function (bytes: ByteSource): Foo {
    const reader = new BinaryReader(bytes);
    const message = {};
    Foo.readMessage(message, reader);
    return message as Foo;
  },

  defaultValue: function (): Foo {
    return {
      field_one: 0,
      field_two: {},
      bar: Bar.defaultValue(),
      field_four: [],
    };
  },
};

export const Bar = {
  writeMessage: function (msg: Partial<Bar>, writer: BinaryWriter): void {
    if (msg.field_one) {
      writer.writeString(1, msg.field_one);
    }
    if (msg.field_two) {
      for (const key in msg.field_two) {
        writer.writeMessage(2, {}, (_, mapWriter) => {
          mapWriter.writeString(1, key as any);
          mapWriter.writeInt32(2, msg.field_two![key]);
        });
      }
    }
    if (msg.field_four?.length) {
      writer.writeRepeatedInt32(3, msg.field_four);
    }
  },

  encode: function (bar: Partial<Bar>): Uint8Array {
    const writer = new BinaryWriter();
    Bar.writeMessage(bar, writer);
    return writer.getResultBuffer();
  },

  readMessage: function (msg: Partial<Bar>, reader: BinaryReader): void {
    msg.field_two = {};
    msg.field_four = [];
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.field_one = reader.readString();
          break;
        }
        case 2: {
          reader.readMessage(undefined, () => {
            let key: string;
            let value: number;
            while (reader.nextField()) {
              const field = reader.getFieldNumber();
              switch (field) {
                case 1: {
                  key = reader.readString();
                  break;
                }
                case 2: {
                  value = reader.readInt32();
                  break;
                }
              }
            }
            msg.field_two![key!] = value!;
          });
          break;
        }
        case 3: {
          msg.field_four.push(reader.readInt32());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    if (!msg.field_one) {
      msg.field_one = "";
    }
  },

  decode: function (bytes: ByteSource): Bar {
    const reader = new BinaryReader(bytes);
    const message = {};
    Bar.readMessage(message, reader);
    return message as Bar;
  },

  defaultValue: function (): Bar {
    return {
      field_one: "",
      field_two: {},
      field_four: [],
    };
  },
};
