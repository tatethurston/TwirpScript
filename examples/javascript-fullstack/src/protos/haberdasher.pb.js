// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: src/protos/haberdasher.proto
import {
  BinaryReader,
  BinaryWriter,
  JSONrequest,
  PBrequest,
  createMethodHandler,
} from "twirpscript";

//========================================//
//      Haberdasher Protobuf Client       //
//========================================//

/**
 * MakeHat produces a hat of mysterious, randomly-selected color!
 */
export async function MakeHat(size, config) {
  const response = await PBrequest(
    "/Haberdasher/MakeHat",
    Size.encode(size),
    config
  );
  return Hat.decode(response);
}

//========================================//
//        Haberdasher JSON Client         //
//========================================//

/**
 * MakeHat produces a hat of mysterious, randomly-selected color!
 */
export async function MakeHatJSON(size, config) {
  const response = await JSONrequest("/Haberdasher/MakeHat", size, config);
  return response;
}

export function createHaberdasherHandler(service) {
  return {
    path: "Haberdasher",
    methods: {
      MakeHat: createMethodHandler({
        handler: service.MakeHat,
        encode: Hat.encode,
        decode: Size.decode,
      }),
    },
  };
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const Size = {
  writeMessage: function (msg, writer) {
    if (msg.inches) {
      writer.writeInt32(1, msg.inches);
    }
  },

  encode: function (size) {
    const writer = new BinaryWriter();
    Size.writeMessage(size, writer);
    return writer.getResultBuffer();
  },

  readMessage: function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.inches = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    if (!msg.inches) {
      msg.inches = 0;
    }
  },

  decode: function (bytes) {
    const reader = new BinaryReader(bytes);
    const message = {};
    Size.readMessage(message, reader);
    return message;
  },

  defaultValue: function () {
    return {
      inches: 0,
    };
  },
};

export const Hat = {
  writeMessage: function (msg, writer) {
    if (msg.inches) {
      writer.writeInt32(1, msg.inches);
    }
    if (msg.color) {
      writer.writeString(2, msg.color);
    }
    if (msg.name) {
      writer.writeString(3, msg.name);
    }
  },

  encode: function (hat) {
    const writer = new BinaryWriter();
    Hat.writeMessage(hat, writer);
    return writer.getResultBuffer();
  },

  readMessage: function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.inches = reader.readInt32();
          break;
        }
        case 2: {
          msg.color = reader.readString();
          break;
        }
        case 3: {
          msg.name = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    if (!msg.inches) {
      msg.inches = 0;
    }
    if (!msg.color) {
      msg.color = "";
    }
    if (!msg.name) {
      msg.name = "";
    }
  },

  decode: function (bytes) {
    const reader = new BinaryReader(bytes);
    const message = {};
    Hat.readMessage(message, reader);
    return message;
  },

  defaultValue: function () {
    return {
      inches: 0,
      color: "",
      name: "",
    };
  },
};
