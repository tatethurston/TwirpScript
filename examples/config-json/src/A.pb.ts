// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: src/A.proto
/* eslint-disable */

import type { ByteSource } from "protoscript";
import { BinaryReader, BinaryWriter } from "protoscript";

//========================================//
//                 Types                  //
//========================================//

export interface Foo {
  baz: number;
  fooBars: string[];
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const Foo = {
  /**
   * Serializes Foo to protobuf.
   */
  encode: function (msg: Partial<Foo>): Uint8Array {
    return Foo._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes Foo from protobuf.
   */
  decode: function (bytes: ByteSource): Foo {
    return Foo._readMessage(Foo.initialize(), new BinaryReader(bytes));
  },

  /**
   * Initializes Foo with all fields set to their default value.
   */
  initialize: function (): Foo {
    return {
      baz: 0,
      fooBars: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Foo>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.baz) {
      writer.writeInt32(1, msg.baz);
    }
    if (msg.fooBars?.length) {
      writer.writeRepeatedString(2, msg.fooBars);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Foo, reader: BinaryReader): Foo {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.baz = reader.readInt32();
          break;
        }
        case 2: {
          msg.fooBars.push(reader.readString());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const FooJSON = {
  /**
   * Serializes Foo to JSON.
   */
  encode: function (msg: Partial<Foo>): string {
    return JSON.stringify(FooJSON._writeMessage(msg));
  },

  /**
   * Deserializes Foo from JSON.
   */
  decode: function (json: string): Foo {
    return FooJSON._readMessage(FooJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Foo with all fields set to their default value.
   */
  initialize: function (): Foo {
    return {
      baz: 0,
      fooBars: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<Foo>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    json["baz"] = msg.baz;
    json["foo_bars"] = msg.fooBars;
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Foo, json: any): Foo {
    const _baz = json["baz"];
    if (_baz) {
      msg.baz = _baz;
    }
    const _fooBars = json["fooBars"] ?? json["foo_bars"];
    if (_fooBars) {
      msg.fooBars = _fooBars;
    }
    return msg;
  },
};
