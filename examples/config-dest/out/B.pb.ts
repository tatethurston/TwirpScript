// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: B.proto

import type { ByteSource } from "twirpscript";
import { BinaryReader, BinaryWriter } from "twirpscript";

import { Foo } from "./A.pb";

//========================================//
//                 Types                  //
//========================================//

export interface Bar {
  foo: Foo;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const Bar = {
  /**
   * Serializes a Bar to protobuf.
   */
  encode: function (bar: Partial<Bar>): Uint8Array {
    return Bar._writeMessage(bar, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes a Bar from protobuf.
   */
  decode: function (bytes: ByteSource): Bar {
    return Bar._readMessage(Bar.initialize(), new BinaryReader(bytes));
  },

  /**
   * Serializes a Bar to JSON.
   */
  encodeJSON: function (bar: Partial<Bar>): string {
    return JSON.stringify(Bar._writeMessageJSON(bar));
  },

  /**
   * Deserializes a Bar from JSON.
   */
  decodeJSON: function (json: string): Bar {
    return Bar._readMessageJSON(Bar.initialize(), JSON.parse(json));
  },

  /**
   * Initializes a Bar with all fields set to their default value.
   */
  initialize: function (): Bar {
    return {
      foo: Foo.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Bar>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.foo) {
      writer.writeMessage(1, msg.foo, Foo._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _writeMessageJSON: function (msg: Partial<Bar>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.foo) {
      const foo = Foo._writeMessageJSON(msg.foo);
      if (Object.keys(foo).length > 0) {
        json.foo = foo;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Bar, reader: BinaryReader): Bar {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.foo, Foo._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  /**
   * @private
   */
  _readMessageJSON: function (msg: Bar, json: any): Bar {
    const foo = json.foo ?? json.foo;
    if (foo) {
      const m = Foo.initialize();
      Foo._readMessageJSON(m, foo);
      msg.foo = m;
    }
    return msg;
  },
};
