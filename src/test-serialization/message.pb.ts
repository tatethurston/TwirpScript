// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: message.proto

import type { ByteSource, MapMessage } from "../../src";
import { BinaryReader, BinaryWriter } from "../../src";

//========================================//
//                 Types                  //
//========================================//

export type Baz = typeof Baz[keyof typeof Baz];

export interface Foo {
  fieldOne?: number | null | undefined;
  fieldTwo: Foo.FieldTwo;
  fieldThree: Bar[];
  fieldFour: Foo.FooBar;
  fieldFive: bigint[];
  fieldSix: Baz;
  fieldSeven: Baz[];
  fieldEight: bigint;
}

declare namespace Foo {
  export interface FooBar {
    fieldOne: string;
    fieldTwo: Foo.FooBar.FieldTwo;
    fieldThree: number[];
  }

  namespace FooBar {
    export type FieldTwo = Record<string, bigint | undefined>;
  }

  export type FieldTwo = Record<string, Bar | undefined>;
}

export interface Bar {
  fieldOne: string;
  fieldTwo: Bar.FieldTwo;
  fieldThree: number[];
}

declare namespace Bar {
  export type FieldTwo = Record<string, bigint | undefined>;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const Baz = { FOO: 0, BAR: 1 } as const;

export const Foo = {
  /**
   * Serializes a Foo to protobuf.
   */
  encode: function (foo: Partial<Foo>): Uint8Array {
    return Foo._writeMessage(foo, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes a Foo from protobuf.
   */
  decode: function (bytes: ByteSource): Foo {
    return Foo._readMessage(Foo.initialize(), new BinaryReader(bytes));
  },

  /**
   * Serializes a Foo to JSON.
   */
  encodeJSON: function (foo: Partial<Foo>): string {
    return JSON.stringify(Foo._writeMessageJSON(foo));
  },

  /**
   * Deserializes a Foo from JSON.
   */
  decodeJSON: function (json: string): Foo {
    return Foo._readMessageJSON(Foo.initialize(), JSON.parse(json));
  },

  /**
   * Initializes a Foo with all fields set to their default value.
   */
  initialize: function (): Foo {
    return {
      fieldTwo: {},
      fieldThree: [],
      fieldFour: Foo.FooBar.initialize(),
      fieldFive: [],
      fieldSix: 0,
      fieldSeven: [],
      fieldEight: 0n,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Foo>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.fieldOne != undefined) {
      writer.writeInt32(1, msg.fieldOne);
    }
    if (msg.fieldTwo) {
      writer.writeRepeatedMessage(
        2,
        Object.entries<any>(msg.fieldTwo).map(([key, value]) => ({
          key: key,
          value: value,
        })) as any,
        Foo.FieldTwo._writeMessage
      );
    }
    if (msg.fieldThree?.length) {
      writer.writeRepeatedMessage(3, msg.fieldThree as any, Bar._writeMessage);
    }
    if (msg.fieldFour) {
      writer.writeMessage(4, msg.fieldFour, Foo.FooBar._writeMessage);
    }
    if (msg.fieldFive?.length) {
      writer.writeRepeatedInt64String(
        5,
        msg.fieldFive.map((x) => x.toString())
      );
    }
    if (msg.fieldSix) {
      writer.writeEnum(6, msg.fieldSix);
    }
    if (msg.fieldSeven?.length) {
      writer.writeRepeatedEnum(7, msg.fieldSeven);
    }
    if (msg.fieldEight) {
      writer.writeInt64String(8, msg.fieldEight.toString());
    }
    return writer;
  },

  /**
   * @private
   */
  _writeMessageJSON: function (msg: Partial<Foo>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.fieldOne != undefined) {
      json.fieldOne = msg.fieldOne;
    }
    if (msg.fieldTwo) {
      const fieldTwo = Object.fromEntries(
        Object.entries<any>(msg.fieldTwo)
          .map(([key, value]) => ({ key: key, value: value }))
          .map(Foo.FieldTwo._writeMessageJSON)
          .map(({ key, value }) => [key, value])
      );
      if (Object.keys(fieldTwo).length > 0) {
        json.fieldTwo = fieldTwo;
      }
    }
    if (msg.fieldThree?.length) {
      json.fieldThree = msg.fieldThree.map(Bar._writeMessageJSON);
    }
    if (msg.fieldFour) {
      const fieldFour = Foo.FooBar._writeMessageJSON(msg.fieldFour);
      if (Object.keys(fieldFour).length > 0) {
        json.fieldFour = fieldFour;
      }
    }
    if (msg.fieldFive?.length) {
      json.fieldFive = msg.fieldFive.map((x) => x.toString());
    }
    if (msg.fieldSix) {
      json.fieldSix = msg.fieldSix;
    }
    if (msg.fieldSeven?.length) {
      json["luckySeven"] = msg.fieldSeven;
    }
    if (msg.fieldEight) {
      json.fieldEight = msg.fieldEight.toString();
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Foo, reader: BinaryReader): Foo {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.fieldOne = reader.readInt32();
          break;
        }
        case 2: {
          const fieldTwo = {} as MapMessage<Foo.FieldTwo>;
          reader.readMessage(fieldTwo, Foo.FieldTwo._readMessage);
          msg.fieldTwo[fieldTwo.key] = fieldTwo.value;
          break;
        }
        case 3: {
          const m = Bar.initialize();
          reader.readMessage(m, Bar._readMessage);
          msg.fieldThree.push(m);
          break;
        }
        case 4: {
          reader.readMessage(msg.fieldFour, Foo.FooBar._readMessage);
          break;
        }
        case 5: {
          msg.fieldFive.push(BigInt(reader.readInt64String()));
          break;
        }
        case 6: {
          msg.fieldSix = reader.readEnum() as Baz;
          break;
        }
        case 7: {
          msg.fieldSeven.push(reader.readEnum() as Baz);
          break;
        }
        case 8: {
          msg.fieldEight = BigInt(reader.readInt64String());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  /**
   * @private
   */
  _readMessageJSON: function (msg: Foo, json: any): Foo {
    const fieldOne = json.fieldOne ?? json.field_one;
    if (fieldOne) {
      msg.fieldOne = fieldOne;
    }
    const fieldTwo = json.fieldTwo ?? json.field_two;
    if (fieldTwo) {
      msg.fieldTwo = Object.fromEntries(
        Object.entries<any>(fieldTwo)
          .map(([key, value]) => ({ key: key, value: value }))
          .map(Foo.FieldTwo._readMessageJSON)
          .map(({ key, value }) => [key, value])
      );
    }
    const fieldThree = json.fieldThree ?? json.field_three;
    if (fieldThree) {
      for (const item of fieldThree) {
        const m = Bar.initialize();
        Bar._readMessageJSON(m, item);
        msg.fieldThree.push(m);
      }
    }
    const fieldFour = json.fieldFour ?? json.field_four;
    if (fieldFour) {
      const m = Foo.FooBar.initialize();
      Foo.FooBar._readMessageJSON(m, fieldFour);
      msg.fieldFour = m;
    }
    const fieldFive = json.fieldFive ?? json.field_five;
    if (fieldFive) {
      msg.fieldFive = fieldFive.map(BigInt);
    }
    const fieldSix = json.fieldSix ?? json.field_six;
    if (fieldSix) {
      msg.fieldSix = fieldSix;
    }
    const fieldSeven = json["luckySeven"] ?? json.field_seven;
    if (fieldSeven) {
      msg.fieldSeven = fieldSeven;
    }
    const fieldEight = json.fieldEight ?? json.field_eight;
    if (fieldEight) {
      msg.fieldEight = BigInt(fieldEight);
    }
    return msg;
  },

  FooBar: {
    /**
     * Serializes a Foo.FooBar to protobuf.
     */
    encode: function (fooBar: Partial<Foo.FooBar>): Uint8Array {
      return Foo.FooBar._writeMessage(
        fooBar,
        new BinaryWriter()
      ).getResultBuffer();
    },

    /**
     * Deserializes a Foo.FooBar from protobuf.
     */
    decode: function (bytes: ByteSource): Foo.FooBar {
      return Foo.FooBar._readMessage(
        Foo.FooBar.initialize(),
        new BinaryReader(bytes)
      );
    },

    /**
     * Serializes a Foo.FooBar to JSON.
     */
    encodeJSON: function (fooBar: Partial<Foo.FooBar>): string {
      return JSON.stringify(Foo.FooBar._writeMessageJSON(fooBar));
    },

    /**
     * Deserializes a Foo.FooBar from JSON.
     */
    decodeJSON: function (json: string): Foo.FooBar {
      return Foo.FooBar._readMessageJSON(
        Foo.FooBar.initialize(),
        JSON.parse(json)
      );
    },

    /**
     * Initializes a Foo.FooBar with all fields set to their default value.
     */
    initialize: function (): Foo.FooBar {
      return {
        fieldOne: "",
        fieldTwo: {},
        fieldThree: [],
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<Foo.FooBar>,
      writer: BinaryWriter
    ): BinaryWriter {
      if (msg.fieldOne) {
        writer.writeString(1, msg.fieldOne);
      }
      if (msg.fieldTwo) {
        writer.writeRepeatedMessage(
          2,
          Object.entries<any>(msg.fieldTwo).map(([key, value]) => ({
            key: key,
            value: value,
          })) as any,
          Foo.FooBar.FieldTwo._writeMessage
        );
      }
      if (msg.fieldThree?.length) {
        writer.writeRepeatedInt32(3, msg.fieldThree);
      }
      return writer;
    },

    /**
     * @private
     */
    _writeMessageJSON: function (
      msg: Partial<Foo.FooBar>
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.fieldOne) {
        json.fieldOne = msg.fieldOne;
      }
      if (msg.fieldTwo) {
        const fieldTwo = Object.fromEntries(
          Object.entries<any>(msg.fieldTwo)
            .map(([key, value]) => ({ key: key, value: value }))
            .map(Foo.FooBar.FieldTwo._writeMessageJSON)
            .map(({ key, value }) => [key, value])
        );
        if (Object.keys(fieldTwo).length > 0) {
          json.fieldTwo = fieldTwo;
        }
      }
      if (msg.fieldThree?.length) {
        json.fieldThree = msg.fieldThree;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (msg: Foo.FooBar, reader: BinaryReader): Foo.FooBar {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.fieldOne = reader.readString();
            break;
          }
          case 2: {
            const fieldTwo = {} as MapMessage<Foo.FooBar.FieldTwo>;
            reader.readMessage(fieldTwo, Foo.FooBar.FieldTwo._readMessage);
            msg.fieldTwo[fieldTwo.key] = fieldTwo.value;
            break;
          }
          case 3: {
            msg.fieldThree.push(reader.readInt32());
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },

    /**
     * @private
     */
    _readMessageJSON: function (msg: Foo.FooBar, json: any): Foo.FooBar {
      const fieldOne = json.fieldOne ?? json.field_one;
      if (fieldOne) {
        msg.fieldOne = fieldOne;
      }
      const fieldTwo = json.fieldTwo ?? json.field_two;
      if (fieldTwo) {
        msg.fieldTwo = Object.fromEntries(
          Object.entries<any>(fieldTwo)
            .map(([key, value]) => ({ key: key, value: value }))
            .map(Foo.FooBar.FieldTwo._readMessageJSON)
            .map(({ key, value }) => [key, value])
        );
      }
      const fieldThree = json.fieldThree ?? json.field_three;
      if (fieldThree) {
        msg.fieldThree = fieldThree;
      }
      return msg;
    },

    FieldTwo: {
      /**
       * @private
       */
      _writeMessage: function (
        msg: MapMessage<Foo.FooBar.FieldTwo>,
        writer: BinaryWriter
      ): BinaryWriter {
        if (msg.key) {
          writer.writeString(1, msg.key);
        }
        if (msg.value) {
          writer.writeInt64String(2, msg.value.toString());
        }
        return writer;
      },

      /**
       * @private
       */
      _writeMessageJSON: function (
        msg: MapMessage<Foo.FooBar.FieldTwo>
      ): Record<string, unknown> {
        const json: Record<string, unknown> = {};
        if (msg.key) {
          json.key = msg.key;
        }
        if (msg.value) {
          json.value = msg.value.toString();
        }
        return json;
      },

      /**
       * @private
       */
      _readMessage: function (
        msg: MapMessage<Foo.FooBar.FieldTwo>,
        reader: BinaryReader
      ): MapMessage<Foo.FooBar.FieldTwo> {
        while (reader.nextField()) {
          const field = reader.getFieldNumber();
          switch (field) {
            case 1: {
              msg.key = reader.readString();
              break;
            }
            case 2: {
              msg.value = BigInt(reader.readInt64String());
              break;
            }
            default: {
              reader.skipField();
              break;
            }
          }
        }
        return msg;
      },

      /**
       * @private
       */
      _readMessageJSON: function (
        msg: MapMessage<Foo.FooBar.FieldTwo>,
        json: any
      ): MapMessage<Foo.FooBar.FieldTwo> {
        const key = json.key ?? json.key;
        if (key) {
          msg.key = key;
        }
        const value = json.value ?? json.value;
        if (value) {
          msg.value = BigInt(value);
        }
        return msg;
      },
    },
  },

  FieldTwo: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: MapMessage<Foo.FieldTwo>,
      writer: BinaryWriter
    ): BinaryWriter {
      if (msg.key) {
        writer.writeString(1, msg.key);
      }
      if (msg.value) {
        writer.writeMessage(2, msg.value, Bar._writeMessage);
      }
      return writer;
    },

    /**
     * @private
     */
    _writeMessageJSON: function (
      msg: MapMessage<Foo.FieldTwo>
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json.key = msg.key;
      }
      if (msg.value) {
        const value = Bar._writeMessageJSON(msg.value);
        if (Object.keys(value).length > 0) {
          json.value = value;
        }
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: MapMessage<Foo.FieldTwo>,
      reader: BinaryReader
    ): MapMessage<Foo.FieldTwo> {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readString();
            break;
          }
          case 2: {
            reader.readMessage(Bar.initialize(), Bar._readMessage);
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },

    /**
     * @private
     */
    _readMessageJSON: function (
      msg: MapMessage<Foo.FieldTwo>,
      json: any
    ): MapMessage<Foo.FieldTwo> {
      const key = json.key ?? json.key;
      if (key) {
        msg.key = key;
      }
      const value = json.value ?? json.value;
      if (value) {
        const m = Bar.initialize();
        Bar._readMessageJSON(m, value);
        msg.value = m;
      }
      return msg;
    },
  },
};

export const Bar = {
  /**
   * Serializes a Bar to protobuf.
   */
  encode: function (bar: Partial<Bar>): Uint8Array {
    return Bar._writeMessage(bar, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes a Bar from protobuf.
   */
  decode: function (bytes: ByteSource): Bar {
    return Bar._readMessage(Bar.initialize(), new BinaryReader(bytes));
  },

  /**
   * Serializes a Bar to JSON.
   */
  encodeJSON: function (bar: Partial<Bar>): string {
    return JSON.stringify(Bar._writeMessageJSON(bar));
  },

  /**
   * Deserializes a Bar from JSON.
   */
  decodeJSON: function (json: string): Bar {
    return Bar._readMessageJSON(Bar.initialize(), JSON.parse(json));
  },

  /**
   * Initializes a Bar with all fields set to their default value.
   */
  initialize: function (): Bar {
    return {
      fieldOne: "",
      fieldTwo: {},
      fieldThree: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Bar>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.fieldOne) {
      writer.writeString(1, msg.fieldOne);
    }
    if (msg.fieldTwo) {
      writer.writeRepeatedMessage(
        2,
        Object.entries<any>(msg.fieldTwo).map(([key, value]) => ({
          key: key,
          value: value,
        })) as any,
        Bar.FieldTwo._writeMessage
      );
    }
    if (msg.fieldThree?.length) {
      writer.writeRepeatedInt32(3, msg.fieldThree);
    }
    return writer;
  },

  /**
   * @private
   */
  _writeMessageJSON: function (msg: Partial<Bar>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.fieldOne) {
      json.fieldOne = msg.fieldOne;
    }
    if (msg.fieldTwo) {
      const fieldTwo = Object.fromEntries(
        Object.entries<any>(msg.fieldTwo)
          .map(([key, value]) => ({ key: key, value: value }))
          .map(Bar.FieldTwo._writeMessageJSON)
          .map(({ key, value }) => [key, value])
      );
      if (Object.keys(fieldTwo).length > 0) {
        json.fieldTwo = fieldTwo;
      }
    }
    if (msg.fieldThree?.length) {
      json.fieldThree = msg.fieldThree;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Bar, reader: BinaryReader): Bar {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.fieldOne = reader.readString();
          break;
        }
        case 2: {
          const fieldTwo = {} as MapMessage<Bar.FieldTwo>;
          reader.readMessage(fieldTwo, Bar.FieldTwo._readMessage);
          msg.fieldTwo[fieldTwo.key] = fieldTwo.value;
          break;
        }
        case 3: {
          msg.fieldThree.push(reader.readInt32());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  /**
   * @private
   */
  _readMessageJSON: function (msg: Bar, json: any): Bar {
    const fieldOne = json.fieldOne ?? json.field_one;
    if (fieldOne) {
      msg.fieldOne = fieldOne;
    }
    const fieldTwo = json.fieldTwo ?? json.field_two;
    if (fieldTwo) {
      msg.fieldTwo = Object.fromEntries(
        Object.entries<any>(fieldTwo)
          .map(([key, value]) => ({ key: key, value: value }))
          .map(Bar.FieldTwo._readMessageJSON)
          .map(({ key, value }) => [key, value])
      );
    }
    const fieldThree = json.fieldThree ?? json.field_three;
    if (fieldThree) {
      msg.fieldThree = fieldThree;
    }
    return msg;
  },

  FieldTwo: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: MapMessage<Bar.FieldTwo>,
      writer: BinaryWriter
    ): BinaryWriter {
      if (msg.key) {
        writer.writeString(1, msg.key);
      }
      if (msg.value) {
        writer.writeInt64String(2, msg.value.toString());
      }
      return writer;
    },

    /**
     * @private
     */
    _writeMessageJSON: function (
      msg: MapMessage<Bar.FieldTwo>
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json.key = msg.key;
      }
      if (msg.value) {
        json.value = msg.value.toString();
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: MapMessage<Bar.FieldTwo>,
      reader: BinaryReader
    ): MapMessage<Bar.FieldTwo> {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readString();
            break;
          }
          case 2: {
            msg.value = BigInt(reader.readInt64String());
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },

    /**
     * @private
     */
    _readMessageJSON: function (
      msg: MapMessage<Bar.FieldTwo>,
      json: any
    ): MapMessage<Bar.FieldTwo> {
      const key = json.key ?? json.key;
      if (key) {
        msg.key = key;
      }
      const value = json.value ?? json.value;
      if (value) {
        msg.value = BigInt(value);
      }
      return msg;
    },
  },
};
