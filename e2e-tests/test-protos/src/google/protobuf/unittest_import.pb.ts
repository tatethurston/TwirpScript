// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: google/protobuf/unittest_import.proto
import type { ByteSource } from "twirpscript";
import { BinaryReader, BinaryWriter } from "twirpscript";

//========================================//
//                 Types                  //
//========================================//

export type ImportEnum = typeof ImportEnum[keyof typeof ImportEnum];

/**
 * To use an enum in a map, it must has the first value as 0.
 */
export type ImportEnumForMap =
  typeof ImportEnumForMap[keyof typeof ImportEnumForMap];

export interface ImportMessage {
  d: number;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const ImportEnum = {
  IMPORT_FOO: 7,
  IMPORT_BAR: 8,
  IMPORT_BAZ: 9,
} as const;

export const ImportEnumForMap = { UNKNOWN: 0, FOO: 1, BAR: 2 } as const;

export const ImportMessage = {
  writeMessage: function (msg: ImportMessage, writer: BinaryWriter): void {
    if (msg.d) {
      writer.writeInt32(1, msg.d);
    }
  },

  encode: function (importMessage: ImportMessage): Uint8Array {
    const writer = new BinaryWriter();
    ImportMessage.writeMessage(importMessage, writer);
    return writer.getResultBuffer();
  },

  readMessage: function (
    msg: Partial<ImportMessage>,
    reader: BinaryReader
  ): void {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.d = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    if (!msg.d) {
      msg.d = 0;
    }
  },

  decode: function (bytes: ByteSource): ImportMessage {
    const reader = new BinaryReader(bytes);
    const message = {};
    ImportMessage.readMessage(message, reader);
    return message as ImportMessage;
  },

  defaultValue: function (): ImportMessage {
    return {
      d: 0,
    };
  },
};
