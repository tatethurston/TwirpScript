// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: google/protobuf/map_unittest.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import {
  BinaryReader,
  BinaryWriter,
  encodeBase64Bytes,
  decodeBase64Bytes,
} from "protoscript";

import * as googleProtobufUnittest from "./unittest.pb";

//========================================//
//                 Types                  //
//========================================//

export type MapEnum = "MAP_ENUM_FOO" | "MAP_ENUM_BAR" | "MAP_ENUM_BAZ";

/**
 * Tests maps.
 */
export interface TestMap {
  mapInt32Int32: Record<string, TestMap.MapInt32Int32["value"] | undefined>;
  mapInt64Int64: Record<string, TestMap.MapInt64Int64["value"] | undefined>;
  mapUint32Uint32: Record<string, TestMap.MapUint32Uint32["value"] | undefined>;
  mapUint64Uint64: Record<string, TestMap.MapUint64Uint64["value"] | undefined>;
  mapSint32Sint32: Record<string, TestMap.MapSint32Sint32["value"] | undefined>;
  mapSint64Sint64: Record<string, TestMap.MapSint64Sint64["value"] | undefined>;
  mapFixed32Fixed32: Record<
    string,
    TestMap.MapFixed32Fixed32["value"] | undefined
  >;
  mapFixed64Fixed64: Record<
    string,
    TestMap.MapFixed64Fixed64["value"] | undefined
  >;
  mapSfixed32Sfixed32: Record<
    string,
    TestMap.MapSfixed32Sfixed32["value"] | undefined
  >;
  mapSfixed64Sfixed64: Record<
    string,
    TestMap.MapSfixed64Sfixed64["value"] | undefined
  >;
  mapInt32Float: Record<string, TestMap.MapInt32Float["value"] | undefined>;
  mapInt32Double: Record<string, TestMap.MapInt32Double["value"] | undefined>;
  mapBoolBool: Record<string, TestMap.MapBoolBool["value"] | undefined>;
  mapStringString: Record<string, TestMap.MapStringString["value"] | undefined>;
  mapInt32Bytes: Record<string, TestMap.MapInt32Bytes["value"] | undefined>;
  mapInt32Enum: Record<string, TestMap.MapInt32Enum["value"] | undefined>;
  mapInt32ForeignMessage: Record<
    string,
    TestMap.MapInt32ForeignMessage["value"] | undefined
  >;
  mapStringForeignMessage: Record<
    string,
    TestMap.MapStringForeignMessage["value"] | undefined
  >;
  mapInt32AllTypes: Record<
    string,
    TestMap.MapInt32AllTypes["value"] | undefined
  >;
}

export declare namespace TestMap {
  interface MapInt32Int32 {
    key: number;
    value: number;
  }

  interface MapInt64Int64 {
    key: bigint;
    value: bigint;
  }

  interface MapUint32Uint32 {
    key: number;
    value: number;
  }

  interface MapUint64Uint64 {
    key: bigint;
    value: bigint;
  }

  interface MapSint32Sint32 {
    key: number;
    value: number;
  }

  interface MapSint64Sint64 {
    key: bigint;
    value: bigint;
  }

  interface MapFixed32Fixed32 {
    key: number;
    value: number;
  }

  interface MapFixed64Fixed64 {
    key: bigint;
    value: bigint;
  }

  interface MapSfixed32Sfixed32 {
    key: number;
    value: number;
  }

  interface MapSfixed64Sfixed64 {
    key: bigint;
    value: bigint;
  }

  interface MapInt32Float {
    key: number;
    value: number;
  }

  interface MapInt32Double {
    key: number;
    value: number;
  }

  interface MapBoolBool {
    key: boolean;
    value: boolean;
  }

  interface MapStringString {
    key: string;
    value: string;
  }

  interface MapInt32Bytes {
    key: number;
    value: Uint8Array;
  }

  interface MapInt32Enum {
    key: number;
    value: MapEnum;
  }

  interface MapInt32ForeignMessage {
    key: number;
    value: googleProtobufUnittest.ForeignMessage;
  }

  interface MapStringForeignMessage {
    key: string;
    value: googleProtobufUnittest.ForeignMessage;
  }

  interface MapInt32AllTypes {
    key: number;
    value: googleProtobufUnittest.TestAllTypes;
  }
}

export interface TestMapSubmessage {
  testMap: TestMap;
}

export interface TestMessageMap {
  mapInt32Message: Record<
    string,
    TestMessageMap.MapInt32Message["value"] | undefined
  >;
}

export declare namespace TestMessageMap {
  interface MapInt32Message {
    key: number;
    value: googleProtobufUnittest.TestAllTypes;
  }
}

/**
 * Two map fields share the same entry default instance.
 */
export interface TestSameTypeMap {
  map1: Record<string, TestSameTypeMap.Map1["value"] | undefined>;
  map2: Record<string, TestSameTypeMap.Map2["value"] | undefined>;
}

export declare namespace TestSameTypeMap {
  interface Map1 {
    key: number;
    value: number;
  }

  interface Map2 {
    key: number;
    value: number;
  }
}

/**
 * Test embedded message with required fields
 */
export interface TestRequiredMessageMap {
  mapField: Record<
    string,
    TestRequiredMessageMap.MapField["value"] | undefined
  >;
}

export declare namespace TestRequiredMessageMap {
  interface MapField {
    key: number;
    value: googleProtobufUnittest.TestRequired;
  }
}

export interface TestArenaMap {
  mapInt32Int32: Record<
    string,
    TestArenaMap.MapInt32Int32["value"] | undefined
  >;
  mapInt64Int64: Record<
    string,
    TestArenaMap.MapInt64Int64["value"] | undefined
  >;
  mapUint32Uint32: Record<
    string,
    TestArenaMap.MapUint32Uint32["value"] | undefined
  >;
  mapUint64Uint64: Record<
    string,
    TestArenaMap.MapUint64Uint64["value"] | undefined
  >;
  mapSint32Sint32: Record<
    string,
    TestArenaMap.MapSint32Sint32["value"] | undefined
  >;
  mapSint64Sint64: Record<
    string,
    TestArenaMap.MapSint64Sint64["value"] | undefined
  >;
  mapFixed32Fixed32: Record<
    string,
    TestArenaMap.MapFixed32Fixed32["value"] | undefined
  >;
  mapFixed64Fixed64: Record<
    string,
    TestArenaMap.MapFixed64Fixed64["value"] | undefined
  >;
  mapSfixed32Sfixed32: Record<
    string,
    TestArenaMap.MapSfixed32Sfixed32["value"] | undefined
  >;
  mapSfixed64Sfixed64: Record<
    string,
    TestArenaMap.MapSfixed64Sfixed64["value"] | undefined
  >;
  mapInt32Float: Record<
    string,
    TestArenaMap.MapInt32Float["value"] | undefined
  >;
  mapInt32Double: Record<
    string,
    TestArenaMap.MapInt32Double["value"] | undefined
  >;
  mapBoolBool: Record<string, TestArenaMap.MapBoolBool["value"] | undefined>;
  mapStringString: Record<
    string,
    TestArenaMap.MapStringString["value"] | undefined
  >;
  mapInt32Bytes: Record<
    string,
    TestArenaMap.MapInt32Bytes["value"] | undefined
  >;
  mapInt32Enum: Record<string, TestArenaMap.MapInt32Enum["value"] | undefined>;
  mapInt32ForeignMessage: Record<
    string,
    TestArenaMap.MapInt32ForeignMessage["value"] | undefined
  >;
}

export declare namespace TestArenaMap {
  interface MapInt32Int32 {
    key: number;
    value: number;
  }

  interface MapInt64Int64 {
    key: bigint;
    value: bigint;
  }

  interface MapUint32Uint32 {
    key: number;
    value: number;
  }

  interface MapUint64Uint64 {
    key: bigint;
    value: bigint;
  }

  interface MapSint32Sint32 {
    key: number;
    value: number;
  }

  interface MapSint64Sint64 {
    key: bigint;
    value: bigint;
  }

  interface MapFixed32Fixed32 {
    key: number;
    value: number;
  }

  interface MapFixed64Fixed64 {
    key: bigint;
    value: bigint;
  }

  interface MapSfixed32Sfixed32 {
    key: number;
    value: number;
  }

  interface MapSfixed64Sfixed64 {
    key: bigint;
    value: bigint;
  }

  interface MapInt32Float {
    key: number;
    value: number;
  }

  interface MapInt32Double {
    key: number;
    value: number;
  }

  interface MapBoolBool {
    key: boolean;
    value: boolean;
  }

  interface MapStringString {
    key: string;
    value: string;
  }

  interface MapInt32Bytes {
    key: number;
    value: Uint8Array;
  }

  interface MapInt32Enum {
    key: number;
    value: MapEnum;
  }

  interface MapInt32ForeignMessage {
    key: number;
    value: googleProtobufUnittest.ForeignMessage;
  }
}

/**
 * Previously, message cannot contain map field called "entry".
 */
export interface MessageContainingMapCalledEntry {
  entry: Record<
    string,
    MessageContainingMapCalledEntry.Entry["value"] | undefined
  >;
}

export declare namespace MessageContainingMapCalledEntry {
  interface Entry {
    key: number;
    value: number;
  }
}

export interface TestRecursiveMapMessage {
  a: Record<string, TestRecursiveMapMessage.A["value"] | undefined>;
}

export declare namespace TestRecursiveMapMessage {
  interface A {
    key: string;
    value: TestRecursiveMapMessage | null | undefined;
  }
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const MapEnum = {
  MAP_ENUM_FOO: "MAP_ENUM_FOO",
  MAP_ENUM_BAR: "MAP_ENUM_BAR",
  MAP_ENUM_BAZ: "MAP_ENUM_BAZ",
  /**
   * @private
   */
  _fromInt: function (i: number): MapEnum {
    switch (i) {
      case 0: {
        return "MAP_ENUM_FOO";
      }
      case 1: {
        return "MAP_ENUM_BAR";
      }
      case 2: {
        return "MAP_ENUM_BAZ";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as MapEnum;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i: MapEnum): number {
    switch (i) {
      case "MAP_ENUM_FOO": {
        return 0;
      }
      case "MAP_ENUM_BAR": {
        return 1;
      }
      case "MAP_ENUM_BAZ": {
        return 2;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as number;
      }
    }
  },
} as const;

export const TestMap = {
  /**
   * Serializes TestMap to protobuf.
   */
  encode: function (msg: PartialDeep<TestMap>): Uint8Array {
    return TestMap._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes TestMap from protobuf.
   */
  decode: function (bytes: ByteSource): TestMap {
    return TestMap._readMessage(TestMap.initialize(), new BinaryReader(bytes));
  },

  /**
   * Initializes TestMap with all fields set to their default value.
   */
  initialize: function (): TestMap {
    return {
      mapInt32Int32: {},
      mapInt64Int64: {},
      mapUint32Uint32: {},
      mapUint64Uint64: {},
      mapSint32Sint32: {},
      mapSint64Sint64: {},
      mapFixed32Fixed32: {},
      mapFixed64Fixed64: {},
      mapSfixed32Sfixed32: {},
      mapSfixed64Sfixed64: {},
      mapInt32Float: {},
      mapInt32Double: {},
      mapBoolBool: {},
      mapStringString: {},
      mapInt32Bytes: {},
      mapInt32Enum: {},
      mapInt32ForeignMessage: {},
      mapStringForeignMessage: {},
      mapInt32AllTypes: {},
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<TestMap>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.mapInt32Int32) {
      writer.writeRepeatedMessage(
        1,
        Object.entries(msg.mapInt32Int32).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        TestMap.MapInt32Int32._writeMessage,
      );
    }
    if (msg.mapInt64Int64) {
      writer.writeRepeatedMessage(
        2,
        Object.entries(msg.mapInt64Int64).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        TestMap.MapInt64Int64._writeMessage,
      );
    }
    if (msg.mapUint32Uint32) {
      writer.writeRepeatedMessage(
        3,
        Object.entries(msg.mapUint32Uint32).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        TestMap.MapUint32Uint32._writeMessage,
      );
    }
    if (msg.mapUint64Uint64) {
      writer.writeRepeatedMessage(
        4,
        Object.entries(msg.mapUint64Uint64).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        TestMap.MapUint64Uint64._writeMessage,
      );
    }
    if (msg.mapSint32Sint32) {
      writer.writeRepeatedMessage(
        5,
        Object.entries(msg.mapSint32Sint32).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        TestMap.MapSint32Sint32._writeMessage,
      );
    }
    if (msg.mapSint64Sint64) {
      writer.writeRepeatedMessage(
        6,
        Object.entries(msg.mapSint64Sint64).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        TestMap.MapSint64Sint64._writeMessage,
      );
    }
    if (msg.mapFixed32Fixed32) {
      writer.writeRepeatedMessage(
        7,
        Object.entries(msg.mapFixed32Fixed32).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        TestMap.MapFixed32Fixed32._writeMessage,
      );
    }
    if (msg.mapFixed64Fixed64) {
      writer.writeRepeatedMessage(
        8,
        Object.entries(msg.mapFixed64Fixed64).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        TestMap.MapFixed64Fixed64._writeMessage,
      );
    }
    if (msg.mapSfixed32Sfixed32) {
      writer.writeRepeatedMessage(
        9,
        Object.entries(msg.mapSfixed32Sfixed32).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        TestMap.MapSfixed32Sfixed32._writeMessage,
      );
    }
    if (msg.mapSfixed64Sfixed64) {
      writer.writeRepeatedMessage(
        10,
        Object.entries(msg.mapSfixed64Sfixed64).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        TestMap.MapSfixed64Sfixed64._writeMessage,
      );
    }
    if (msg.mapInt32Float) {
      writer.writeRepeatedMessage(
        11,
        Object.entries(msg.mapInt32Float).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        TestMap.MapInt32Float._writeMessage,
      );
    }
    if (msg.mapInt32Double) {
      writer.writeRepeatedMessage(
        12,
        Object.entries(msg.mapInt32Double).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        TestMap.MapInt32Double._writeMessage,
      );
    }
    if (msg.mapBoolBool) {
      writer.writeRepeatedMessage(
        13,
        Object.entries(msg.mapBoolBool).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        TestMap.MapBoolBool._writeMessage,
      );
    }
    if (msg.mapStringString) {
      writer.writeRepeatedMessage(
        14,
        Object.entries(msg.mapStringString).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        TestMap.MapStringString._writeMessage,
      );
    }
    if (msg.mapInt32Bytes) {
      writer.writeRepeatedMessage(
        15,
        Object.entries(msg.mapInt32Bytes).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        TestMap.MapInt32Bytes._writeMessage,
      );
    }
    if (msg.mapInt32Enum) {
      writer.writeRepeatedMessage(
        16,
        Object.entries(msg.mapInt32Enum).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        TestMap.MapInt32Enum._writeMessage,
      );
    }
    if (msg.mapInt32ForeignMessage) {
      writer.writeRepeatedMessage(
        17,
        Object.entries(msg.mapInt32ForeignMessage).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        TestMap.MapInt32ForeignMessage._writeMessage,
      );
    }
    if (msg.mapStringForeignMessage) {
      writer.writeRepeatedMessage(
        18,
        Object.entries(msg.mapStringForeignMessage).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        TestMap.MapStringForeignMessage._writeMessage,
      );
    }
    if (msg.mapInt32AllTypes) {
      writer.writeRepeatedMessage(
        19,
        Object.entries(msg.mapInt32AllTypes).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        TestMap.MapInt32AllTypes._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: TestMap, reader: BinaryReader): TestMap {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const map = {} as TestMap.MapInt32Int32;
          reader.readMessage(map, TestMap.MapInt32Int32._readMessage);
          msg.mapInt32Int32[map.key.toString()] = map.value;
          break;
        }
        case 2: {
          const map = {} as TestMap.MapInt64Int64;
          reader.readMessage(map, TestMap.MapInt64Int64._readMessage);
          msg.mapInt64Int64[map.key.toString()] = map.value;
          break;
        }
        case 3: {
          const map = {} as TestMap.MapUint32Uint32;
          reader.readMessage(map, TestMap.MapUint32Uint32._readMessage);
          msg.mapUint32Uint32[map.key.toString()] = map.value;
          break;
        }
        case 4: {
          const map = {} as TestMap.MapUint64Uint64;
          reader.readMessage(map, TestMap.MapUint64Uint64._readMessage);
          msg.mapUint64Uint64[map.key.toString()] = map.value;
          break;
        }
        case 5: {
          const map = {} as TestMap.MapSint32Sint32;
          reader.readMessage(map, TestMap.MapSint32Sint32._readMessage);
          msg.mapSint32Sint32[map.key.toString()] = map.value;
          break;
        }
        case 6: {
          const map = {} as TestMap.MapSint64Sint64;
          reader.readMessage(map, TestMap.MapSint64Sint64._readMessage);
          msg.mapSint64Sint64[map.key.toString()] = map.value;
          break;
        }
        case 7: {
          const map = {} as TestMap.MapFixed32Fixed32;
          reader.readMessage(map, TestMap.MapFixed32Fixed32._readMessage);
          msg.mapFixed32Fixed32[map.key.toString()] = map.value;
          break;
        }
        case 8: {
          const map = {} as TestMap.MapFixed64Fixed64;
          reader.readMessage(map, TestMap.MapFixed64Fixed64._readMessage);
          msg.mapFixed64Fixed64[map.key.toString()] = map.value;
          break;
        }
        case 9: {
          const map = {} as TestMap.MapSfixed32Sfixed32;
          reader.readMessage(map, TestMap.MapSfixed32Sfixed32._readMessage);
          msg.mapSfixed32Sfixed32[map.key.toString()] = map.value;
          break;
        }
        case 10: {
          const map = {} as TestMap.MapSfixed64Sfixed64;
          reader.readMessage(map, TestMap.MapSfixed64Sfixed64._readMessage);
          msg.mapSfixed64Sfixed64[map.key.toString()] = map.value;
          break;
        }
        case 11: {
          const map = {} as TestMap.MapInt32Float;
          reader.readMessage(map, TestMap.MapInt32Float._readMessage);
          msg.mapInt32Float[map.key.toString()] = map.value;
          break;
        }
        case 12: {
          const map = {} as TestMap.MapInt32Double;
          reader.readMessage(map, TestMap.MapInt32Double._readMessage);
          msg.mapInt32Double[map.key.toString()] = map.value;
          break;
        }
        case 13: {
          const map = {} as TestMap.MapBoolBool;
          reader.readMessage(map, TestMap.MapBoolBool._readMessage);
          msg.mapBoolBool[map.key.toString()] = map.value;
          break;
        }
        case 14: {
          const map = {} as TestMap.MapStringString;
          reader.readMessage(map, TestMap.MapStringString._readMessage);
          msg.mapStringString[map.key.toString()] = map.value;
          break;
        }
        case 15: {
          const map = {} as TestMap.MapInt32Bytes;
          reader.readMessage(map, TestMap.MapInt32Bytes._readMessage);
          msg.mapInt32Bytes[map.key.toString()] = map.value;
          break;
        }
        case 16: {
          const map = {} as TestMap.MapInt32Enum;
          reader.readMessage(map, TestMap.MapInt32Enum._readMessage);
          msg.mapInt32Enum[map.key.toString()] = map.value;
          break;
        }
        case 17: {
          const map = {} as TestMap.MapInt32ForeignMessage;
          reader.readMessage(map, TestMap.MapInt32ForeignMessage._readMessage);
          msg.mapInt32ForeignMessage[map.key.toString()] = map.value;
          break;
        }
        case 18: {
          const map = {} as TestMap.MapStringForeignMessage;
          reader.readMessage(map, TestMap.MapStringForeignMessage._readMessage);
          msg.mapStringForeignMessage[map.key.toString()] = map.value;
          break;
        }
        case 19: {
          const map = {} as TestMap.MapInt32AllTypes;
          reader.readMessage(map, TestMap.MapInt32AllTypes._readMessage);
          msg.mapInt32AllTypes[map.key.toString()] = map.value;
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  MapInt32Int32: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestMap.MapInt32Int32>,
      writer: BinaryWriter,
    ): BinaryWriter {
      if (msg.key) {
        writer.writeInt32(1, msg.key);
      }
      if (msg.value) {
        writer.writeInt32(2, msg.value);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestMap.MapInt32Int32,
      reader: BinaryReader,
    ): TestMap.MapInt32Int32 {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readInt32();
            break;
          }
          case 2: {
            msg.value = reader.readInt32();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  MapInt64Int64: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestMap.MapInt64Int64>,
      writer: BinaryWriter,
    ): BinaryWriter {
      if (msg.key) {
        writer.writeInt64String(1, msg.key.toString() as any);
      }
      if (msg.value) {
        writer.writeInt64String(2, msg.value.toString() as any);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestMap.MapInt64Int64,
      reader: BinaryReader,
    ): TestMap.MapInt64Int64 {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = BigInt(reader.readInt64String());
            break;
          }
          case 2: {
            msg.value = BigInt(reader.readInt64String());
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  MapUint32Uint32: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestMap.MapUint32Uint32>,
      writer: BinaryWriter,
    ): BinaryWriter {
      if (msg.key) {
        writer.writeUint32(1, msg.key);
      }
      if (msg.value) {
        writer.writeUint32(2, msg.value);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestMap.MapUint32Uint32,
      reader: BinaryReader,
    ): TestMap.MapUint32Uint32 {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readUint32();
            break;
          }
          case 2: {
            msg.value = reader.readUint32();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  MapUint64Uint64: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestMap.MapUint64Uint64>,
      writer: BinaryWriter,
    ): BinaryWriter {
      if (msg.key) {
        writer.writeUint64String(1, msg.key.toString() as any);
      }
      if (msg.value) {
        writer.writeUint64String(2, msg.value.toString() as any);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestMap.MapUint64Uint64,
      reader: BinaryReader,
    ): TestMap.MapUint64Uint64 {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = BigInt(reader.readUint64String());
            break;
          }
          case 2: {
            msg.value = BigInt(reader.readUint64String());
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  MapSint32Sint32: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestMap.MapSint32Sint32>,
      writer: BinaryWriter,
    ): BinaryWriter {
      if (msg.key) {
        writer.writeSint32(1, msg.key);
      }
      if (msg.value) {
        writer.writeSint32(2, msg.value);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestMap.MapSint32Sint32,
      reader: BinaryReader,
    ): TestMap.MapSint32Sint32 {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readSint32();
            break;
          }
          case 2: {
            msg.value = reader.readSint32();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  MapSint64Sint64: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestMap.MapSint64Sint64>,
      writer: BinaryWriter,
    ): BinaryWriter {
      if (msg.key) {
        writer.writeSint64String(1, msg.key.toString() as any);
      }
      if (msg.value) {
        writer.writeSint64String(2, msg.value.toString() as any);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestMap.MapSint64Sint64,
      reader: BinaryReader,
    ): TestMap.MapSint64Sint64 {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = BigInt(reader.readSint64String());
            break;
          }
          case 2: {
            msg.value = BigInt(reader.readSint64String());
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  MapFixed32Fixed32: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestMap.MapFixed32Fixed32>,
      writer: BinaryWriter,
    ): BinaryWriter {
      if (msg.key) {
        writer.writeFixed32(1, msg.key);
      }
      if (msg.value) {
        writer.writeFixed32(2, msg.value);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestMap.MapFixed32Fixed32,
      reader: BinaryReader,
    ): TestMap.MapFixed32Fixed32 {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readFixed32();
            break;
          }
          case 2: {
            msg.value = reader.readFixed32();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  MapFixed64Fixed64: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestMap.MapFixed64Fixed64>,
      writer: BinaryWriter,
    ): BinaryWriter {
      if (msg.key) {
        writer.writeFixed64String(1, msg.key.toString() as any);
      }
      if (msg.value) {
        writer.writeFixed64String(2, msg.value.toString() as any);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestMap.MapFixed64Fixed64,
      reader: BinaryReader,
    ): TestMap.MapFixed64Fixed64 {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = BigInt(reader.readFixed64String());
            break;
          }
          case 2: {
            msg.value = BigInt(reader.readFixed64String());
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  MapSfixed32Sfixed32: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestMap.MapSfixed32Sfixed32>,
      writer: BinaryWriter,
    ): BinaryWriter {
      if (msg.key) {
        writer.writeSfixed32(1, msg.key);
      }
      if (msg.value) {
        writer.writeSfixed32(2, msg.value);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestMap.MapSfixed32Sfixed32,
      reader: BinaryReader,
    ): TestMap.MapSfixed32Sfixed32 {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readSfixed32();
            break;
          }
          case 2: {
            msg.value = reader.readSfixed32();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  MapSfixed64Sfixed64: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestMap.MapSfixed64Sfixed64>,
      writer: BinaryWriter,
    ): BinaryWriter {
      if (msg.key) {
        writer.writeSfixed64String(1, msg.key.toString() as any);
      }
      if (msg.value) {
        writer.writeSfixed64String(2, msg.value.toString() as any);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestMap.MapSfixed64Sfixed64,
      reader: BinaryReader,
    ): TestMap.MapSfixed64Sfixed64 {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = BigInt(reader.readSfixed64String());
            break;
          }
          case 2: {
            msg.value = BigInt(reader.readSfixed64String());
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  MapInt32Float: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestMap.MapInt32Float>,
      writer: BinaryWriter,
    ): BinaryWriter {
      if (msg.key) {
        writer.writeInt32(1, msg.key);
      }
      if (msg.value) {
        writer.writeFloat(2, msg.value);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestMap.MapInt32Float,
      reader: BinaryReader,
    ): TestMap.MapInt32Float {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readInt32();
            break;
          }
          case 2: {
            msg.value = reader.readFloat();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  MapInt32Double: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestMap.MapInt32Double>,
      writer: BinaryWriter,
    ): BinaryWriter {
      if (msg.key) {
        writer.writeInt32(1, msg.key);
      }
      if (msg.value) {
        writer.writeDouble(2, msg.value);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestMap.MapInt32Double,
      reader: BinaryReader,
    ): TestMap.MapInt32Double {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readInt32();
            break;
          }
          case 2: {
            msg.value = reader.readDouble();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  MapBoolBool: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestMap.MapBoolBool>,
      writer: BinaryWriter,
    ): BinaryWriter {
      if (msg.key) {
        writer.writeBool(1, msg.key);
      }
      if (msg.value) {
        writer.writeBool(2, msg.value);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestMap.MapBoolBool,
      reader: BinaryReader,
    ): TestMap.MapBoolBool {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readBool();
            break;
          }
          case 2: {
            msg.value = reader.readBool();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  MapStringString: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestMap.MapStringString>,
      writer: BinaryWriter,
    ): BinaryWriter {
      if (msg.key) {
        writer.writeString(1, msg.key);
      }
      if (msg.value) {
        writer.writeString(2, msg.value);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestMap.MapStringString,
      reader: BinaryReader,
    ): TestMap.MapStringString {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readString();
            break;
          }
          case 2: {
            msg.value = reader.readString();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  MapInt32Bytes: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestMap.MapInt32Bytes>,
      writer: BinaryWriter,
    ): BinaryWriter {
      if (msg.key) {
        writer.writeInt32(1, msg.key);
      }
      if (msg.value?.length) {
        writer.writeBytes(2, msg.value);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestMap.MapInt32Bytes,
      reader: BinaryReader,
    ): TestMap.MapInt32Bytes {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readInt32();
            break;
          }
          case 2: {
            msg.value = reader.readBytes();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  MapInt32Enum: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestMap.MapInt32Enum>,
      writer: BinaryWriter,
    ): BinaryWriter {
      if (msg.key) {
        writer.writeInt32(1, msg.key);
      }
      if (msg.value && MapEnum._toInt(msg.value)) {
        writer.writeEnum(2, MapEnum._toInt(msg.value));
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestMap.MapInt32Enum,
      reader: BinaryReader,
    ): TestMap.MapInt32Enum {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readInt32();
            break;
          }
          case 2: {
            msg.value = MapEnum._fromInt(reader.readEnum());
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  MapInt32ForeignMessage: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestMap.MapInt32ForeignMessage>,
      writer: BinaryWriter,
    ): BinaryWriter {
      if (msg.key) {
        writer.writeInt32(1, msg.key);
      }
      if (msg.value) {
        writer.writeMessage(
          2,
          msg.value,
          googleProtobufUnittest.ForeignMessage._writeMessage,
        );
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestMap.MapInt32ForeignMessage,
      reader: BinaryReader,
    ): TestMap.MapInt32ForeignMessage {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readInt32();
            break;
          }
          case 2: {
            msg.value = googleProtobufUnittest.ForeignMessage.initialize();
            reader.readMessage(
              msg.value,
              googleProtobufUnittest.ForeignMessage._readMessage,
            );
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  MapStringForeignMessage: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestMap.MapStringForeignMessage>,
      writer: BinaryWriter,
    ): BinaryWriter {
      if (msg.key) {
        writer.writeString(1, msg.key);
      }
      if (msg.value) {
        writer.writeMessage(
          2,
          msg.value,
          googleProtobufUnittest.ForeignMessage._writeMessage,
        );
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestMap.MapStringForeignMessage,
      reader: BinaryReader,
    ): TestMap.MapStringForeignMessage {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readString();
            break;
          }
          case 2: {
            msg.value = googleProtobufUnittest.ForeignMessage.initialize();
            reader.readMessage(
              msg.value,
              googleProtobufUnittest.ForeignMessage._readMessage,
            );
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  MapInt32AllTypes: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestMap.MapInt32AllTypes>,
      writer: BinaryWriter,
    ): BinaryWriter {
      if (msg.key) {
        writer.writeInt32(1, msg.key);
      }
      if (msg.value) {
        writer.writeMessage(
          2,
          msg.value,
          googleProtobufUnittest.TestAllTypes._writeMessage,
        );
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestMap.MapInt32AllTypes,
      reader: BinaryReader,
    ): TestMap.MapInt32AllTypes {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readInt32();
            break;
          }
          case 2: {
            msg.value = googleProtobufUnittest.TestAllTypes.initialize();
            reader.readMessage(
              msg.value,
              googleProtobufUnittest.TestAllTypes._readMessage,
            );
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },
};

export const TestMapSubmessage = {
  /**
   * Serializes TestMapSubmessage to protobuf.
   */
  encode: function (msg: PartialDeep<TestMapSubmessage>): Uint8Array {
    return TestMapSubmessage._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes TestMapSubmessage from protobuf.
   */
  decode: function (bytes: ByteSource): TestMapSubmessage {
    return TestMapSubmessage._readMessage(
      TestMapSubmessage.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes TestMapSubmessage with all fields set to their default value.
   */
  initialize: function (): TestMapSubmessage {
    return {
      testMap: TestMap.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<TestMapSubmessage>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.testMap) {
      writer.writeMessage(1, msg.testMap, TestMap._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: TestMapSubmessage,
    reader: BinaryReader,
  ): TestMapSubmessage {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.testMap, TestMap._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const TestMessageMap = {
  /**
   * Serializes TestMessageMap to protobuf.
   */
  encode: function (msg: PartialDeep<TestMessageMap>): Uint8Array {
    return TestMessageMap._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes TestMessageMap from protobuf.
   */
  decode: function (bytes: ByteSource): TestMessageMap {
    return TestMessageMap._readMessage(
      TestMessageMap.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes TestMessageMap with all fields set to their default value.
   */
  initialize: function (): TestMessageMap {
    return {
      mapInt32Message: {},
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<TestMessageMap>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.mapInt32Message) {
      writer.writeRepeatedMessage(
        1,
        Object.entries(msg.mapInt32Message).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        TestMessageMap.MapInt32Message._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: TestMessageMap,
    reader: BinaryReader,
  ): TestMessageMap {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const map = {} as TestMessageMap.MapInt32Message;
          reader.readMessage(map, TestMessageMap.MapInt32Message._readMessage);
          msg.mapInt32Message[map.key.toString()] = map.value;
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  MapInt32Message: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestMessageMap.MapInt32Message>,
      writer: BinaryWriter,
    ): BinaryWriter {
      if (msg.key) {
        writer.writeInt32(1, msg.key);
      }
      if (msg.value) {
        writer.writeMessage(
          2,
          msg.value,
          googleProtobufUnittest.TestAllTypes._writeMessage,
        );
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestMessageMap.MapInt32Message,
      reader: BinaryReader,
    ): TestMessageMap.MapInt32Message {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readInt32();
            break;
          }
          case 2: {
            msg.value = googleProtobufUnittest.TestAllTypes.initialize();
            reader.readMessage(
              msg.value,
              googleProtobufUnittest.TestAllTypes._readMessage,
            );
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },
};

export const TestSameTypeMap = {
  /**
   * Serializes TestSameTypeMap to protobuf.
   */
  encode: function (msg: PartialDeep<TestSameTypeMap>): Uint8Array {
    return TestSameTypeMap._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes TestSameTypeMap from protobuf.
   */
  decode: function (bytes: ByteSource): TestSameTypeMap {
    return TestSameTypeMap._readMessage(
      TestSameTypeMap.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes TestSameTypeMap with all fields set to their default value.
   */
  initialize: function (): TestSameTypeMap {
    return {
      map1: {},
      map2: {},
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<TestSameTypeMap>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.map1) {
      writer.writeRepeatedMessage(
        1,
        Object.entries(msg.map1).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        TestSameTypeMap.Map1._writeMessage,
      );
    }
    if (msg.map2) {
      writer.writeRepeatedMessage(
        2,
        Object.entries(msg.map2).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        TestSameTypeMap.Map2._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: TestSameTypeMap,
    reader: BinaryReader,
  ): TestSameTypeMap {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const map = {} as TestSameTypeMap.Map1;
          reader.readMessage(map, TestSameTypeMap.Map1._readMessage);
          msg.map1[map.key.toString()] = map.value;
          break;
        }
        case 2: {
          const map = {} as TestSameTypeMap.Map2;
          reader.readMessage(map, TestSameTypeMap.Map2._readMessage);
          msg.map2[map.key.toString()] = map.value;
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  Map1: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestSameTypeMap.Map1>,
      writer: BinaryWriter,
    ): BinaryWriter {
      if (msg.key) {
        writer.writeInt32(1, msg.key);
      }
      if (msg.value) {
        writer.writeInt32(2, msg.value);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestSameTypeMap.Map1,
      reader: BinaryReader,
    ): TestSameTypeMap.Map1 {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readInt32();
            break;
          }
          case 2: {
            msg.value = reader.readInt32();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  Map2: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestSameTypeMap.Map2>,
      writer: BinaryWriter,
    ): BinaryWriter {
      if (msg.key) {
        writer.writeInt32(1, msg.key);
      }
      if (msg.value) {
        writer.writeInt32(2, msg.value);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestSameTypeMap.Map2,
      reader: BinaryReader,
    ): TestSameTypeMap.Map2 {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readInt32();
            break;
          }
          case 2: {
            msg.value = reader.readInt32();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },
};

export const TestRequiredMessageMap = {
  /**
   * Serializes TestRequiredMessageMap to protobuf.
   */
  encode: function (msg: PartialDeep<TestRequiredMessageMap>): Uint8Array {
    return TestRequiredMessageMap._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes TestRequiredMessageMap from protobuf.
   */
  decode: function (bytes: ByteSource): TestRequiredMessageMap {
    return TestRequiredMessageMap._readMessage(
      TestRequiredMessageMap.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes TestRequiredMessageMap with all fields set to their default value.
   */
  initialize: function (): TestRequiredMessageMap {
    return {
      mapField: {},
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<TestRequiredMessageMap>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.mapField) {
      writer.writeRepeatedMessage(
        1,
        Object.entries(msg.mapField).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        TestRequiredMessageMap.MapField._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: TestRequiredMessageMap,
    reader: BinaryReader,
  ): TestRequiredMessageMap {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const map = {} as TestRequiredMessageMap.MapField;
          reader.readMessage(map, TestRequiredMessageMap.MapField._readMessage);
          msg.mapField[map.key.toString()] = map.value;
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  MapField: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestRequiredMessageMap.MapField>,
      writer: BinaryWriter,
    ): BinaryWriter {
      if (msg.key) {
        writer.writeInt32(1, msg.key);
      }
      if (msg.value) {
        writer.writeMessage(
          2,
          msg.value,
          googleProtobufUnittest.TestRequired._writeMessage,
        );
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestRequiredMessageMap.MapField,
      reader: BinaryReader,
    ): TestRequiredMessageMap.MapField {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readInt32();
            break;
          }
          case 2: {
            msg.value = googleProtobufUnittest.TestRequired.initialize();
            reader.readMessage(
              msg.value,
              googleProtobufUnittest.TestRequired._readMessage,
            );
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },
};

export const TestArenaMap = {
  /**
   * Serializes TestArenaMap to protobuf.
   */
  encode: function (msg: PartialDeep<TestArenaMap>): Uint8Array {
    return TestArenaMap._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes TestArenaMap from protobuf.
   */
  decode: function (bytes: ByteSource): TestArenaMap {
    return TestArenaMap._readMessage(
      TestArenaMap.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes TestArenaMap with all fields set to their default value.
   */
  initialize: function (): TestArenaMap {
    return {
      mapInt32Int32: {},
      mapInt64Int64: {},
      mapUint32Uint32: {},
      mapUint64Uint64: {},
      mapSint32Sint32: {},
      mapSint64Sint64: {},
      mapFixed32Fixed32: {},
      mapFixed64Fixed64: {},
      mapSfixed32Sfixed32: {},
      mapSfixed64Sfixed64: {},
      mapInt32Float: {},
      mapInt32Double: {},
      mapBoolBool: {},
      mapStringString: {},
      mapInt32Bytes: {},
      mapInt32Enum: {},
      mapInt32ForeignMessage: {},
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<TestArenaMap>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.mapInt32Int32) {
      writer.writeRepeatedMessage(
        1,
        Object.entries(msg.mapInt32Int32).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        TestArenaMap.MapInt32Int32._writeMessage,
      );
    }
    if (msg.mapInt64Int64) {
      writer.writeRepeatedMessage(
        2,
        Object.entries(msg.mapInt64Int64).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        TestArenaMap.MapInt64Int64._writeMessage,
      );
    }
    if (msg.mapUint32Uint32) {
      writer.writeRepeatedMessage(
        3,
        Object.entries(msg.mapUint32Uint32).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        TestArenaMap.MapUint32Uint32._writeMessage,
      );
    }
    if (msg.mapUint64Uint64) {
      writer.writeRepeatedMessage(
        4,
        Object.entries(msg.mapUint64Uint64).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        TestArenaMap.MapUint64Uint64._writeMessage,
      );
    }
    if (msg.mapSint32Sint32) {
      writer.writeRepeatedMessage(
        5,
        Object.entries(msg.mapSint32Sint32).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        TestArenaMap.MapSint32Sint32._writeMessage,
      );
    }
    if (msg.mapSint64Sint64) {
      writer.writeRepeatedMessage(
        6,
        Object.entries(msg.mapSint64Sint64).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        TestArenaMap.MapSint64Sint64._writeMessage,
      );
    }
    if (msg.mapFixed32Fixed32) {
      writer.writeRepeatedMessage(
        7,
        Object.entries(msg.mapFixed32Fixed32).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        TestArenaMap.MapFixed32Fixed32._writeMessage,
      );
    }
    if (msg.mapFixed64Fixed64) {
      writer.writeRepeatedMessage(
        8,
        Object.entries(msg.mapFixed64Fixed64).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        TestArenaMap.MapFixed64Fixed64._writeMessage,
      );
    }
    if (msg.mapSfixed32Sfixed32) {
      writer.writeRepeatedMessage(
        9,
        Object.entries(msg.mapSfixed32Sfixed32).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        TestArenaMap.MapSfixed32Sfixed32._writeMessage,
      );
    }
    if (msg.mapSfixed64Sfixed64) {
      writer.writeRepeatedMessage(
        10,
        Object.entries(msg.mapSfixed64Sfixed64).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        TestArenaMap.MapSfixed64Sfixed64._writeMessage,
      );
    }
    if (msg.mapInt32Float) {
      writer.writeRepeatedMessage(
        11,
        Object.entries(msg.mapInt32Float).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        TestArenaMap.MapInt32Float._writeMessage,
      );
    }
    if (msg.mapInt32Double) {
      writer.writeRepeatedMessage(
        12,
        Object.entries(msg.mapInt32Double).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        TestArenaMap.MapInt32Double._writeMessage,
      );
    }
    if (msg.mapBoolBool) {
      writer.writeRepeatedMessage(
        13,
        Object.entries(msg.mapBoolBool).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        TestArenaMap.MapBoolBool._writeMessage,
      );
    }
    if (msg.mapStringString) {
      writer.writeRepeatedMessage(
        14,
        Object.entries(msg.mapStringString).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        TestArenaMap.MapStringString._writeMessage,
      );
    }
    if (msg.mapInt32Bytes) {
      writer.writeRepeatedMessage(
        15,
        Object.entries(msg.mapInt32Bytes).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        TestArenaMap.MapInt32Bytes._writeMessage,
      );
    }
    if (msg.mapInt32Enum) {
      writer.writeRepeatedMessage(
        16,
        Object.entries(msg.mapInt32Enum).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        TestArenaMap.MapInt32Enum._writeMessage,
      );
    }
    if (msg.mapInt32ForeignMessage) {
      writer.writeRepeatedMessage(
        17,
        Object.entries(msg.mapInt32ForeignMessage).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        TestArenaMap.MapInt32ForeignMessage._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: TestArenaMap,
    reader: BinaryReader,
  ): TestArenaMap {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const map = {} as TestArenaMap.MapInt32Int32;
          reader.readMessage(map, TestArenaMap.MapInt32Int32._readMessage);
          msg.mapInt32Int32[map.key.toString()] = map.value;
          break;
        }
        case 2: {
          const map = {} as TestArenaMap.MapInt64Int64;
          reader.readMessage(map, TestArenaMap.MapInt64Int64._readMessage);
          msg.mapInt64Int64[map.key.toString()] = map.value;
          break;
        }
        case 3: {
          const map = {} as TestArenaMap.MapUint32Uint32;
          reader.readMessage(map, TestArenaMap.MapUint32Uint32._readMessage);
          msg.mapUint32Uint32[map.key.toString()] = map.value;
          break;
        }
        case 4: {
          const map = {} as TestArenaMap.MapUint64Uint64;
          reader.readMessage(map, TestArenaMap.MapUint64Uint64._readMessage);
          msg.mapUint64Uint64[map.key.toString()] = map.value;
          break;
        }
        case 5: {
          const map = {} as TestArenaMap.MapSint32Sint32;
          reader.readMessage(map, TestArenaMap.MapSint32Sint32._readMessage);
          msg.mapSint32Sint32[map.key.toString()] = map.value;
          break;
        }
        case 6: {
          const map = {} as TestArenaMap.MapSint64Sint64;
          reader.readMessage(map, TestArenaMap.MapSint64Sint64._readMessage);
          msg.mapSint64Sint64[map.key.toString()] = map.value;
          break;
        }
        case 7: {
          const map = {} as TestArenaMap.MapFixed32Fixed32;
          reader.readMessage(map, TestArenaMap.MapFixed32Fixed32._readMessage);
          msg.mapFixed32Fixed32[map.key.toString()] = map.value;
          break;
        }
        case 8: {
          const map = {} as TestArenaMap.MapFixed64Fixed64;
          reader.readMessage(map, TestArenaMap.MapFixed64Fixed64._readMessage);
          msg.mapFixed64Fixed64[map.key.toString()] = map.value;
          break;
        }
        case 9: {
          const map = {} as TestArenaMap.MapSfixed32Sfixed32;
          reader.readMessage(
            map,
            TestArenaMap.MapSfixed32Sfixed32._readMessage,
          );
          msg.mapSfixed32Sfixed32[map.key.toString()] = map.value;
          break;
        }
        case 10: {
          const map = {} as TestArenaMap.MapSfixed64Sfixed64;
          reader.readMessage(
            map,
            TestArenaMap.MapSfixed64Sfixed64._readMessage,
          );
          msg.mapSfixed64Sfixed64[map.key.toString()] = map.value;
          break;
        }
        case 11: {
          const map = {} as TestArenaMap.MapInt32Float;
          reader.readMessage(map, TestArenaMap.MapInt32Float._readMessage);
          msg.mapInt32Float[map.key.toString()] = map.value;
          break;
        }
        case 12: {
          const map = {} as TestArenaMap.MapInt32Double;
          reader.readMessage(map, TestArenaMap.MapInt32Double._readMessage);
          msg.mapInt32Double[map.key.toString()] = map.value;
          break;
        }
        case 13: {
          const map = {} as TestArenaMap.MapBoolBool;
          reader.readMessage(map, TestArenaMap.MapBoolBool._readMessage);
          msg.mapBoolBool[map.key.toString()] = map.value;
          break;
        }
        case 14: {
          const map = {} as TestArenaMap.MapStringString;
          reader.readMessage(map, TestArenaMap.MapStringString._readMessage);
          msg.mapStringString[map.key.toString()] = map.value;
          break;
        }
        case 15: {
          const map = {} as TestArenaMap.MapInt32Bytes;
          reader.readMessage(map, TestArenaMap.MapInt32Bytes._readMessage);
          msg.mapInt32Bytes[map.key.toString()] = map.value;
          break;
        }
        case 16: {
          const map = {} as TestArenaMap.MapInt32Enum;
          reader.readMessage(map, TestArenaMap.MapInt32Enum._readMessage);
          msg.mapInt32Enum[map.key.toString()] = map.value;
          break;
        }
        case 17: {
          const map = {} as TestArenaMap.MapInt32ForeignMessage;
          reader.readMessage(
            map,
            TestArenaMap.MapInt32ForeignMessage._readMessage,
          );
          msg.mapInt32ForeignMessage[map.key.toString()] = map.value;
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  MapInt32Int32: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestArenaMap.MapInt32Int32>,
      writer: BinaryWriter,
    ): BinaryWriter {
      if (msg.key) {
        writer.writeInt32(1, msg.key);
      }
      if (msg.value) {
        writer.writeInt32(2, msg.value);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestArenaMap.MapInt32Int32,
      reader: BinaryReader,
    ): TestArenaMap.MapInt32Int32 {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readInt32();
            break;
          }
          case 2: {
            msg.value = reader.readInt32();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  MapInt64Int64: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestArenaMap.MapInt64Int64>,
      writer: BinaryWriter,
    ): BinaryWriter {
      if (msg.key) {
        writer.writeInt64String(1, msg.key.toString() as any);
      }
      if (msg.value) {
        writer.writeInt64String(2, msg.value.toString() as any);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestArenaMap.MapInt64Int64,
      reader: BinaryReader,
    ): TestArenaMap.MapInt64Int64 {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = BigInt(reader.readInt64String());
            break;
          }
          case 2: {
            msg.value = BigInt(reader.readInt64String());
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  MapUint32Uint32: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestArenaMap.MapUint32Uint32>,
      writer: BinaryWriter,
    ): BinaryWriter {
      if (msg.key) {
        writer.writeUint32(1, msg.key);
      }
      if (msg.value) {
        writer.writeUint32(2, msg.value);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestArenaMap.MapUint32Uint32,
      reader: BinaryReader,
    ): TestArenaMap.MapUint32Uint32 {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readUint32();
            break;
          }
          case 2: {
            msg.value = reader.readUint32();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  MapUint64Uint64: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestArenaMap.MapUint64Uint64>,
      writer: BinaryWriter,
    ): BinaryWriter {
      if (msg.key) {
        writer.writeUint64String(1, msg.key.toString() as any);
      }
      if (msg.value) {
        writer.writeUint64String(2, msg.value.toString() as any);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestArenaMap.MapUint64Uint64,
      reader: BinaryReader,
    ): TestArenaMap.MapUint64Uint64 {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = BigInt(reader.readUint64String());
            break;
          }
          case 2: {
            msg.value = BigInt(reader.readUint64String());
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  MapSint32Sint32: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestArenaMap.MapSint32Sint32>,
      writer: BinaryWriter,
    ): BinaryWriter {
      if (msg.key) {
        writer.writeSint32(1, msg.key);
      }
      if (msg.value) {
        writer.writeSint32(2, msg.value);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestArenaMap.MapSint32Sint32,
      reader: BinaryReader,
    ): TestArenaMap.MapSint32Sint32 {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readSint32();
            break;
          }
          case 2: {
            msg.value = reader.readSint32();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  MapSint64Sint64: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestArenaMap.MapSint64Sint64>,
      writer: BinaryWriter,
    ): BinaryWriter {
      if (msg.key) {
        writer.writeSint64String(1, msg.key.toString() as any);
      }
      if (msg.value) {
        writer.writeSint64String(2, msg.value.toString() as any);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestArenaMap.MapSint64Sint64,
      reader: BinaryReader,
    ): TestArenaMap.MapSint64Sint64 {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = BigInt(reader.readSint64String());
            break;
          }
          case 2: {
            msg.value = BigInt(reader.readSint64String());
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  MapFixed32Fixed32: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestArenaMap.MapFixed32Fixed32>,
      writer: BinaryWriter,
    ): BinaryWriter {
      if (msg.key) {
        writer.writeFixed32(1, msg.key);
      }
      if (msg.value) {
        writer.writeFixed32(2, msg.value);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestArenaMap.MapFixed32Fixed32,
      reader: BinaryReader,
    ): TestArenaMap.MapFixed32Fixed32 {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readFixed32();
            break;
          }
          case 2: {
            msg.value = reader.readFixed32();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  MapFixed64Fixed64: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestArenaMap.MapFixed64Fixed64>,
      writer: BinaryWriter,
    ): BinaryWriter {
      if (msg.key) {
        writer.writeFixed64String(1, msg.key.toString() as any);
      }
      if (msg.value) {
        writer.writeFixed64String(2, msg.value.toString() as any);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestArenaMap.MapFixed64Fixed64,
      reader: BinaryReader,
    ): TestArenaMap.MapFixed64Fixed64 {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = BigInt(reader.readFixed64String());
            break;
          }
          case 2: {
            msg.value = BigInt(reader.readFixed64String());
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  MapSfixed32Sfixed32: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestArenaMap.MapSfixed32Sfixed32>,
      writer: BinaryWriter,
    ): BinaryWriter {
      if (msg.key) {
        writer.writeSfixed32(1, msg.key);
      }
      if (msg.value) {
        writer.writeSfixed32(2, msg.value);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestArenaMap.MapSfixed32Sfixed32,
      reader: BinaryReader,
    ): TestArenaMap.MapSfixed32Sfixed32 {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readSfixed32();
            break;
          }
          case 2: {
            msg.value = reader.readSfixed32();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  MapSfixed64Sfixed64: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestArenaMap.MapSfixed64Sfixed64>,
      writer: BinaryWriter,
    ): BinaryWriter {
      if (msg.key) {
        writer.writeSfixed64String(1, msg.key.toString() as any);
      }
      if (msg.value) {
        writer.writeSfixed64String(2, msg.value.toString() as any);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestArenaMap.MapSfixed64Sfixed64,
      reader: BinaryReader,
    ): TestArenaMap.MapSfixed64Sfixed64 {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = BigInt(reader.readSfixed64String());
            break;
          }
          case 2: {
            msg.value = BigInt(reader.readSfixed64String());
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  MapInt32Float: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestArenaMap.MapInt32Float>,
      writer: BinaryWriter,
    ): BinaryWriter {
      if (msg.key) {
        writer.writeInt32(1, msg.key);
      }
      if (msg.value) {
        writer.writeFloat(2, msg.value);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestArenaMap.MapInt32Float,
      reader: BinaryReader,
    ): TestArenaMap.MapInt32Float {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readInt32();
            break;
          }
          case 2: {
            msg.value = reader.readFloat();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  MapInt32Double: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestArenaMap.MapInt32Double>,
      writer: BinaryWriter,
    ): BinaryWriter {
      if (msg.key) {
        writer.writeInt32(1, msg.key);
      }
      if (msg.value) {
        writer.writeDouble(2, msg.value);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestArenaMap.MapInt32Double,
      reader: BinaryReader,
    ): TestArenaMap.MapInt32Double {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readInt32();
            break;
          }
          case 2: {
            msg.value = reader.readDouble();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  MapBoolBool: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestArenaMap.MapBoolBool>,
      writer: BinaryWriter,
    ): BinaryWriter {
      if (msg.key) {
        writer.writeBool(1, msg.key);
      }
      if (msg.value) {
        writer.writeBool(2, msg.value);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestArenaMap.MapBoolBool,
      reader: BinaryReader,
    ): TestArenaMap.MapBoolBool {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readBool();
            break;
          }
          case 2: {
            msg.value = reader.readBool();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  MapStringString: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestArenaMap.MapStringString>,
      writer: BinaryWriter,
    ): BinaryWriter {
      if (msg.key) {
        writer.writeString(1, msg.key);
      }
      if (msg.value) {
        writer.writeString(2, msg.value);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestArenaMap.MapStringString,
      reader: BinaryReader,
    ): TestArenaMap.MapStringString {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readString();
            break;
          }
          case 2: {
            msg.value = reader.readString();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  MapInt32Bytes: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestArenaMap.MapInt32Bytes>,
      writer: BinaryWriter,
    ): BinaryWriter {
      if (msg.key) {
        writer.writeInt32(1, msg.key);
      }
      if (msg.value?.length) {
        writer.writeBytes(2, msg.value);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestArenaMap.MapInt32Bytes,
      reader: BinaryReader,
    ): TestArenaMap.MapInt32Bytes {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readInt32();
            break;
          }
          case 2: {
            msg.value = reader.readBytes();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  MapInt32Enum: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestArenaMap.MapInt32Enum>,
      writer: BinaryWriter,
    ): BinaryWriter {
      if (msg.key) {
        writer.writeInt32(1, msg.key);
      }
      if (msg.value && MapEnum._toInt(msg.value)) {
        writer.writeEnum(2, MapEnum._toInt(msg.value));
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestArenaMap.MapInt32Enum,
      reader: BinaryReader,
    ): TestArenaMap.MapInt32Enum {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readInt32();
            break;
          }
          case 2: {
            msg.value = MapEnum._fromInt(reader.readEnum());
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  MapInt32ForeignMessage: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestArenaMap.MapInt32ForeignMessage>,
      writer: BinaryWriter,
    ): BinaryWriter {
      if (msg.key) {
        writer.writeInt32(1, msg.key);
      }
      if (msg.value) {
        writer.writeMessage(
          2,
          msg.value,
          googleProtobufUnittest.ForeignMessage._writeMessage,
        );
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestArenaMap.MapInt32ForeignMessage,
      reader: BinaryReader,
    ): TestArenaMap.MapInt32ForeignMessage {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readInt32();
            break;
          }
          case 2: {
            msg.value = googleProtobufUnittest.ForeignMessage.initialize();
            reader.readMessage(
              msg.value,
              googleProtobufUnittest.ForeignMessage._readMessage,
            );
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },
};

export const MessageContainingMapCalledEntry = {
  /**
   * Serializes MessageContainingMapCalledEntry to protobuf.
   */
  encode: function (
    msg: PartialDeep<MessageContainingMapCalledEntry>,
  ): Uint8Array {
    return MessageContainingMapCalledEntry._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes MessageContainingMapCalledEntry from protobuf.
   */
  decode: function (bytes: ByteSource): MessageContainingMapCalledEntry {
    return MessageContainingMapCalledEntry._readMessage(
      MessageContainingMapCalledEntry.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes MessageContainingMapCalledEntry with all fields set to their default value.
   */
  initialize: function (): MessageContainingMapCalledEntry {
    return {
      entry: {},
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<MessageContainingMapCalledEntry>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.entry) {
      writer.writeRepeatedMessage(
        1,
        Object.entries(msg.entry).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        MessageContainingMapCalledEntry.Entry._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: MessageContainingMapCalledEntry,
    reader: BinaryReader,
  ): MessageContainingMapCalledEntry {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const map = {} as MessageContainingMapCalledEntry.Entry;
          reader.readMessage(
            map,
            MessageContainingMapCalledEntry.Entry._readMessage,
          );
          msg.entry[map.key.toString()] = map.value;
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  Entry: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<MessageContainingMapCalledEntry.Entry>,
      writer: BinaryWriter,
    ): BinaryWriter {
      if (msg.key) {
        writer.writeInt32(1, msg.key);
      }
      if (msg.value) {
        writer.writeInt32(2, msg.value);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: MessageContainingMapCalledEntry.Entry,
      reader: BinaryReader,
    ): MessageContainingMapCalledEntry.Entry {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readInt32();
            break;
          }
          case 2: {
            msg.value = reader.readInt32();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },
};

export const TestRecursiveMapMessage = {
  /**
   * Serializes TestRecursiveMapMessage to protobuf.
   */
  encode: function (msg: PartialDeep<TestRecursiveMapMessage>): Uint8Array {
    return TestRecursiveMapMessage._writeMessage(
      msg,
      new BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes TestRecursiveMapMessage from protobuf.
   */
  decode: function (bytes: ByteSource): TestRecursiveMapMessage {
    return TestRecursiveMapMessage._readMessage(
      TestRecursiveMapMessage.initialize(),
      new BinaryReader(bytes),
    );
  },

  /**
   * Initializes TestRecursiveMapMessage with all fields set to their default value.
   */
  initialize: function (): TestRecursiveMapMessage {
    return {
      a: {},
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<TestRecursiveMapMessage>,
    writer: BinaryWriter,
  ): BinaryWriter {
    if (msg.a) {
      writer.writeRepeatedMessage(
        1,
        Object.entries(msg.a).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        TestRecursiveMapMessage.A._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: TestRecursiveMapMessage,
    reader: BinaryReader,
  ): TestRecursiveMapMessage {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const map = {} as TestRecursiveMapMessage.A;
          reader.readMessage(map, TestRecursiveMapMessage.A._readMessage);
          msg.a[map.key.toString()] = map.value;
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  A: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestRecursiveMapMessage.A>,
      writer: BinaryWriter,
    ): BinaryWriter {
      if (msg.key) {
        writer.writeString(1, msg.key);
      }
      if (msg.value) {
        writer.writeMessage(
          2,
          msg.value,
          TestRecursiveMapMessage._writeMessage,
        );
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestRecursiveMapMessage.A,
      reader: BinaryReader,
    ): TestRecursiveMapMessage.A {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readString();
            break;
          }
          case 2: {
            msg.value = TestRecursiveMapMessage.initialize();
            reader.readMessage(msg.value, TestRecursiveMapMessage._readMessage);
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const MapEnumJSON = {
  MAP_ENUM_FOO: "MAP_ENUM_FOO",
  MAP_ENUM_BAR: "MAP_ENUM_BAR",
  MAP_ENUM_BAZ: "MAP_ENUM_BAZ",
  /**
   * @private
   */
  _fromInt: function (i: number): MapEnum {
    switch (i) {
      case 0: {
        return "MAP_ENUM_FOO";
      }
      case 1: {
        return "MAP_ENUM_BAR";
      }
      case 2: {
        return "MAP_ENUM_BAZ";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as MapEnum;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i: MapEnum): number {
    switch (i) {
      case "MAP_ENUM_FOO": {
        return 0;
      }
      case "MAP_ENUM_BAR": {
        return 1;
      }
      case "MAP_ENUM_BAZ": {
        return 2;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as number;
      }
    }
  },
} as const;

export const TestMapJSON = {
  /**
   * Serializes TestMap to JSON.
   */
  encode: function (msg: PartialDeep<TestMap>): string {
    return JSON.stringify(TestMapJSON._writeMessage(msg));
  },

  /**
   * Deserializes TestMap from JSON.
   */
  decode: function (json: string): TestMap {
    return TestMapJSON._readMessage(TestMapJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes TestMap with all fields set to their default value.
   */
  initialize: function (): TestMap {
    return {
      mapInt32Int32: {},
      mapInt64Int64: {},
      mapUint32Uint32: {},
      mapUint64Uint64: {},
      mapSint32Sint32: {},
      mapSint64Sint64: {},
      mapFixed32Fixed32: {},
      mapFixed64Fixed64: {},
      mapSfixed32Sfixed32: {},
      mapSfixed64Sfixed64: {},
      mapInt32Float: {},
      mapInt32Double: {},
      mapBoolBool: {},
      mapStringString: {},
      mapInt32Bytes: {},
      mapInt32Enum: {},
      mapInt32ForeignMessage: {},
      mapStringForeignMessage: {},
      mapInt32AllTypes: {},
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<TestMap>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.mapInt32Int32) {
      const _mapInt32Int32_ = Object.fromEntries(
        Object.entries(msg.mapInt32Int32)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestMapJSON.MapInt32Int32._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_mapInt32Int32_).length > 0) {
        json["mapInt32Int32"] = _mapInt32Int32_;
      }
    }
    if (msg.mapInt64Int64) {
      const _mapInt64Int64_ = Object.fromEntries(
        Object.entries(msg.mapInt64Int64)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestMapJSON.MapInt64Int64._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_mapInt64Int64_).length > 0) {
        json["mapInt64Int64"] = _mapInt64Int64_;
      }
    }
    if (msg.mapUint32Uint32) {
      const _mapUint32Uint32_ = Object.fromEntries(
        Object.entries(msg.mapUint32Uint32)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestMapJSON.MapUint32Uint32._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_mapUint32Uint32_).length > 0) {
        json["mapUint32Uint32"] = _mapUint32Uint32_;
      }
    }
    if (msg.mapUint64Uint64) {
      const _mapUint64Uint64_ = Object.fromEntries(
        Object.entries(msg.mapUint64Uint64)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestMapJSON.MapUint64Uint64._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_mapUint64Uint64_).length > 0) {
        json["mapUint64Uint64"] = _mapUint64Uint64_;
      }
    }
    if (msg.mapSint32Sint32) {
      const _mapSint32Sint32_ = Object.fromEntries(
        Object.entries(msg.mapSint32Sint32)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestMapJSON.MapSint32Sint32._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_mapSint32Sint32_).length > 0) {
        json["mapSint32Sint32"] = _mapSint32Sint32_;
      }
    }
    if (msg.mapSint64Sint64) {
      const _mapSint64Sint64_ = Object.fromEntries(
        Object.entries(msg.mapSint64Sint64)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestMapJSON.MapSint64Sint64._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_mapSint64Sint64_).length > 0) {
        json["mapSint64Sint64"] = _mapSint64Sint64_;
      }
    }
    if (msg.mapFixed32Fixed32) {
      const _mapFixed32Fixed32_ = Object.fromEntries(
        Object.entries(msg.mapFixed32Fixed32)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestMapJSON.MapFixed32Fixed32._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_mapFixed32Fixed32_).length > 0) {
        json["mapFixed32Fixed32"] = _mapFixed32Fixed32_;
      }
    }
    if (msg.mapFixed64Fixed64) {
      const _mapFixed64Fixed64_ = Object.fromEntries(
        Object.entries(msg.mapFixed64Fixed64)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestMapJSON.MapFixed64Fixed64._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_mapFixed64Fixed64_).length > 0) {
        json["mapFixed64Fixed64"] = _mapFixed64Fixed64_;
      }
    }
    if (msg.mapSfixed32Sfixed32) {
      const _mapSfixed32Sfixed32_ = Object.fromEntries(
        Object.entries(msg.mapSfixed32Sfixed32)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestMapJSON.MapSfixed32Sfixed32._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_mapSfixed32Sfixed32_).length > 0) {
        json["mapSfixed32Sfixed32"] = _mapSfixed32Sfixed32_;
      }
    }
    if (msg.mapSfixed64Sfixed64) {
      const _mapSfixed64Sfixed64_ = Object.fromEntries(
        Object.entries(msg.mapSfixed64Sfixed64)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestMapJSON.MapSfixed64Sfixed64._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_mapSfixed64Sfixed64_).length > 0) {
        json["mapSfixed64Sfixed64"] = _mapSfixed64Sfixed64_;
      }
    }
    if (msg.mapInt32Float) {
      const _mapInt32Float_ = Object.fromEntries(
        Object.entries(msg.mapInt32Float)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestMapJSON.MapInt32Float._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_mapInt32Float_).length > 0) {
        json["mapInt32Float"] = _mapInt32Float_;
      }
    }
    if (msg.mapInt32Double) {
      const _mapInt32Double_ = Object.fromEntries(
        Object.entries(msg.mapInt32Double)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestMapJSON.MapInt32Double._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_mapInt32Double_).length > 0) {
        json["mapInt32Double"] = _mapInt32Double_;
      }
    }
    if (msg.mapBoolBool) {
      const _mapBoolBool_ = Object.fromEntries(
        Object.entries(msg.mapBoolBool)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestMapJSON.MapBoolBool._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_mapBoolBool_).length > 0) {
        json["mapBoolBool"] = _mapBoolBool_;
      }
    }
    if (msg.mapStringString) {
      const _mapStringString_ = Object.fromEntries(
        Object.entries(msg.mapStringString)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestMapJSON.MapStringString._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_mapStringString_).length > 0) {
        json["mapStringString"] = _mapStringString_;
      }
    }
    if (msg.mapInt32Bytes) {
      const _mapInt32Bytes_ = Object.fromEntries(
        Object.entries(msg.mapInt32Bytes)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestMapJSON.MapInt32Bytes._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_mapInt32Bytes_).length > 0) {
        json["mapInt32Bytes"] = _mapInt32Bytes_;
      }
    }
    if (msg.mapInt32Enum) {
      const _mapInt32Enum_ = Object.fromEntries(
        Object.entries(msg.mapInt32Enum)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestMapJSON.MapInt32Enum._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_mapInt32Enum_).length > 0) {
        json["mapInt32Enum"] = _mapInt32Enum_;
      }
    }
    if (msg.mapInt32ForeignMessage) {
      const _mapInt32ForeignMessage_ = Object.fromEntries(
        Object.entries(msg.mapInt32ForeignMessage)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestMapJSON.MapInt32ForeignMessage._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_mapInt32ForeignMessage_).length > 0) {
        json["mapInt32ForeignMessage"] = _mapInt32ForeignMessage_;
      }
    }
    if (msg.mapStringForeignMessage) {
      const _mapStringForeignMessage_ = Object.fromEntries(
        Object.entries(msg.mapStringForeignMessage)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestMapJSON.MapStringForeignMessage._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_mapStringForeignMessage_).length > 0) {
        json["mapStringForeignMessage"] = _mapStringForeignMessage_;
      }
    }
    if (msg.mapInt32AllTypes) {
      const _mapInt32AllTypes_ = Object.fromEntries(
        Object.entries(msg.mapInt32AllTypes)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestMapJSON.MapInt32AllTypes._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_mapInt32AllTypes_).length > 0) {
        json["mapInt32AllTypes"] = _mapInt32AllTypes_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: TestMap, json: any): TestMap {
    const _mapInt32Int32_ = json["mapInt32Int32"] ?? json["map_int32_int32"];
    if (_mapInt32Int32_) {
      msg.mapInt32Int32 = Object.fromEntries(
        Object.entries(_mapInt32Int32_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestMapJSON.MapInt32Int32._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _mapInt64Int64_ = json["mapInt64Int64"] ?? json["map_int64_int64"];
    if (_mapInt64Int64_) {
      msg.mapInt64Int64 = Object.fromEntries(
        Object.entries(_mapInt64Int64_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestMapJSON.MapInt64Int64._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _mapUint32Uint32_ =
      json["mapUint32Uint32"] ?? json["map_uint32_uint32"];
    if (_mapUint32Uint32_) {
      msg.mapUint32Uint32 = Object.fromEntries(
        Object.entries(_mapUint32Uint32_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestMapJSON.MapUint32Uint32._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _mapUint64Uint64_ =
      json["mapUint64Uint64"] ?? json["map_uint64_uint64"];
    if (_mapUint64Uint64_) {
      msg.mapUint64Uint64 = Object.fromEntries(
        Object.entries(_mapUint64Uint64_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestMapJSON.MapUint64Uint64._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _mapSint32Sint32_ =
      json["mapSint32Sint32"] ?? json["map_sint32_sint32"];
    if (_mapSint32Sint32_) {
      msg.mapSint32Sint32 = Object.fromEntries(
        Object.entries(_mapSint32Sint32_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestMapJSON.MapSint32Sint32._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _mapSint64Sint64_ =
      json["mapSint64Sint64"] ?? json["map_sint64_sint64"];
    if (_mapSint64Sint64_) {
      msg.mapSint64Sint64 = Object.fromEntries(
        Object.entries(_mapSint64Sint64_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestMapJSON.MapSint64Sint64._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _mapFixed32Fixed32_ =
      json["mapFixed32Fixed32"] ?? json["map_fixed32_fixed32"];
    if (_mapFixed32Fixed32_) {
      msg.mapFixed32Fixed32 = Object.fromEntries(
        Object.entries(_mapFixed32Fixed32_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestMapJSON.MapFixed32Fixed32._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _mapFixed64Fixed64_ =
      json["mapFixed64Fixed64"] ?? json["map_fixed64_fixed64"];
    if (_mapFixed64Fixed64_) {
      msg.mapFixed64Fixed64 = Object.fromEntries(
        Object.entries(_mapFixed64Fixed64_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestMapJSON.MapFixed64Fixed64._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _mapSfixed32Sfixed32_ =
      json["mapSfixed32Sfixed32"] ?? json["map_sfixed32_sfixed32"];
    if (_mapSfixed32Sfixed32_) {
      msg.mapSfixed32Sfixed32 = Object.fromEntries(
        Object.entries(_mapSfixed32Sfixed32_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestMapJSON.MapSfixed32Sfixed32._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _mapSfixed64Sfixed64_ =
      json["mapSfixed64Sfixed64"] ?? json["map_sfixed64_sfixed64"];
    if (_mapSfixed64Sfixed64_) {
      msg.mapSfixed64Sfixed64 = Object.fromEntries(
        Object.entries(_mapSfixed64Sfixed64_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestMapJSON.MapSfixed64Sfixed64._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _mapInt32Float_ = json["mapInt32Float"] ?? json["map_int32_float"];
    if (_mapInt32Float_) {
      msg.mapInt32Float = Object.fromEntries(
        Object.entries(_mapInt32Float_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestMapJSON.MapInt32Float._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _mapInt32Double_ = json["mapInt32Double"] ?? json["map_int32_double"];
    if (_mapInt32Double_) {
      msg.mapInt32Double = Object.fromEntries(
        Object.entries(_mapInt32Double_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestMapJSON.MapInt32Double._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _mapBoolBool_ = json["mapBoolBool"] ?? json["map_bool_bool"];
    if (_mapBoolBool_) {
      msg.mapBoolBool = Object.fromEntries(
        Object.entries(_mapBoolBool_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestMapJSON.MapBoolBool._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _mapStringString_ =
      json["mapStringString"] ?? json["map_string_string"];
    if (_mapStringString_) {
      msg.mapStringString = Object.fromEntries(
        Object.entries(_mapStringString_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestMapJSON.MapStringString._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _mapInt32Bytes_ = json["mapInt32Bytes"] ?? json["map_int32_bytes"];
    if (_mapInt32Bytes_) {
      msg.mapInt32Bytes = Object.fromEntries(
        Object.entries(_mapInt32Bytes_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestMapJSON.MapInt32Bytes._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _mapInt32Enum_ = json["mapInt32Enum"] ?? json["map_int32_enum"];
    if (_mapInt32Enum_) {
      msg.mapInt32Enum = Object.fromEntries(
        Object.entries(_mapInt32Enum_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestMapJSON.MapInt32Enum._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _mapInt32ForeignMessage_ =
      json["mapInt32ForeignMessage"] ?? json["map_int32_foreign_message"];
    if (_mapInt32ForeignMessage_) {
      msg.mapInt32ForeignMessage = Object.fromEntries(
        Object.entries(_mapInt32ForeignMessage_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestMapJSON.MapInt32ForeignMessage._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _mapStringForeignMessage_ =
      json["mapStringForeignMessage"] ?? json["map_string_foreign_message"];
    if (_mapStringForeignMessage_) {
      msg.mapStringForeignMessage = Object.fromEntries(
        Object.entries(_mapStringForeignMessage_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestMapJSON.MapStringForeignMessage._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _mapInt32AllTypes_ =
      json["mapInt32AllTypes"] ?? json["map_int32_all_types"];
    if (_mapInt32AllTypes_) {
      msg.mapInt32AllTypes = Object.fromEntries(
        Object.entries(_mapInt32AllTypes_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestMapJSON.MapInt32AllTypes._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    return msg;
  },

  MapInt32Int32: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestMap.MapInt32Int32>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        json["value"] = msg.value;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestMap.MapInt32Int32,
      json: any,
    ): TestMap.MapInt32Int32 {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = _key_;
      }
      const _value_ = json["value"];
      if (_value_) {
        msg.value = _value_;
      }
      return msg;
    },
  },

  MapInt64Int64: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestMap.MapInt64Int64>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key.toString();
      }
      if (msg.value) {
        json["value"] = msg.value.toString();
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestMap.MapInt64Int64,
      json: any,
    ): TestMap.MapInt64Int64 {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = BigInt(_key_);
      }
      const _value_ = json["value"];
      if (_value_) {
        msg.value = BigInt(_value_);
      }
      return msg;
    },
  },

  MapUint32Uint32: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestMap.MapUint32Uint32>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        json["value"] = msg.value;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestMap.MapUint32Uint32,
      json: any,
    ): TestMap.MapUint32Uint32 {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = _key_;
      }
      const _value_ = json["value"];
      if (_value_) {
        msg.value = _value_;
      }
      return msg;
    },
  },

  MapUint64Uint64: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestMap.MapUint64Uint64>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key.toString();
      }
      if (msg.value) {
        json["value"] = msg.value.toString();
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestMap.MapUint64Uint64,
      json: any,
    ): TestMap.MapUint64Uint64 {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = BigInt(_key_);
      }
      const _value_ = json["value"];
      if (_value_) {
        msg.value = BigInt(_value_);
      }
      return msg;
    },
  },

  MapSint32Sint32: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestMap.MapSint32Sint32>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        json["value"] = msg.value;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestMap.MapSint32Sint32,
      json: any,
    ): TestMap.MapSint32Sint32 {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = _key_;
      }
      const _value_ = json["value"];
      if (_value_) {
        msg.value = _value_;
      }
      return msg;
    },
  },

  MapSint64Sint64: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestMap.MapSint64Sint64>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key.toString();
      }
      if (msg.value) {
        json["value"] = msg.value.toString();
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestMap.MapSint64Sint64,
      json: any,
    ): TestMap.MapSint64Sint64 {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = BigInt(_key_);
      }
      const _value_ = json["value"];
      if (_value_) {
        msg.value = BigInt(_value_);
      }
      return msg;
    },
  },

  MapFixed32Fixed32: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestMap.MapFixed32Fixed32>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        json["value"] = msg.value;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestMap.MapFixed32Fixed32,
      json: any,
    ): TestMap.MapFixed32Fixed32 {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = _key_;
      }
      const _value_ = json["value"];
      if (_value_) {
        msg.value = _value_;
      }
      return msg;
    },
  },

  MapFixed64Fixed64: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestMap.MapFixed64Fixed64>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key.toString();
      }
      if (msg.value) {
        json["value"] = msg.value.toString();
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestMap.MapFixed64Fixed64,
      json: any,
    ): TestMap.MapFixed64Fixed64 {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = BigInt(_key_);
      }
      const _value_ = json["value"];
      if (_value_) {
        msg.value = BigInt(_value_);
      }
      return msg;
    },
  },

  MapSfixed32Sfixed32: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestMap.MapSfixed32Sfixed32>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        json["value"] = msg.value;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestMap.MapSfixed32Sfixed32,
      json: any,
    ): TestMap.MapSfixed32Sfixed32 {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = _key_;
      }
      const _value_ = json["value"];
      if (_value_) {
        msg.value = _value_;
      }
      return msg;
    },
  },

  MapSfixed64Sfixed64: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestMap.MapSfixed64Sfixed64>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key.toString();
      }
      if (msg.value) {
        json["value"] = msg.value.toString();
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestMap.MapSfixed64Sfixed64,
      json: any,
    ): TestMap.MapSfixed64Sfixed64 {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = BigInt(_key_);
      }
      const _value_ = json["value"];
      if (_value_) {
        msg.value = BigInt(_value_);
      }
      return msg;
    },
  },

  MapInt32Float: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestMap.MapInt32Float>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        json["value"] = msg.value;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestMap.MapInt32Float,
      json: any,
    ): TestMap.MapInt32Float {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = _key_;
      }
      const _value_ = json["value"];
      if (_value_) {
        msg.value = _value_;
      }
      return msg;
    },
  },

  MapInt32Double: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestMap.MapInt32Double>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        json["value"] = msg.value;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestMap.MapInt32Double,
      json: any,
    ): TestMap.MapInt32Double {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = _key_;
      }
      const _value_ = json["value"];
      if (_value_) {
        msg.value = _value_;
      }
      return msg;
    },
  },

  MapBoolBool: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestMap.MapBoolBool>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        json["value"] = msg.value;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestMap.MapBoolBool,
      json: any,
    ): TestMap.MapBoolBool {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = _key_;
      }
      const _value_ = json["value"];
      if (_value_) {
        msg.value = _value_;
      }
      return msg;
    },
  },

  MapStringString: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestMap.MapStringString>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        json["value"] = msg.value;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestMap.MapStringString,
      json: any,
    ): TestMap.MapStringString {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = _key_;
      }
      const _value_ = json["value"];
      if (_value_) {
        msg.value = _value_;
      }
      return msg;
    },
  },

  MapInt32Bytes: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestMap.MapInt32Bytes>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value?.length) {
        json["value"] = encodeBase64Bytes(msg.value);
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestMap.MapInt32Bytes,
      json: any,
    ): TestMap.MapInt32Bytes {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = _key_;
      }
      const _value_ = json["value"];
      if (_value_) {
        msg.value = decodeBase64Bytes(_value_);
      }
      return msg;
    },
  },

  MapInt32Enum: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestMap.MapInt32Enum>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value && MapEnumJSON._toInt(msg.value)) {
        json["value"] = msg.value;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestMap.MapInt32Enum,
      json: any,
    ): TestMap.MapInt32Enum {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = _key_;
      }
      const _value_ = json["value"];
      if (_value_) {
        msg.value = _value_;
      }
      return msg;
    },
  },

  MapInt32ForeignMessage: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestMap.MapInt32ForeignMessage>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        const _value_ = googleProtobufUnittest.ForeignMessageJSON._writeMessage(
          msg.value,
        );
        if (Object.keys(_value_).length > 0) {
          json["value"] = _value_;
        }
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestMap.MapInt32ForeignMessage,
      json: any,
    ): TestMap.MapInt32ForeignMessage {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = _key_;
      }
      const _value_ = json["value"];
      if (_value_) {
        googleProtobufUnittest.ForeignMessageJSON._readMessage(
          msg.value,
          _value_,
        );
      }
      return msg;
    },
  },

  MapStringForeignMessage: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestMap.MapStringForeignMessage>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        const _value_ = googleProtobufUnittest.ForeignMessageJSON._writeMessage(
          msg.value,
        );
        if (Object.keys(_value_).length > 0) {
          json["value"] = _value_;
        }
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestMap.MapStringForeignMessage,
      json: any,
    ): TestMap.MapStringForeignMessage {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = _key_;
      }
      const _value_ = json["value"];
      if (_value_) {
        googleProtobufUnittest.ForeignMessageJSON._readMessage(
          msg.value,
          _value_,
        );
      }
      return msg;
    },
  },

  MapInt32AllTypes: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestMap.MapInt32AllTypes>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        const _value_ = googleProtobufUnittest.TestAllTypesJSON._writeMessage(
          msg.value,
        );
        if (Object.keys(_value_).length > 0) {
          json["value"] = _value_;
        }
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestMap.MapInt32AllTypes,
      json: any,
    ): TestMap.MapInt32AllTypes {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = _key_;
      }
      const _value_ = json["value"];
      if (_value_) {
        googleProtobufUnittest.TestAllTypesJSON._readMessage(
          msg.value,
          _value_,
        );
      }
      return msg;
    },
  },
};

export const TestMapSubmessageJSON = {
  /**
   * Serializes TestMapSubmessage to JSON.
   */
  encode: function (msg: PartialDeep<TestMapSubmessage>): string {
    return JSON.stringify(TestMapSubmessageJSON._writeMessage(msg));
  },

  /**
   * Deserializes TestMapSubmessage from JSON.
   */
  decode: function (json: string): TestMapSubmessage {
    return TestMapSubmessageJSON._readMessage(
      TestMapSubmessageJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes TestMapSubmessage with all fields set to their default value.
   */
  initialize: function (): TestMapSubmessage {
    return {
      testMap: TestMapJSON.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<TestMapSubmessage>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.testMap) {
      const _testMap_ = TestMapJSON._writeMessage(msg.testMap);
      if (Object.keys(_testMap_).length > 0) {
        json["testMap"] = _testMap_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: TestMapSubmessage,
    json: any,
  ): TestMapSubmessage {
    const _testMap_ = json["testMap"] ?? json["test_map"];
    if (_testMap_) {
      TestMapJSON._readMessage(msg.testMap, _testMap_);
    }
    return msg;
  },
};

export const TestMessageMapJSON = {
  /**
   * Serializes TestMessageMap to JSON.
   */
  encode: function (msg: PartialDeep<TestMessageMap>): string {
    return JSON.stringify(TestMessageMapJSON._writeMessage(msg));
  },

  /**
   * Deserializes TestMessageMap from JSON.
   */
  decode: function (json: string): TestMessageMap {
    return TestMessageMapJSON._readMessage(
      TestMessageMapJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes TestMessageMap with all fields set to their default value.
   */
  initialize: function (): TestMessageMap {
    return {
      mapInt32Message: {},
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<TestMessageMap>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.mapInt32Message) {
      const _mapInt32Message_ = Object.fromEntries(
        Object.entries(msg.mapInt32Message)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestMessageMapJSON.MapInt32Message._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_mapInt32Message_).length > 0) {
        json["mapInt32Message"] = _mapInt32Message_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: TestMessageMap, json: any): TestMessageMap {
    const _mapInt32Message_ =
      json["mapInt32Message"] ?? json["map_int32_message"];
    if (_mapInt32Message_) {
      msg.mapInt32Message = Object.fromEntries(
        Object.entries(_mapInt32Message_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestMessageMapJSON.MapInt32Message._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    return msg;
  },

  MapInt32Message: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestMessageMap.MapInt32Message>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        const _value_ = googleProtobufUnittest.TestAllTypesJSON._writeMessage(
          msg.value,
        );
        if (Object.keys(_value_).length > 0) {
          json["value"] = _value_;
        }
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestMessageMap.MapInt32Message,
      json: any,
    ): TestMessageMap.MapInt32Message {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = _key_;
      }
      const _value_ = json["value"];
      if (_value_) {
        googleProtobufUnittest.TestAllTypesJSON._readMessage(
          msg.value,
          _value_,
        );
      }
      return msg;
    },
  },
};

export const TestSameTypeMapJSON = {
  /**
   * Serializes TestSameTypeMap to JSON.
   */
  encode: function (msg: PartialDeep<TestSameTypeMap>): string {
    return JSON.stringify(TestSameTypeMapJSON._writeMessage(msg));
  },

  /**
   * Deserializes TestSameTypeMap from JSON.
   */
  decode: function (json: string): TestSameTypeMap {
    return TestSameTypeMapJSON._readMessage(
      TestSameTypeMapJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes TestSameTypeMap with all fields set to their default value.
   */
  initialize: function (): TestSameTypeMap {
    return {
      map1: {},
      map2: {},
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<TestSameTypeMap>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.map1) {
      const _map1_ = Object.fromEntries(
        Object.entries(msg.map1)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestSameTypeMapJSON.Map1._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_map1_).length > 0) {
        json["map1"] = _map1_;
      }
    }
    if (msg.map2) {
      const _map2_ = Object.fromEntries(
        Object.entries(msg.map2)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestSameTypeMapJSON.Map2._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_map2_).length > 0) {
        json["map2"] = _map2_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: TestSameTypeMap, json: any): TestSameTypeMap {
    const _map1_ = json["map1"];
    if (_map1_) {
      msg.map1 = Object.fromEntries(
        Object.entries(_map1_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestSameTypeMapJSON.Map1._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _map2_ = json["map2"];
    if (_map2_) {
      msg.map2 = Object.fromEntries(
        Object.entries(_map2_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestSameTypeMapJSON.Map2._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    return msg;
  },

  Map1: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestSameTypeMap.Map1>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        json["value"] = msg.value;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestSameTypeMap.Map1,
      json: any,
    ): TestSameTypeMap.Map1 {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = _key_;
      }
      const _value_ = json["value"];
      if (_value_) {
        msg.value = _value_;
      }
      return msg;
    },
  },

  Map2: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestSameTypeMap.Map2>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        json["value"] = msg.value;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestSameTypeMap.Map2,
      json: any,
    ): TestSameTypeMap.Map2 {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = _key_;
      }
      const _value_ = json["value"];
      if (_value_) {
        msg.value = _value_;
      }
      return msg;
    },
  },
};

export const TestRequiredMessageMapJSON = {
  /**
   * Serializes TestRequiredMessageMap to JSON.
   */
  encode: function (msg: PartialDeep<TestRequiredMessageMap>): string {
    return JSON.stringify(TestRequiredMessageMapJSON._writeMessage(msg));
  },

  /**
   * Deserializes TestRequiredMessageMap from JSON.
   */
  decode: function (json: string): TestRequiredMessageMap {
    return TestRequiredMessageMapJSON._readMessage(
      TestRequiredMessageMapJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes TestRequiredMessageMap with all fields set to their default value.
   */
  initialize: function (): TestRequiredMessageMap {
    return {
      mapField: {},
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<TestRequiredMessageMap>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.mapField) {
      const _mapField_ = Object.fromEntries(
        Object.entries(msg.mapField)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestRequiredMessageMapJSON.MapField._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_mapField_).length > 0) {
        json["mapField"] = _mapField_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: TestRequiredMessageMap,
    json: any,
  ): TestRequiredMessageMap {
    const _mapField_ = json["mapField"] ?? json["map_field"];
    if (_mapField_) {
      msg.mapField = Object.fromEntries(
        Object.entries(_mapField_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestRequiredMessageMapJSON.MapField._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    return msg;
  },

  MapField: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestRequiredMessageMap.MapField>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        const _value_ = googleProtobufUnittest.TestRequiredJSON._writeMessage(
          msg.value,
        );
        if (Object.keys(_value_).length > 0) {
          json["value"] = _value_;
        }
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestRequiredMessageMap.MapField,
      json: any,
    ): TestRequiredMessageMap.MapField {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = _key_;
      }
      const _value_ = json["value"];
      if (_value_) {
        googleProtobufUnittest.TestRequiredJSON._readMessage(
          msg.value,
          _value_,
        );
      }
      return msg;
    },
  },
};

export const TestArenaMapJSON = {
  /**
   * Serializes TestArenaMap to JSON.
   */
  encode: function (msg: PartialDeep<TestArenaMap>): string {
    return JSON.stringify(TestArenaMapJSON._writeMessage(msg));
  },

  /**
   * Deserializes TestArenaMap from JSON.
   */
  decode: function (json: string): TestArenaMap {
    return TestArenaMapJSON._readMessage(
      TestArenaMapJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes TestArenaMap with all fields set to their default value.
   */
  initialize: function (): TestArenaMap {
    return {
      mapInt32Int32: {},
      mapInt64Int64: {},
      mapUint32Uint32: {},
      mapUint64Uint64: {},
      mapSint32Sint32: {},
      mapSint64Sint64: {},
      mapFixed32Fixed32: {},
      mapFixed64Fixed64: {},
      mapSfixed32Sfixed32: {},
      mapSfixed64Sfixed64: {},
      mapInt32Float: {},
      mapInt32Double: {},
      mapBoolBool: {},
      mapStringString: {},
      mapInt32Bytes: {},
      mapInt32Enum: {},
      mapInt32ForeignMessage: {},
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<TestArenaMap>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.mapInt32Int32) {
      const _mapInt32Int32_ = Object.fromEntries(
        Object.entries(msg.mapInt32Int32)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestArenaMapJSON.MapInt32Int32._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_mapInt32Int32_).length > 0) {
        json["mapInt32Int32"] = _mapInt32Int32_;
      }
    }
    if (msg.mapInt64Int64) {
      const _mapInt64Int64_ = Object.fromEntries(
        Object.entries(msg.mapInt64Int64)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestArenaMapJSON.MapInt64Int64._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_mapInt64Int64_).length > 0) {
        json["mapInt64Int64"] = _mapInt64Int64_;
      }
    }
    if (msg.mapUint32Uint32) {
      const _mapUint32Uint32_ = Object.fromEntries(
        Object.entries(msg.mapUint32Uint32)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestArenaMapJSON.MapUint32Uint32._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_mapUint32Uint32_).length > 0) {
        json["mapUint32Uint32"] = _mapUint32Uint32_;
      }
    }
    if (msg.mapUint64Uint64) {
      const _mapUint64Uint64_ = Object.fromEntries(
        Object.entries(msg.mapUint64Uint64)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestArenaMapJSON.MapUint64Uint64._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_mapUint64Uint64_).length > 0) {
        json["mapUint64Uint64"] = _mapUint64Uint64_;
      }
    }
    if (msg.mapSint32Sint32) {
      const _mapSint32Sint32_ = Object.fromEntries(
        Object.entries(msg.mapSint32Sint32)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestArenaMapJSON.MapSint32Sint32._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_mapSint32Sint32_).length > 0) {
        json["mapSint32Sint32"] = _mapSint32Sint32_;
      }
    }
    if (msg.mapSint64Sint64) {
      const _mapSint64Sint64_ = Object.fromEntries(
        Object.entries(msg.mapSint64Sint64)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestArenaMapJSON.MapSint64Sint64._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_mapSint64Sint64_).length > 0) {
        json["mapSint64Sint64"] = _mapSint64Sint64_;
      }
    }
    if (msg.mapFixed32Fixed32) {
      const _mapFixed32Fixed32_ = Object.fromEntries(
        Object.entries(msg.mapFixed32Fixed32)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestArenaMapJSON.MapFixed32Fixed32._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_mapFixed32Fixed32_).length > 0) {
        json["mapFixed32Fixed32"] = _mapFixed32Fixed32_;
      }
    }
    if (msg.mapFixed64Fixed64) {
      const _mapFixed64Fixed64_ = Object.fromEntries(
        Object.entries(msg.mapFixed64Fixed64)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestArenaMapJSON.MapFixed64Fixed64._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_mapFixed64Fixed64_).length > 0) {
        json["mapFixed64Fixed64"] = _mapFixed64Fixed64_;
      }
    }
    if (msg.mapSfixed32Sfixed32) {
      const _mapSfixed32Sfixed32_ = Object.fromEntries(
        Object.entries(msg.mapSfixed32Sfixed32)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestArenaMapJSON.MapSfixed32Sfixed32._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_mapSfixed32Sfixed32_).length > 0) {
        json["mapSfixed32Sfixed32"] = _mapSfixed32Sfixed32_;
      }
    }
    if (msg.mapSfixed64Sfixed64) {
      const _mapSfixed64Sfixed64_ = Object.fromEntries(
        Object.entries(msg.mapSfixed64Sfixed64)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestArenaMapJSON.MapSfixed64Sfixed64._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_mapSfixed64Sfixed64_).length > 0) {
        json["mapSfixed64Sfixed64"] = _mapSfixed64Sfixed64_;
      }
    }
    if (msg.mapInt32Float) {
      const _mapInt32Float_ = Object.fromEntries(
        Object.entries(msg.mapInt32Float)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestArenaMapJSON.MapInt32Float._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_mapInt32Float_).length > 0) {
        json["mapInt32Float"] = _mapInt32Float_;
      }
    }
    if (msg.mapInt32Double) {
      const _mapInt32Double_ = Object.fromEntries(
        Object.entries(msg.mapInt32Double)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestArenaMapJSON.MapInt32Double._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_mapInt32Double_).length > 0) {
        json["mapInt32Double"] = _mapInt32Double_;
      }
    }
    if (msg.mapBoolBool) {
      const _mapBoolBool_ = Object.fromEntries(
        Object.entries(msg.mapBoolBool)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestArenaMapJSON.MapBoolBool._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_mapBoolBool_).length > 0) {
        json["mapBoolBool"] = _mapBoolBool_;
      }
    }
    if (msg.mapStringString) {
      const _mapStringString_ = Object.fromEntries(
        Object.entries(msg.mapStringString)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestArenaMapJSON.MapStringString._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_mapStringString_).length > 0) {
        json["mapStringString"] = _mapStringString_;
      }
    }
    if (msg.mapInt32Bytes) {
      const _mapInt32Bytes_ = Object.fromEntries(
        Object.entries(msg.mapInt32Bytes)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestArenaMapJSON.MapInt32Bytes._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_mapInt32Bytes_).length > 0) {
        json["mapInt32Bytes"] = _mapInt32Bytes_;
      }
    }
    if (msg.mapInt32Enum) {
      const _mapInt32Enum_ = Object.fromEntries(
        Object.entries(msg.mapInt32Enum)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestArenaMapJSON.MapInt32Enum._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_mapInt32Enum_).length > 0) {
        json["mapInt32Enum"] = _mapInt32Enum_;
      }
    }
    if (msg.mapInt32ForeignMessage) {
      const _mapInt32ForeignMessage_ = Object.fromEntries(
        Object.entries(msg.mapInt32ForeignMessage)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestArenaMapJSON.MapInt32ForeignMessage._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_mapInt32ForeignMessage_).length > 0) {
        json["mapInt32ForeignMessage"] = _mapInt32ForeignMessage_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: TestArenaMap, json: any): TestArenaMap {
    const _mapInt32Int32_ = json["mapInt32Int32"] ?? json["map_int32_int32"];
    if (_mapInt32Int32_) {
      msg.mapInt32Int32 = Object.fromEntries(
        Object.entries(_mapInt32Int32_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestArenaMapJSON.MapInt32Int32._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _mapInt64Int64_ = json["mapInt64Int64"] ?? json["map_int64_int64"];
    if (_mapInt64Int64_) {
      msg.mapInt64Int64 = Object.fromEntries(
        Object.entries(_mapInt64Int64_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestArenaMapJSON.MapInt64Int64._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _mapUint32Uint32_ =
      json["mapUint32Uint32"] ?? json["map_uint32_uint32"];
    if (_mapUint32Uint32_) {
      msg.mapUint32Uint32 = Object.fromEntries(
        Object.entries(_mapUint32Uint32_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestArenaMapJSON.MapUint32Uint32._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _mapUint64Uint64_ =
      json["mapUint64Uint64"] ?? json["map_uint64_uint64"];
    if (_mapUint64Uint64_) {
      msg.mapUint64Uint64 = Object.fromEntries(
        Object.entries(_mapUint64Uint64_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestArenaMapJSON.MapUint64Uint64._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _mapSint32Sint32_ =
      json["mapSint32Sint32"] ?? json["map_sint32_sint32"];
    if (_mapSint32Sint32_) {
      msg.mapSint32Sint32 = Object.fromEntries(
        Object.entries(_mapSint32Sint32_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestArenaMapJSON.MapSint32Sint32._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _mapSint64Sint64_ =
      json["mapSint64Sint64"] ?? json["map_sint64_sint64"];
    if (_mapSint64Sint64_) {
      msg.mapSint64Sint64 = Object.fromEntries(
        Object.entries(_mapSint64Sint64_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestArenaMapJSON.MapSint64Sint64._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _mapFixed32Fixed32_ =
      json["mapFixed32Fixed32"] ?? json["map_fixed32_fixed32"];
    if (_mapFixed32Fixed32_) {
      msg.mapFixed32Fixed32 = Object.fromEntries(
        Object.entries(_mapFixed32Fixed32_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestArenaMapJSON.MapFixed32Fixed32._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _mapFixed64Fixed64_ =
      json["mapFixed64Fixed64"] ?? json["map_fixed64_fixed64"];
    if (_mapFixed64Fixed64_) {
      msg.mapFixed64Fixed64 = Object.fromEntries(
        Object.entries(_mapFixed64Fixed64_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestArenaMapJSON.MapFixed64Fixed64._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _mapSfixed32Sfixed32_ =
      json["mapSfixed32Sfixed32"] ?? json["map_sfixed32_sfixed32"];
    if (_mapSfixed32Sfixed32_) {
      msg.mapSfixed32Sfixed32 = Object.fromEntries(
        Object.entries(_mapSfixed32Sfixed32_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestArenaMapJSON.MapSfixed32Sfixed32._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _mapSfixed64Sfixed64_ =
      json["mapSfixed64Sfixed64"] ?? json["map_sfixed64_sfixed64"];
    if (_mapSfixed64Sfixed64_) {
      msg.mapSfixed64Sfixed64 = Object.fromEntries(
        Object.entries(_mapSfixed64Sfixed64_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestArenaMapJSON.MapSfixed64Sfixed64._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _mapInt32Float_ = json["mapInt32Float"] ?? json["map_int32_float"];
    if (_mapInt32Float_) {
      msg.mapInt32Float = Object.fromEntries(
        Object.entries(_mapInt32Float_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestArenaMapJSON.MapInt32Float._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _mapInt32Double_ = json["mapInt32Double"] ?? json["map_int32_double"];
    if (_mapInt32Double_) {
      msg.mapInt32Double = Object.fromEntries(
        Object.entries(_mapInt32Double_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestArenaMapJSON.MapInt32Double._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _mapBoolBool_ = json["mapBoolBool"] ?? json["map_bool_bool"];
    if (_mapBoolBool_) {
      msg.mapBoolBool = Object.fromEntries(
        Object.entries(_mapBoolBool_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestArenaMapJSON.MapBoolBool._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _mapStringString_ =
      json["mapStringString"] ?? json["map_string_string"];
    if (_mapStringString_) {
      msg.mapStringString = Object.fromEntries(
        Object.entries(_mapStringString_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestArenaMapJSON.MapStringString._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _mapInt32Bytes_ = json["mapInt32Bytes"] ?? json["map_int32_bytes"];
    if (_mapInt32Bytes_) {
      msg.mapInt32Bytes = Object.fromEntries(
        Object.entries(_mapInt32Bytes_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestArenaMapJSON.MapInt32Bytes._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _mapInt32Enum_ = json["mapInt32Enum"] ?? json["map_int32_enum"];
    if (_mapInt32Enum_) {
      msg.mapInt32Enum = Object.fromEntries(
        Object.entries(_mapInt32Enum_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestArenaMapJSON.MapInt32Enum._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _mapInt32ForeignMessage_ =
      json["mapInt32ForeignMessage"] ?? json["map_int32_foreign_message"];
    if (_mapInt32ForeignMessage_) {
      msg.mapInt32ForeignMessage = Object.fromEntries(
        Object.entries(_mapInt32ForeignMessage_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestArenaMapJSON.MapInt32ForeignMessage._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    return msg;
  },

  MapInt32Int32: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestArenaMap.MapInt32Int32>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        json["value"] = msg.value;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestArenaMap.MapInt32Int32,
      json: any,
    ): TestArenaMap.MapInt32Int32 {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = _key_;
      }
      const _value_ = json["value"];
      if (_value_) {
        msg.value = _value_;
      }
      return msg;
    },
  },

  MapInt64Int64: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestArenaMap.MapInt64Int64>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key.toString();
      }
      if (msg.value) {
        json["value"] = msg.value.toString();
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestArenaMap.MapInt64Int64,
      json: any,
    ): TestArenaMap.MapInt64Int64 {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = BigInt(_key_);
      }
      const _value_ = json["value"];
      if (_value_) {
        msg.value = BigInt(_value_);
      }
      return msg;
    },
  },

  MapUint32Uint32: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestArenaMap.MapUint32Uint32>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        json["value"] = msg.value;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestArenaMap.MapUint32Uint32,
      json: any,
    ): TestArenaMap.MapUint32Uint32 {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = _key_;
      }
      const _value_ = json["value"];
      if (_value_) {
        msg.value = _value_;
      }
      return msg;
    },
  },

  MapUint64Uint64: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestArenaMap.MapUint64Uint64>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key.toString();
      }
      if (msg.value) {
        json["value"] = msg.value.toString();
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestArenaMap.MapUint64Uint64,
      json: any,
    ): TestArenaMap.MapUint64Uint64 {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = BigInt(_key_);
      }
      const _value_ = json["value"];
      if (_value_) {
        msg.value = BigInt(_value_);
      }
      return msg;
    },
  },

  MapSint32Sint32: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestArenaMap.MapSint32Sint32>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        json["value"] = msg.value;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestArenaMap.MapSint32Sint32,
      json: any,
    ): TestArenaMap.MapSint32Sint32 {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = _key_;
      }
      const _value_ = json["value"];
      if (_value_) {
        msg.value = _value_;
      }
      return msg;
    },
  },

  MapSint64Sint64: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestArenaMap.MapSint64Sint64>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key.toString();
      }
      if (msg.value) {
        json["value"] = msg.value.toString();
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestArenaMap.MapSint64Sint64,
      json: any,
    ): TestArenaMap.MapSint64Sint64 {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = BigInt(_key_);
      }
      const _value_ = json["value"];
      if (_value_) {
        msg.value = BigInt(_value_);
      }
      return msg;
    },
  },

  MapFixed32Fixed32: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestArenaMap.MapFixed32Fixed32>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        json["value"] = msg.value;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestArenaMap.MapFixed32Fixed32,
      json: any,
    ): TestArenaMap.MapFixed32Fixed32 {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = _key_;
      }
      const _value_ = json["value"];
      if (_value_) {
        msg.value = _value_;
      }
      return msg;
    },
  },

  MapFixed64Fixed64: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestArenaMap.MapFixed64Fixed64>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key.toString();
      }
      if (msg.value) {
        json["value"] = msg.value.toString();
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestArenaMap.MapFixed64Fixed64,
      json: any,
    ): TestArenaMap.MapFixed64Fixed64 {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = BigInt(_key_);
      }
      const _value_ = json["value"];
      if (_value_) {
        msg.value = BigInt(_value_);
      }
      return msg;
    },
  },

  MapSfixed32Sfixed32: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestArenaMap.MapSfixed32Sfixed32>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        json["value"] = msg.value;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestArenaMap.MapSfixed32Sfixed32,
      json: any,
    ): TestArenaMap.MapSfixed32Sfixed32 {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = _key_;
      }
      const _value_ = json["value"];
      if (_value_) {
        msg.value = _value_;
      }
      return msg;
    },
  },

  MapSfixed64Sfixed64: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestArenaMap.MapSfixed64Sfixed64>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key.toString();
      }
      if (msg.value) {
        json["value"] = msg.value.toString();
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestArenaMap.MapSfixed64Sfixed64,
      json: any,
    ): TestArenaMap.MapSfixed64Sfixed64 {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = BigInt(_key_);
      }
      const _value_ = json["value"];
      if (_value_) {
        msg.value = BigInt(_value_);
      }
      return msg;
    },
  },

  MapInt32Float: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestArenaMap.MapInt32Float>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        json["value"] = msg.value;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestArenaMap.MapInt32Float,
      json: any,
    ): TestArenaMap.MapInt32Float {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = _key_;
      }
      const _value_ = json["value"];
      if (_value_) {
        msg.value = _value_;
      }
      return msg;
    },
  },

  MapInt32Double: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestArenaMap.MapInt32Double>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        json["value"] = msg.value;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestArenaMap.MapInt32Double,
      json: any,
    ): TestArenaMap.MapInt32Double {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = _key_;
      }
      const _value_ = json["value"];
      if (_value_) {
        msg.value = _value_;
      }
      return msg;
    },
  },

  MapBoolBool: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestArenaMap.MapBoolBool>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        json["value"] = msg.value;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestArenaMap.MapBoolBool,
      json: any,
    ): TestArenaMap.MapBoolBool {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = _key_;
      }
      const _value_ = json["value"];
      if (_value_) {
        msg.value = _value_;
      }
      return msg;
    },
  },

  MapStringString: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestArenaMap.MapStringString>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        json["value"] = msg.value;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestArenaMap.MapStringString,
      json: any,
    ): TestArenaMap.MapStringString {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = _key_;
      }
      const _value_ = json["value"];
      if (_value_) {
        msg.value = _value_;
      }
      return msg;
    },
  },

  MapInt32Bytes: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestArenaMap.MapInt32Bytes>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value?.length) {
        json["value"] = encodeBase64Bytes(msg.value);
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestArenaMap.MapInt32Bytes,
      json: any,
    ): TestArenaMap.MapInt32Bytes {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = _key_;
      }
      const _value_ = json["value"];
      if (_value_) {
        msg.value = decodeBase64Bytes(_value_);
      }
      return msg;
    },
  },

  MapInt32Enum: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestArenaMap.MapInt32Enum>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value && MapEnumJSON._toInt(msg.value)) {
        json["value"] = msg.value;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestArenaMap.MapInt32Enum,
      json: any,
    ): TestArenaMap.MapInt32Enum {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = _key_;
      }
      const _value_ = json["value"];
      if (_value_) {
        msg.value = _value_;
      }
      return msg;
    },
  },

  MapInt32ForeignMessage: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestArenaMap.MapInt32ForeignMessage>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        const _value_ = googleProtobufUnittest.ForeignMessageJSON._writeMessage(
          msg.value,
        );
        if (Object.keys(_value_).length > 0) {
          json["value"] = _value_;
        }
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestArenaMap.MapInt32ForeignMessage,
      json: any,
    ): TestArenaMap.MapInt32ForeignMessage {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = _key_;
      }
      const _value_ = json["value"];
      if (_value_) {
        googleProtobufUnittest.ForeignMessageJSON._readMessage(
          msg.value,
          _value_,
        );
      }
      return msg;
    },
  },
};

export const MessageContainingMapCalledEntryJSON = {
  /**
   * Serializes MessageContainingMapCalledEntry to JSON.
   */
  encode: function (msg: PartialDeep<MessageContainingMapCalledEntry>): string {
    return JSON.stringify(
      MessageContainingMapCalledEntryJSON._writeMessage(msg),
    );
  },

  /**
   * Deserializes MessageContainingMapCalledEntry from JSON.
   */
  decode: function (json: string): MessageContainingMapCalledEntry {
    return MessageContainingMapCalledEntryJSON._readMessage(
      MessageContainingMapCalledEntryJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes MessageContainingMapCalledEntry with all fields set to their default value.
   */
  initialize: function (): MessageContainingMapCalledEntry {
    return {
      entry: {},
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<MessageContainingMapCalledEntry>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.entry) {
      const _entry_ = Object.fromEntries(
        Object.entries(msg.entry)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MessageContainingMapCalledEntryJSON.Entry._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_entry_).length > 0) {
        json["entry"] = _entry_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: MessageContainingMapCalledEntry,
    json: any,
  ): MessageContainingMapCalledEntry {
    const _entry_ = json["entry"];
    if (_entry_) {
      msg.entry = Object.fromEntries(
        Object.entries(_entry_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MessageContainingMapCalledEntryJSON.Entry._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    return msg;
  },

  Entry: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<MessageContainingMapCalledEntry.Entry>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        json["value"] = msg.value;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: MessageContainingMapCalledEntry.Entry,
      json: any,
    ): MessageContainingMapCalledEntry.Entry {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = _key_;
      }
      const _value_ = json["value"];
      if (_value_) {
        msg.value = _value_;
      }
      return msg;
    },
  },
};

export const TestRecursiveMapMessageJSON = {
  /**
   * Serializes TestRecursiveMapMessage to JSON.
   */
  encode: function (msg: PartialDeep<TestRecursiveMapMessage>): string {
    return JSON.stringify(TestRecursiveMapMessageJSON._writeMessage(msg));
  },

  /**
   * Deserializes TestRecursiveMapMessage from JSON.
   */
  decode: function (json: string): TestRecursiveMapMessage {
    return TestRecursiveMapMessageJSON._readMessage(
      TestRecursiveMapMessageJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes TestRecursiveMapMessage with all fields set to their default value.
   */
  initialize: function (): TestRecursiveMapMessage {
    return {
      a: {},
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<TestRecursiveMapMessage>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.a) {
      const _a_ = Object.fromEntries(
        Object.entries(msg.a)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestRecursiveMapMessageJSON.A._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_a_).length > 0) {
        json["a"] = _a_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: TestRecursiveMapMessage,
    json: any,
  ): TestRecursiveMapMessage {
    const _a_ = json["a"];
    if (_a_) {
      msg.a = Object.fromEntries(
        Object.entries(_a_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(TestRecursiveMapMessageJSON.A._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    return msg;
  },

  A: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<TestRecursiveMapMessage.A>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        const _value_ = TestRecursiveMapMessageJSON._writeMessage(msg.value);
        if (Object.keys(_value_).length > 0) {
          json["value"] = _value_;
        }
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: TestRecursiveMapMessage.A,
      json: any,
    ): TestRecursiveMapMessage.A {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = _key_;
      }
      const _value_ = json["value"];
      if (_value_) {
        msg.value = TestRecursiveMapMessageJSON.initialize();
        TestRecursiveMapMessageJSON._readMessage(msg.value, _value_);
      }
      return msg;
    },
  },
};
