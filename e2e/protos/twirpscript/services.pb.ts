// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: twirpscript/services.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";

//========================================//
//                 Types                  //
//========================================//

/**
 * Size of a Hat, in inches.
 */
export interface Req {}

export declare namespace Req {
  export interface MakeHat {
    inches: number;
  }
}

/**
 * A Hat is a piece of headwear made by a Haberdasher.
 */
export interface Hat {
  inches: number;
  color: string;
  name: string;
}

//========================================//
//      Haberdasher Protobuf Client       //
//========================================//

/**
 * MakeHat produces a hat of mysterious, randomly-selected color!
 */
export async function MakeHat(
  makeHat: Req.MakeHat,
  config?: ClientConfiguration,
): Promise<Hat> {
  const response = await PBrequest(
    "/Haberdasher/MakeHat",
    Req.MakeHat.encode(makeHat),
    config,
  );
  return Hat.decode(response);
}

//========================================//
//        Haberdasher JSON Client         //
//========================================//

/**
 * MakeHat produces a hat of mysterious, randomly-selected color!
 */
export async function MakeHatJSON(
  makeHat: Req.MakeHat,
  config?: ClientConfiguration,
): Promise<Hat> {
  const response = await JSONrequest(
    "/Haberdasher/MakeHat",
    ReqJSON.MakeHat.encode(makeHat),
    config,
  );
  return HatJSON.decode(response);
}

//========================================//
//              Haberdasher               //
//========================================//

/**
 * Haberdasher service makes hats for clients.
 */
export interface Haberdasher<Context = unknown> {
  /**
   * MakeHat produces a hat of mysterious, randomly-selected color!
   */
  MakeHat: (makeHat: Req.MakeHat, context: Context) => Promise<Hat> | Hat;
}

export function createHaberdasher<Context>(service: Haberdasher<Context>) {
  return {
    name: "Haberdasher",
    methods: {
      MakeHat: {
        name: "MakeHat",
        handler: service.MakeHat,
        input: { protobuf: Req.MakeHat, json: ReqJSON.MakeHat },
        output: { protobuf: Hat, json: HatJSON },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const Req = {
  /**
   * Serializes Req to protobuf.
   */
  encode: function (_msg?: PartialDeep<Req>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes Req from protobuf.
   */
  decode: function (_bytes?: ByteSource): Req {
    return {};
  },

  /**
   * Initializes Req with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Req>): Req {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<Req>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (_msg: Req, _reader: protoscript.BinaryReader): Req {
    return _msg;
  },

  MakeHat: {
    /**
     * Serializes Req.MakeHat to protobuf.
     */
    encode: function (msg: PartialDeep<Req.MakeHat>): Uint8Array {
      return Req.MakeHat._writeMessage(
        msg,
        new protoscript.BinaryWriter(),
      ).getResultBuffer();
    },

    /**
     * Deserializes Req.MakeHat from protobuf.
     */
    decode: function (bytes: ByteSource): Req.MakeHat {
      return Req.MakeHat._readMessage(
        Req.MakeHat.initialize(),
        new protoscript.BinaryReader(bytes),
      );
    },

    /**
     * Initializes Req.MakeHat with all fields set to their default value.
     */
    initialize: function (msg?: Partial<Req.MakeHat>): Req.MakeHat {
      return {
        inches: 0,
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<Req.MakeHat>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.inches) {
        writer.writeInt32(1, msg.inches);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: Req.MakeHat,
      reader: protoscript.BinaryReader,
    ): Req.MakeHat {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.inches = reader.readInt32();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },
};

export const Hat = {
  /**
   * Serializes Hat to protobuf.
   */
  encode: function (msg: PartialDeep<Hat>): Uint8Array {
    return Hat._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Hat from protobuf.
   */
  decode: function (bytes: ByteSource): Hat {
    return Hat._readMessage(
      Hat.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Hat with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Hat>): Hat {
    return {
      inches: 0,
      color: "",
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Hat>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.inches) {
      writer.writeInt32(1, msg.inches);
    }
    if (msg.color) {
      writer.writeString(2, msg.color);
    }
    if (msg.name) {
      writer.writeString(3, msg.name);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Hat, reader: protoscript.BinaryReader): Hat {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.inches = reader.readInt32();
          break;
        }
        case 2: {
          msg.color = reader.readString();
          break;
        }
        case 3: {
          msg.name = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const ReqJSON = {
  /**
   * Serializes Req to JSON.
   */
  encode: function (_msg?: PartialDeep<Req>): string {
    return "{}";
  },

  /**
   * Deserializes Req from JSON.
   */
  decode: function (_json?: string): Req {
    return {};
  },

  /**
   * Initializes Req with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Req>): Req {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (_msg: PartialDeep<Req>): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (msg: Req, _json: any): Req {
    return msg;
  },

  MakeHat: {
    /**
     * Serializes Req.MakeHat to JSON.
     */
    encode: function (msg: PartialDeep<Req.MakeHat>): string {
      return JSON.stringify(ReqJSON.MakeHat._writeMessage(msg));
    },

    /**
     * Deserializes Req.MakeHat from JSON.
     */
    decode: function (json: string): Req.MakeHat {
      return ReqJSON.MakeHat._readMessage(
        ReqJSON.MakeHat.initialize(),
        JSON.parse(json),
      );
    },

    /**
     * Initializes Req.MakeHat with all fields set to their default value.
     */
    initialize: function (msg?: Partial<Req.MakeHat>): Req.MakeHat {
      return {
        inches: 0,
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<Req.MakeHat>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.inches) {
        json["inches"] = msg.inches;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (msg: Req.MakeHat, json: any): Req.MakeHat {
      const _inches_ = json["inches"];
      if (_inches_) {
        msg.inches = protoscript.parseNumber(_inches_);
      }
      return msg;
    },
  },
};

export const HatJSON = {
  /**
   * Serializes Hat to JSON.
   */
  encode: function (msg: PartialDeep<Hat>): string {
    return JSON.stringify(HatJSON._writeMessage(msg));
  },

  /**
   * Deserializes Hat from JSON.
   */
  decode: function (json: string): Hat {
    return HatJSON._readMessage(HatJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Hat with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Hat>): Hat {
    return {
      inches: 0,
      color: "",
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<Hat>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.inches) {
      json["inches"] = msg.inches;
    }
    if (msg.color) {
      json["color"] = msg.color;
    }
    if (msg.name) {
      json["name"] = msg.name;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Hat, json: any): Hat {
    const _inches_ = json["inches"];
    if (_inches_) {
      msg.inches = protoscript.parseNumber(_inches_);
    }
    const _color_ = json["color"];
    if (_color_) {
      msg.color = _color_;
    }
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    return msg;
  },
};
